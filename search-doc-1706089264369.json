{"searchDocs":[{"title":"click","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/click","content":"click production Mouse left-clicks/taps on the filtered element by moving the mouse cursor to the filtered element first. If you need a simple mouseleftclick/tap only, use mouseLeftClick. Example: await aui.click().button().withText('Google Search').exec(); ","keywords":"","version":"0.11.6"},{"title":"expect","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/expect","content":"expect production Expects a condition, e.g., exists() or notExits(). Use the structure expect().&lt;your filter&gt;.(exists()|notExists()) as shown in the examples below. Examples: await aui.expect().text('Login').exists().exec() await aui.expect().text('Login').notExists().exec() ","keywords":"","version":"0.11.6"},{"title":"mouseDoubleLeftClick","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/mousedoubleleftclick","content":"mouseDoubleLeftClick production Double-clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouse(500,500).exec(); await aui.mouseDoubleLeftClick().exec(); ","keywords":"","version":"0.11.6"},{"title":"execOnShell","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/execonshell","content":"execOnShell production Executes a shell command on the device your UiController is connected to. Example: // Open the lastpass app await aui.execOnShell('monkey -p com.lastpass.authenticator 1').exec(); // Open Google Chrome on Windows await aui.execOnShell(&quot;start chrome&quot;).exec() ;// Open Google Chrome on macOS await aui.execOnShell(&quot;open -a 'Google Chrome'&quot;).exec(); // Open Google Chrome on Linux await aui.execOnShell(&quot;chrome&quot;).exec(); @param {string} shell_command - A shell command which is executed.","keywords":"","version":"0.11.6"},{"title":"mouseDoubleMiddleClick","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/mousedoublemiddleclick","content":"mouseDoubleMiddleClick production Double-clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleMiddleClick().exec(); ","keywords":"","version":"0.11.6"},{"title":"mouseDoubleRightClick","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/mousedoublerightclick","content":"mouseDoubleRightClick production Double-clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleRightClick().exec(); ","keywords":"","version":"0.11.6"},{"title":"mouseMiddleClick","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/mousemiddleclick","content":"mouseMiddleClick production Clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseMiddleClick().exec(); ","keywords":"","version":"0.11.6"},{"title":"mouseLeftClick","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/mouseleftclick","content":"mouseLeftClick production Clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseLeftClick().exec(); ","keywords":"","version":"0.11.6"},{"title":"mouseRightClick","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/mouserightclick","content":"mouseRightClick production Clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseRightClick().exec(); ","keywords":"","version":"0.11.6"},{"title":"mouseToggleDown","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/mousetoggledown","content":"mouseToggleDown production Toggles mouse down (Left mouse key/tap). This is equivalent to mouse-left-press-and-hold. It holds the mouse button until the mouseToggleUp() is called. Often combined with mouseToggleUp()to automate drag-and-drop. Example: await aui.mouseToggleDown().exec(); await aui.moveMouseRelatively(-400,0).exec(); await aui.mouseToggleUp().exec(); ","keywords":"","version":"0.11.6"},{"title":"moveMouseRelatively","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/movemouserelatively","content":"moveMouseRelatively production Moves the mouse from the current position (relative) in x and y direction. caution macOS only: Due to the higher pixel density of the retina display, the input coordinates must be doubled in order to move the mouse as expected. For example, if you want to move the mouse for 100 pixels, use 200. Example: await aui.moveMouseRelatively(0, 50).exec(); @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction.","keywords":"","version":"0.11.6"},{"title":"mouseToggleUp","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/mousetoggleup","content":"mouseToggleUp production Toggles mouse up (Left mouse key/tap).This is equivalent to releasing the pressing mouse left button. Often combined with mouseToggleDown()to automate drag-and-drop. Example: await aui.mouseToggleDown().exec(); await aui.moveMouseRelatively(-400,0).exec(); await aui.mouseToggleUp().exec(); ","keywords":"","version":"0.11.6"},{"title":"moveMouseRelativelyTo","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/movemouserelativelyto","content":"moveMouseRelativelyTo production Moves the mouse relatively to an element in the direction. This can be used when the mouse should not hover over an element anymore. caution macOS only: Due to the higher pixel density of the retina display, the input coordinates must be doubled in order to move the mouse as expected. For example, if you want to move the mouse for 100 pixels, use 200. Examples: // Move mouse 30 pixels below button await aui.moveMouseRelativelyTo(0, 30).button().withText('Submit').exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction.","keywords":"","version":"0.11.6"},{"title":"moveMouse","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/movemouse","content":"moveMouse production Moves the mouse to an arbitrary absolute x and y coordinates. If you want to move your mouse cursor to an element, use moveMouseTo(). caution macOS only: Due to the higher pixel density of the retina display, the input coordinates must be doubled in order to move the mouse as expected. For example, if you want to move the mouse for 100 pixels, use 200. Example: await aui.moveMouse(500, 500).exec(); @param {number} x_coordinate - A (positive/negative) x coordinate.@param {number} y_coordinate - A (positive/negative) y coordinate.","keywords":"","version":"0.11.6"},{"title":"moveMouseTo","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/movemouseto","content":"moveMouseTo production Move mouse over the filtered element. Example: await aui.moveMouseTo().text('Grinning_Face').exec() ","keywords":"","version":"0.11.6"},{"title":"pressAndroidThirdKey","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/pressandroidthirdkey","content":"pressAndroidThirdKey production Press three Android keys like CTRL+ALT+DEL @param {ANDROID_KEY} first_key - A Android key@param {ANDROID_KEY} second_key - A Android key@param {ANDROID_KEY} third_key - A Android key","keywords":"","version":"0.11.6"},{"title":"pressKey","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/presskey","content":"pressKey production Press one keys like del Operating system specific mappings: Windows: command-key maps to windows-key Example: await aui.pressKey('tab').exec(); @param {PC_AND_MODIFIER_KEY} key - A key","keywords":"","version":"0.11.6"},{"title":"pressThreeKeys","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/pressthreekeys","content":"pressThreeKeys production Press three keys like CTRL+ALT+DEL Operating system specific mappings: Windows: command-key maps to windows-key Example: await aui.pressThreeKeys('control', 'command' 'space').exec(); @param {MODIFIER_KEY} first_key - A modifier key@param {MODIFIER_KEY} second_key - A modifier key@param {PC_KEY} third_key - A key","keywords":"","version":"0.11.6"},{"title":"pressAndroidTwoKey","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/pressandroidtwokey","content":"pressAndroidTwoKey production Press two Android keys like volume_down+power. Details Available keyshome, back, call, endcall, star, pound, dpad_up, dpad_down, dpad_left, dpad_right, dpad_center, volume_up, volume_down, power, camera, clear, comma, period, alt_left, alt_right, shift_left, shift_right, tab, space, sym, explorer, envelope, enter, del, grave, minus, equals, left_bracket, right_bracket, backslash, semicolon, apostrophe, slash, at, num, headsethook, focus, plus, menu, notification, search, media_play_pause, media_stop, media_next, media_previous, media_rewind, media_fast_forward, mute, page_up, page_down, switch_charset, escape, forward_del, ctrl_left, ctrl_right, caps_lock, scroll_lock, function, break, move_home, move_end, insert, forward, media_play, media_pause, media_close, media_eject, media_record, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, num_lock, numpad_0, numpad_1, numpad_2, numpad_3, numpad_4, numpad_5, numpad_6, numpad_7, numpad_8, numpad_9, numpad_divide, numpad_multiply, numpad_subtract, numpad_add, numpad_dot, numpad_comma, numpad_enter, numpad_equals, numpad_left_paren, numpad_right_paren, volume_mute, info, channel_up, channel_down, zoom_in, zoom_out, window, guide, bookmark, captions, settings, app_switch, language_switch, contacts, calendar, music, calculator, assist, brightness_down, brightness_up, media_audio_track, sleep, wakeup, pairing, media_top_menu, last_channel, tv_data_service, voice_assist, help, navigate_previous, navigate_next, navigate_in, navigate_out, dpad_up_left, dpad_down_left, dpad_up_right, dpad_down_right, media_skip_forward, media_skip_backward, media_step_forward, media_step_backward, soft_sleep, cut, copy, paste, all_apps, refresh, as well as the digits from 0 to 9 and English alphabets. Example: await aui.pressAndroidTwoKey('volume_down', 'power').exec() @param {ANDROID_KEY} first_key - An Android key@param {ANDROID_KEY} second_key - An Android key","keywords":"","version":"0.11.6"},{"title":"pressTwoKeys","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/presstwokeys","content":"pressTwoKeys production Press two keys like ALT+F4 Operating system specific mappings: Windows: command-key maps to windows-key @param {MODIFIER_KEY} first_key - A modifier key@param {PC_KEY} second_key - A key","keywords":"","version":"0.11.6"},{"title":"pressAndroidKey","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/pressandroidkey","content":"pressAndroidKey production Press one Android key like del. Details Available keyshome, back, call, endcall, star, pound, dpad_up, dpad_down, dpad_left, dpad_right, dpad_center, volume_up, volume_down, power, camera, clear, comma, period, alt_left, alt_right, shift_left, shift_right, tab, space, sym, explorer, envelope, enter, del, grave, minus, equals, left_bracket, right_bracket, backslash, semicolon, apostrophe, slash, at, num, headsethook, focus, plus, menu, notification, search, media_play_pause, media_stop, media_next, media_previous, media_rewind, media_fast_forward, mute, page_up, page_down, switch_charset, escape, forward_del, ctrl_left, ctrl_right, caps_lock, scroll_lock, function, break, move_home, move_end, insert, forward, media_play, media_pause, media_close, media_eject, media_record, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, num_lock, numpad_0, numpad_1, numpad_2, numpad_3, numpad_4, numpad_5, numpad_6, numpad_7, numpad_8, numpad_9, numpad_divide, numpad_multiply, numpad_subtract, numpad_add, numpad_dot, numpad_comma, numpad_enter, numpad_equals, numpad_left_paren, numpad_right_paren, volume_mute, info, channel_up, channel_down, zoom_in, zoom_out, window, guide, bookmark, captions, settings, app_switch, language_switch, contacts, calendar, music, calculator, assist, brightness_down, brightness_up, media_audio_track, sleep, wakeup, pairing, media_top_menu, last_channel, tv_data_service, voice_assist, help, navigate_previous, navigate_next, navigate_in, navigate_out, dpad_up_left, dpad_down_left, dpad_up_right, dpad_down_right, media_skip_forward, media_skip_backward, media_step_forward, media_step_backward, soft_sleep, cut, copy, paste, all_apps, refresh, as well as the digits from 0 to 9 and English alphabets. Example: await aui.pressAndroidKey('notification').exec; @param {ANDROID_KEY} key - An Android key","keywords":"","version":"0.11.6"},{"title":"scroll","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/scroll","content":"scroll production Scrolls based on the current mouse position in the x and y direction. Important: Mouse must be positioned in a scrollable area. macOS: May not work as expected! Example: // Scroll 500 pixels down in y direction await aui.scroll(0, -500).exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction.","keywords":"","version":"0.11.6"},{"title":"scrollInside","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/scrollinside","content":"scrollInside production Moves mouse to the filtered element and scrolls in the x and y direction. macOS: May not work as expected! Example: await aui.scrollInside(0,-500).text('Bottom sheet').exec(); @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction.","keywords":"","version":"0.11.6"},{"title":"swipe","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/swipe","content":"swipe production Swipe an element in the x and y direction. Holds the left mouse button down on Windows, Linux and macOS and drags the element. On touch devices it taps the element and then drags it. Example: // Swipe the element 500 to the right await aui.swipe(500, 0).image().exec() @param {number} x_offset - A x direction. positive and negative values are accepted@param {number} y_offset - A y direction. positive and negative values are accepted","keywords":"","version":"0.11.6"},{"title":"type","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/type","content":"type production Types a text at the current position. If you need to focus the element first, use typeIn() Note: In the current version it copies the text and pastes it. By default, the text is included in the logs and sent over to the askui Inference server to predict in which context the typing has to occur. You can exclude the text from the logs and the request to the askui Inference server setting options.isSecret to true. This should not change the quality of the prediction of the askui Inference server. In this case, options.secretMask is included in logs and sent over instead of the text. Examples: await aui.type('askui@askui.com').exec() // mask the text so it is not send to the askui-inference server await aui.type('Type some text', { isSecret: true, secretMask: '**' }).exec() @param {string} text - A text to type@param {Object} [options]@param {boolean} [options.isSecret = false] - If set to true, text is neither included in logs of askui nor sent over to askui Inference for prediction.@param {string} [options.secretMask = '****'] - If options.isSecret is set to true, this is included in logs and sent over to askui Inference for prediction instead of the text.","keywords":"","version":"0.11.6"},{"title":"waitFor","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/waitfor","content":"waitFor production Waits for &lt;delayInMs&gt; ms, e.g., 1000 ms. The exact delay may be a little longer than &lt;delayInMs&gt; but never shorter than that. Examples: await aui.waitFor(500).exec(); @param {number} delayInMs - The delay in ms to wait for.","keywords":"","version":"0.11.6"},{"title":"annotateInteractively","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Annotation/annotateInteractively","content":"annotateInteractively production caution There is a known bug that can cause a crash when calling annotateInteractively() on Windows. Please use annotate() as a workaround. Creates an annotated version of your screen and shows it to you so you can explore the annotated image. Recognized elements are annotated with a red bounding box. You can copy the filter needed to select the element by left-clicking on the bounding box. See also the detailed explanation to see how you can use it to create instructions. Examples: await aui.annotateInteractively(); ","keywords":"","version":"0.11.6"},{"title":"typeIn","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Actions/typein","content":"typeIn production Puts the focus on the filtered element and types in the text. Note: In the current version it copies the text and pastes it. By default, the text is included in the logs and sent over to the askui Inference server to predict in which context the typing has to occur. You can exclude the text from the logs and the request to the askui Inference server setting options.isSecret to true. This should not change the quality of the prediction of the askui Inference server. In this case, options.secretMask is included in logs and sent over instead of the text. Examples: await aui.typeIn('Type some text').textfield().exec() // mask the text so it is not send to the askui-inference server await aui.typeIn('Type some text', { isSecret: true, secretMask: '**' }).textfield().exec() @param {string} text - A text to type@param {Object} [options]@param {boolean} [options.isSecret = false] - If set to true, text is neither included in logs of askui nor sent over to askui Inference for prediction.@param {string} [options.secretMask = '****'] - If options.isSecret is set to true, this is included in logs and sent over to askui Inference for prediction instead of the text.","keywords":"","version":"0.11.6"},{"title":"exists","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Checks/exists","content":"exists production Expects that filtered element exists. Always use together with expect(). Note Throws an error and stops the execution when the element is not found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does not exist. await aui.expect().text('Login').exists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').exists().exec() } catch (error) { console.log('Too bad we could not find the element!'); } ","keywords":"","version":"0.11.6"},{"title":"notExists","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Checks/notexists","content":"notExists production Expects that filtered element not exists. Always use together with expect(). Note Throws an error and stops the execution when the element is found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does exist. await aui.expect().text('Login').notExists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').notExists().exec() } catch (error) { console.log('Too bad we could find the element!'); } ","keywords":"","version":"0.11.6"},{"title":"annotate","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Annotation/annotate","content":"annotate production Creates an annotated HTML file of the given image and saves it into the given path. If no image is given, then it captures the specified screen and annotates the captured image. The annotated image is saved to &lt;project_root&gt;/report. See also the detailed explanation. Examples: // The annoted image is saved to `&lt;project_root&gt;/report`. await aui.annotate(); // or UiControlClient.annotate({ imagePath: '&lt;your-image-path&gt;', outputPath: '&lt;path-of-the-generated-html&gt;', fileNamePrefix: '&lt;prefix-of-the-output-file&gt;', customElements: CustomElementJson[] // A list of custom elements. The AI model will use them to detect elements similar to them. }); ","keywords":"","version":"0.11.6"},{"title":"button","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/button","content":"button production Filters for a UI element 'button'. Examples: await aui.click().button().contains().text('Google Search').exec() ","keywords":"","version":"0.11.6"},{"title":"askui UI Control Client","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Configuration/askui-ui-control-client","content":"","keywords":"","version":"0.11.6"},{"title":"Log Level​","type":1,"pageTitle":"askui UI Control Client","url":"/docs/0.11.6/api/Configuration/askui-ui-control-client#log-level","content":" Set the log level of the askui UI Control Client using the LOG_LEVEL environment variable. The following log levels are available:  &quot;fatal&quot;&quot;error&quot;&quot;warn&quot;&quot;info&quot;&quot;debug&quot;&quot;trace&quot;&quot;silent&quot;&quot;verbose&quot;.  The log level defaults to &quot;info&quot;. and it can be changed with the following command:  Bash or similar:  export LOG_LEVEL=verbose   Powershell  $env:LOG_LEVEL=&quot;verbose&quot;   ","version":"0.11.6","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"askui UI Control Client","url":"/docs/0.11.6/api/Configuration/askui-ui-control-client#properties","content":" ","version":"0.11.6","tagName":"h2"},{"title":"uiControllerUrl​","type":1,"pageTitle":"askui UI Control Client","url":"/docs/0.11.6/api/Configuration/askui-ui-control-client#uicontrollerurl","content":" uiControllerUrl: string - Default: http://127.0.0.1:6769  The url of the askui UI Controller controlling the OS.    ","version":"0.11.6","tagName":"h3"},{"title":"inferenceServerUrl​","type":1,"pageTitle":"askui UI Control Client","url":"/docs/0.11.6/api/Configuration/askui-ui-control-client#inferenceserverurl","content":" inferenceServerUrl: string - Default: https://inference.askui.com  The address of the askui Inference server.    ","version":"0.11.6","tagName":"h3"},{"title":"resize​","type":1,"pageTitle":"askui UI Control Client","url":"/docs/0.11.6/api/Configuration/askui-ui-control-client#resize","content":" resize: number? - Default: undefinedThe side length of the target image to resize to in px. Your screenshot image will be resized with the original aspect ratio, and the lengths image side will be equal to this number. This can be used to reduce the inference time by reducing the request size in case of a bad internet connection. But it can cause a decrease in the prediction quality. The resizing will be skipped if it's undefined.    ","version":"0.11.6","tagName":"h3"},{"title":"credentials​","type":1,"pageTitle":"askui UI Control Client","url":"/docs/0.11.6/api/Configuration/askui-ui-control-client#credentials","content":" credentials: Credentials Your user credentials - Optional. workspaceId: string Your workspace idtoken: string An access token for authentication with the askui Inference Server  Provide credentials for authentication with the askui Inference Server if you would like to use dedicated, more powerful and stable resources instead of public resources. Credentials can also be provided using the environment variables ASKUI_WORKSPACE_ID and ASKUI_TOKEN but in-code configuration takes precedence over these environment variables. Independent of how you configure the credentials, make sure to use one way to configure all the credentials, i.e., if you set the workspace id via setting the ASKUI_WORKSPACE_ID environment variable, you need to set token with environment variables as well.  Setting credentials in code:   let aui = await UiControlClient.build({ credentials: { workspaceId: '&lt;your workspace id&gt;', token: '&lt;your access token&gt;', } });   Setting credentials using environment variables (Powershell):  $env:ASKUI_WORKSPACE_ID = &lt;your workspace id&gt; $env:ASKUI_TOKEN = &lt;your access token&gt;   Setting credentials using environment variables (Bash or similar):  export ASKUI_WORKSPACE_ID=&lt;your workspace id&gt; export ASKUI_TOKEN=&lt;your access token&gt;    ","version":"0.11.6","tagName":"h3"},{"title":"askui UI Controller","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Configuration/askui-ui-controller","content":"","keywords":"","version":"0.11.6"},{"title":"Properties​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.11.6/api/Configuration/askui-ui-controller#properties","content":" ","version":"0.11.6","tagName":"h2"},{"title":"binaryVersion​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.11.6/api/Configuration/askui-ui-controller#binaryversion","content":" binaryVersion: string - Default: latest  There are different versions of the askui UI Controller. Not all versions are supported for all operating systems. You can specify which binary version of server you want to download and use. The default value is latest which will download the newest version.    ","version":"0.11.6","tagName":"h3"},{"title":"display​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.11.6/api/Configuration/askui-ui-controller#display","content":" display: number - Default: 0  You can choose on which display you want to excecute all tests. You can only perform all tests on one display. The application which you want to automate should be open and selected on your chosen display.  The default value of display is 0 which is your main monitor. If you want to use your second monitor you can change the value to 1 (2 for your third monitor etc.).  There is also a possibility to detect the value of your monitors. After the start of the askui UI Controller you should see an askui icon. After clicking on this icon you can choose the option Show. You will see the same window as the following image.    Now you can identify the order of your monitors and you can also select the monitor in this configuration.    ","version":"0.11.6","tagName":"h3"},{"title":"host​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.11.6/api/Configuration/askui-ui-controller#host","content":" host: string - Default: 127.0.0.1  The host the askui UI Controller is running on.  ","version":"0.11.6","tagName":"h3"},{"title":"logFilePath​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.11.6/api/Configuration/askui-ui-controller#logfilepath","content":" logFilePath: string - Default: &lt;temp-dir&gt;/askui/askui-server.log  It is possible to specify a path for your log files. Per default we create the askui-server.log file and askui folder in your temp folder.    ","version":"0.11.6","tagName":"h3"},{"title":"logLevel​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.11.6/api/Configuration/askui-ui-controller#loglevel","content":" logLevel: LogLevels - Default: debug  You can set the log level using the LogLevels. The following values are available: &quot;fatal&quot;, &quot;error&quot;, &quot;warn&quot;, &quot;info&quot;, &quot;debug&quot;, &quot;trace&quot;, &quot;silent&quot;, &quot;verbose&quot;. All log levels are defined in an LogLevels enum.    ","version":"0.11.6","tagName":"h3"},{"title":"minimize​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.11.6/api/Configuration/askui-ui-controller#minimize","content":" minimize: boolean - Default: true  The default value of this property is true. This means that askui UI Controller will be started as minimized window.    ","version":"0.11.6","tagName":"h3"},{"title":"overWriteBinary​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.11.6/api/Configuration/askui-ui-controller#overwritebinary","content":" overWriteBinary: boolean - Default: false  Download the provided Version of askui UI Controller. If a version is already downloaded. This version will be overwritten.    ","version":"0.11.6","tagName":"h3"},{"title":"port​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.11.6/api/Configuration/askui-ui-controller#port","content":" port: number - Default: 6769  The port the askui UI Controller is running on.    ","version":"0.11.6","tagName":"h3"},{"title":"actionDelayInMs​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.11.6/api/Configuration/askui-ui-controller#actiondelayinms","content":" actionDelayInMs: number - Default: 1000  actionDelayInMs is the time that the askui UI controller waits between actions. This can be used to slow down or speed up the execution.  Let's say, you want to click on the login button and then navigate to the home page by clicking on the home button but you have to wait 2s before clicking it because it takes some time logging in. You can increase the actionDelayInMs to 2000 in this case. But be careful, as it is going to slow down all your instructions. It may be better to use waitFor() between the two clicking actions.  ","version":"0.11.6","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.11.6/api/Configuration/askui-ui-controller#example","content":" import { UiControlClient, UiController, LogLevels } from 'askui'; describe('jest with askui', () =&gt; { // Server for controlling the operating system let uiController: UiController; beforeAll(async () =&gt; { uiController = new UiController({ // choosing the second monitor display: 1, // download the latest version of the server binaryVersion: 'latest', // start askui UI Controller as minimized application minimize: true, // using error loglevel logLevel: LogLevels.ERROR, // Set the action delay lower than the default actionDelayInMs: 500, }); }) })  ","version":"0.11.6","tagName":"h2"},{"title":"checkbox","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/checkbox","content":"checkbox production Filters for a UI element 'checkbox'. Example: await aui.moveMouseTo().checkbox().leftOf().text('Save the world').exec(); ","keywords":"","version":"0.11.6"},{"title":"containsText","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/containstext","content":"containsText production Filters for text containing the text provided as an argument. Examples: 'This is a text' === containsText('text') =&gt; true 'This is a text' === containsText('other text') =&gt; false 'This is a text' === containsText('other') =&gt; false @param {string} text - A text to be matched.","keywords":"","version":"0.11.6"},{"title":"container","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/container","content":"container production Filters for a UI element 'container'. Example: await aui.moveMouseTo().container().contains().text('typography').exec(); ","keywords":"","version":"0.11.6"},{"title":"customElement","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/customelement","content":"customElement production Filters for a 'custom element', that is a UI element which is defined by providing an image and other parameters such as degree of rotation. It allows filtering for a UI element that is not recognized by our machine learning models by default. It can also be used for pixel assertions of elements using classical template matching. See the tutorial - Custom Element for more detail. Example await aui .click() .customElement({ customImage: './logo.png', // required name: 'myLogo', // optional threshold: 0.9, // optional, defaults to 0.9 rotationDegreePerStep: 0, // optional, defaults to 0 imageCompareFormat: 'grayscale', // optional, defaults to 'grayscale' // mask:{x:0, y:0}[] // optional, a polygon to match only a certain area of the custom element }) .exec(); Arguments customImage (string, required): A cropped image in the form of a base64 string or file path. name (string, optional): A unique name that can be used for filtering for the custom element. If not given, any text inside the custom image will be detected via OCR. threshold (number, optional): A threshold for how much a UI element needs to be similar to the custom element as defined. Takes values between 0.0 (== all elements are recognized as the custom element which is probably not what you want) and 1.0 (== elements need to look exactly like the customImage which is unlikely to be achieved as even minor differences count). Defaults to 0.9. rotationDegreePerStep (number, optional): Step size in rotation degree. Rotates the custom image by this step size until 360° is exceeded. The range is from 0 to 360. Defaults to 0. imageCompareFormat ('RGB' | 'grayscale', optional): The color compare style. 'greyscale' compares the brightness of each pixel whereas 'RGB' compares all three color. Defaults to 'grayscale'. @param {CustomElementJson} customElement - The custom element to filter for.","keywords":"","version":"0.11.6"},{"title":"icon","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/icon","content":"icon production Filters for a UI element 'icon'. You can combine it with the element-description 'withText()' to look for a specific icon. Examples: await aui.click().icon().withText('camera').exec(); Note: This is an alpha feature. The prediction of the icon name is sometimes unstable. Use custom elements as an alternative.","keywords":"","version":"0.11.6"},{"title":"element","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/element","content":"element production Filters for any UI element on the screen. Since the element() itself doesn't describe any particular property of the element, in most cases, it must be used in combination with relational descriptions such as above(), below() or nearestTo() etc. Examples: await aui.moveMouseTo().element().below().text('Layers').exec(); ","keywords":"","version":"0.11.6"},{"title":"image","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/image","content":"image production Filters for a UI element 'image'. Examples: // Works if there is only one image visible on the screen await aui.click().image().exec(); // Works if you have an image with // a text below await aui.click().image().above().text('Automating WebGL').exec(); ","keywords":"","version":"0.11.6"},{"title":"otherElement","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/otherelement","content":"otherElement production Filters for a UI element 'other element'.","keywords":"","version":"0.11.6"},{"title":"matching","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/matching","content":"","keywords":"","version":"0.11.6"},{"title":"What Should I Write as Matching Text​","type":1,"pageTitle":"matching","url":"/docs/0.11.6/api/Element-Descriptions/matching#what-should-i-write-as-matching-text","content":" The text description inside the matching() should describe the element visually. It understands color, some famous company/product names, general descriptions.  It sometimes requires a bit of playing to find a matching description: E.g., puzzle piece can fail here while an icon showing a puzzle piece might work. Generally, the more detail the better.  Examples:  await aui.click().matching('a mask on purple background and a firefox logo').exec()   @param {string} text - A description of the target element. ","version":"0.11.6","tagName":"h2"},{"title":"switch","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/switch","content":"switch production Filters for a UI element 'switch'. Example: await aui.click().switch().rightOf() .text('Allow notification snoozing').exec(); ","keywords":"","version":"0.11.6"},{"title":"table","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/table","content":"table production Filters for a UI element 'table'.","keywords":"","version":"0.11.6"},{"title":"special","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/special","content":"special production Filters special elements defined over a specifically trained custom element descriptor. Custom element descriptors are trained on your elements that were not detected with our default models. Please contact us for further details on how to do this. We are working on a solution to provide this in our User Portal. In the example below circle refers to a circle shaped icon with specific properties. Examples: await aui.moveMouseTo().element().special(&quot;circle&quot;).exec() @param {string} text - A text to be matched.","keywords":"","version":"0.11.6"},{"title":"text","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/text","content":"text production Filters for an UI element 'text'. Takes an optional parameter to filter for a specific text. See the examples below. See also the filters withTextRegex() and withExactText() Examples: await aui.click().text().exec(); await aui.click().text('Username').exec(); // Matching with an exact text await aui.click().text().withExactText('Username').exec(); // Matching with a regex await aui.click().text().withTextRegex('\\b[Ss]\\w+').exec(); @param {string} [text] - A text to be matched.","keywords":"","version":"0.11.6"},{"title":"textfield","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/textfield","content":"textfield production Filters for a UI element 'textfield'. Examples: // Works if there is only one textfield visible on the screen await aui.typeIn('Oh yeah').textfield().exec(); // Works if you have a labeled textfield // Label is above the textfield await aui.typeIn('Oh yeah').textfield().below().text('E-Mail Address').exec(); ","keywords":"","version":"0.11.6"},{"title":"withExactText","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/withexacttext","content":"withExactText production Filters for equal text. Note: This should be only used in cases where the similarity comparison of {@link FluentFilters.withText()} allows not for a specific enough filtering (too many similar elements). Examples: 'text' === withExactText('text') =&gt; true 'test' === withExactText('text') =&gt; false 'other' === withExactText('text') =&gt; false await aui.moveMouseTo().text().withExactText('Basketball').exec() @param {string} text - A text to be matched.","keywords":"","version":"0.11.6"},{"title":"withText","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/withtext","content":"withText production Filters for similar (doesn't need to be a 100% equal) text. Examples: 'text' === withText('text') =&gt; true 'test' === withText('text') =&gt; true 'Test' === withText('text') =&gt; true 'Text' === withText('text') =&gt; true 'TEXT' === withText('text') =&gt; true 'texst' === withText('text') =&gt; true 'texts' === withText('text') =&gt; true // usually false 'atebxtc' === withText('text') =&gt; false 'other' === withText('text') =&gt; false @param {string} text - A text to be matched.","keywords":"","version":"0.11.6"},{"title":"withTextRegex","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Element-Descriptions/withtextregex","content":"withTextRegex production Filters for texts, which match the regex pattern. Examples: 'The rain in Spain' === withTextRegex('\\b[Ss]\\w+') =&gt; true 'The rain in Portugal' === withTextRegex('\\b[Ss]\\w+') =&gt; false 'The rain in switzerland' === withTextRegex('\\b[Ss]\\w+') =&gt; true // this filters any text that contains 'pie' or 'cake' or 'Pie' or 'Cake' await aui.get().text().withTextRegex('.*([Pp]ie|[Cc]ake).*').exec(); @param {string} regex_pattern - A regex pattern","keywords":"","version":"0.11.6"},{"title":"get","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Getters/get","content":"get production Returns an array with all filtered elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const text = await aui.get().text('Sign').exec(); console.log(text); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 } } ] ","keywords":"","version":"0.11.6"},{"title":"above","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Relations/above","content":"above production Filters for an element above another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text1 | -------------- -------------- | text0 | -------------- -------------- | button | -------------- // Returns text0 because text0 is the first element above button ...text().above().button() ...text().above(0).button() // Returns text1 because text1 is the second element above button ...text().above(1).button() // Returns no element because button is below text ...button().above().text() @param {number} [optionalIndex=0] - element index","keywords":"","version":"0.11.6"},{"title":"getAll","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Getters/getall","content":"getAll production Returns an array with all detected elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const detectedElements = await aui.getAll().exec(); console.log(detectedElements); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 250.8204241071428, ymin: 300.21332310267857, xmax: 450.6304241071428, ymax: 950.47812834821428 }, ... 381 more items } ] ","keywords":"","version":"0.11.6"},{"title":"and","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Relations/and","content":"and production Logic and operator Examples: example scene: --------------- ---------------- | icon user | | icon search | --------------- ---------------- const icons = await aui.get().icon().exec(); console.log(icons); Using only the element-description icon, the get will return both icons console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 1000, ymin: 1010, xmax: 1020, ymax: 1030 } }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] You can combine element-descriptions with the and() relation and specify exactly which icon you want. const icons = await aui.get().icon().and().withText('user').exec() console.log(icons) The get returns only the user icon although both elements are icons. console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] ","keywords":"","version":"0.11.6"},{"title":"below","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Relations/below","content":"below production Filters for an element below another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text | -------------- -------------- | button0 | -------------- -------------- | button1 | -------------- // Returns button0 because button0 is the first button below text ...button().below().text() ...button().below(0).text() // Returns button1 because button1 is the second button below text ...button().below(1).text() // Returns no element because text is above button ...text().below().button() @param {number} [optionalIndex=0] - element index","keywords":"","version":"0.11.6"},{"title":"in","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Relations/in","content":"in production Filters for an element inside another element. Examples: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns innerEl because innerEl is inside outerEl ...innerEl().in().outerEl() // Returns nothing because innerEl is not inside outerEl ...outerEl().in().innerEl() ","keywords":"","version":"0.11.6"},{"title":"leftOf","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Relations/leftof","content":"leftOf production Filters for an element left of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl1 | | leftEl0 | | rightEl | -------------- -------------- -------------- // Returns leftEl0 because leftEl0 is the first element left of rightEl ...leftEl().leftOf().rightEl() ...leftEl().leftOf(0).rightEl() // Returns leftEl1 because leftEl1 is the second element left of rightEl ...leftEl().leftOf(1).rightEl() // Returns no element because rightEl is left of leftEl ...rightEl().leftOf().leftEl() @param {number} [optionalIndex=0] - element index","keywords":"","version":"0.11.6"},{"title":"contains","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Relations/contains","content":"contains production Filters for an element containing another element. Example: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns outerEl because outerEl contains innerEl ...outerEl().contains().innerEl() // Returns no element because innerEl contains no outerEl ...innerEl().contains().outerEl() ","keywords":"","version":"0.11.6"},{"title":"or","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Relations/or","content":"or production Logic or operator Examples: scene 1 -------------- --------------- | button | | icon | -------------- --------------- scene 2 -------------- --------------- | button | | text | -------------- --------------- In case, that your reference element can have multiple values, in the following example, the element right of the button can be either icon or text. You can use the or() relation, so your instruction is valid for both scenes const button = await aui.get().button().rightOf().icon().or().text().exec(); console.log(button); Returns the same button for both cases console output: [ DetectedElement { name: 'BUTTON', text: 'button', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] ","keywords":"","version":"0.11.6"},{"title":"nearestTo","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Relations/nearestto","content":"nearestTo production Filters for an element nearest to another element. Examples: -------------- | button 1 | -------------- -------------- | text | -------------- -------------- | button 2 | -------------- // Returns button 1 because button 1 is nearer to the text than button 2 ...button().nearestTo().text() ","keywords":"","version":"0.11.6"},{"title":"rightOf","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Relations/rightof","content":"rightOf production Filters for an element right of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl | | rightEl0 | | rightEl1 | -------------- -------------- -------------- // Returns rightEl0 because rightEl0 is the first element right of leftEl ...rightEl().rightOf().leftEl() ...rightEl().rightOf(0).leftEl() // Returns rightEl1 because rightEl1 is the second element right of leftEl ...rightEl().rightOf(1).leftEl() // Returns no element because leftEl is left of rightEl ...leftEl().rightOf().rightEl() @param {number} [optionalIndex=0] - element index","keywords":"","version":"0.11.6"},{"title":"Table of Contents","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/API/table-of-contents","content":"","keywords":"","version":"0.11.6"},{"title":"Actions​","type":1,"pageTitle":"Table of Contents","url":"/docs/0.11.6/api/API/table-of-contents#actions","content":" Nameclick() production Mouse left-clicks/taps on the filtered element by moving the mouse cursor to the filtered element first. If you need a simple mouseleftclick/tap only, use mouseLeftClick. Example: await aui.click().button().withText('Submit').exec() execOnShell() production Executes a shell command on the device your UiController is connected to. Example: // Open the lastpass app await aui.execOnShell('monkey -p com.lastpass.authenticator 1').exec(); // Open Google Chrome on Windows await aui.execOnShell(&quot;start chrome&quot;).exec() ;// Open Google Chrome on macOS await aui.execOnShell(&quot;open -a 'Google Chrome'&quot;).exec(); // Open Google Chrome on Linux await aui.execOnShell(&quot;chrome&quot;).exec(); @param {string} shell_command - A shell command which is executed. expect() production Expects a condition, e.g., exists() or notExits(). Use the structure expect().&lt;your filter&gt;.(exists()|notExists()) as shown in the examples below. Examples: await aui.expect().text('Login').exists().exec() await aui.expect().text('Login').notExists().exec() mouseDoubleLeftClick() production Double-clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleLeftClick().exec(); mouseDoubleMiddleClick() production Double-clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleMiddleClick().exec(); mouseDoubleRightClick() production Double-clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleRightClick().exec(); mouseLeftClick() production Clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseLeftClick().exec(); mouseMiddleClick() production Clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseMiddleClick().exec(); mouseRightClick() production Clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseRightClick().exec(); mouseToggleDown() production Toggles mouse down (Left mouse key/tap). Example: await aui.mouseToggleDown().exec(); mouseToggleUp() production Toggles mouse up (Left mouse key/tap). Example: await aui.mouseToggleUp().exec(); moveMouse() production Moves the mouse to the absolute x and y coordinates. If you want to move your mouse cursor to an element, use moveMouseTo(). Example: await aui.moveMouse(500, 500).exec(); @param {number} x_coordinate - A (positive/negative) x coordinate.@param {number} y_coordinate - A (positive/negative) y coordinate. moveMouseRelatively() production Moves the mouse from the current position (relative) in x and y direction. Example: await aui.moveMouseRelatively(20, 20).exec(); @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. moveMouseRelativelyTo() production Moves the mouse relatively to an element in the direction. This can be used when the mouse should not hover over an element anymore. Examples: // Move mouse 30 pixels below button await aui.moveMouseRelativelyTo(0, 30).button().withText('Submit').exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. moveMouseTo() production Move mouse over the filtered element. Example: await aui.moveMouseTo().button().withText('Submit').exec() pressAndroidKey() production Press one Android key like DEL @param {ANDROID_KEY} key - A Android key pressAndroidThirdKey() production Press three Android keys like CTRL+ALT+DEL @param {ANDROID_KEY} first_key - A Android key@param {ANDROID_KEY} second_key - A Android key@param {ANDROID_KEY} third_key - A Android key pressAndroidTwoKey() production Press two Android keys like ALT+F4 @param {ANDROID_KEY} first_key - A Android key@param {ANDROID_KEY} second_key - A Android key pressKey() production Press one keys like DEL Operating system specific mappings: Windows: command-key maps to windows-key @param {PC_AND_MODIFIER_KEY} key - A key pressThreeKeys() production Press three keys like CTRL+ALT+DEL Operating system specific mappings: Windows: command-key maps to windows-key @param {MODIFIER_KEY} first_key - A modifier key@param {MODIFIER_KEY} second_key - A modifier key@param {PC_KEY} third_key - A key pressTwoKeys() production Press two keys like ALT+F4 Operating system specific mappings: Windows: command-key maps to windows-key @param {MODIFIER_KEY} first_key - A modifier key@param {PC_KEY} second_key - A key scroll() production Scrolls based on the current mouse position in the x and y direction. Important: Mouse must be positioned in a scrollable area. macOS: May not work as expected! Example: // Scroll 10 up in y direction await aui.scroll(0, 10).exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. scrollInside() production Moves mouse to the filtered element and scrolls in the x and y direction. macOS: May not work as expected! Example: await aui.scroll(0, 10).textarea().exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. swipe() production Swipe an element in the x and y direction. Holds the left mouse button down on Windows, Linux and macOS and drags the element. On touch devices it taps the element and then drags it. Example: // Swipe the element 500 to the right await aui.swipe(500, 0).image().exec() @param {number} x_offset - A x direction. positive and negative values are accepted@param {number} y_offset - A y direction. positive and negative values are accepted type() production Types a text at the current position. If you need to focus the element first, use typeIn() Note: In the current version it copies the text and pastes it. Examples: await aui.type('Type some text').exec() // mask the text so it is not send to the askui-inference server await aui.type('Type some text', { isSecret: true, secretMask: '**' }).exec() @param {string} text - A text to type typeIn() production Puts the focus on the filtered element and types in the text. Note: In the current version it copies the text and pastes it. Examples: await aui.typeIn('Type some text').textfield().exec() // mask the text so it is not send to the askui-inference server await aui.typeIn('Type some text', { isSecret: true, secretMask: '**' }).textfield().exec() @param {string} text - A text to type  ","version":"0.11.6","tagName":"h2"},{"title":"Element-descriptions​","type":1,"pageTitle":"Table of Contents","url":"/docs/0.11.6/api/API/table-of-contents#element-descriptions","content":" Namebutton() production Filters for a UI element 'button'. Examples: await aui.moveMouseTo().button().exec() checkbox() production Filters for a UI element 'checkbox'. container() production Filters for a UI element 'container'. containsText() production Filters for text containing the text provided as an argument. Examples: 'This is a text' === containsText('text') =&gt; true 'This is a text' === containsText('other text') =&gt; false 'This is a text' === containsText('other') =&gt; false @param {string} text - A text to be matched. customElement() production Filters for a 'custom element', that is a UI element which is defined by providing an image and other parameters such as degree of rotation. It allows filtering for a UI element that is not recognized by our machine learning models by default. It can also be used for pixel assertions of elements using classical template matching. Example await aui .click() .customElement({ customImage: './logo.png', // required name: 'myLogo', // optional threshold: 0.9, // optional, defaults to 0.9 rotationDegreePerStep: 0, // optional, defaults to 0 imageCompareFormat: 'grayscale', // optional, defaults to 'grayscale' // mask:{x:0, y:0}[] // optional, a polygon to match only a certain area of the custom element }) .exec(); Arguments customImage (string, required): A cropped image in the form of a base64 string or file path. name (string, optional): A unique name that can be used for filtering for the custom element. If not given, any text inside the custom image will be detected via OCR. threshold (number, optional): A threshold for how much a UI element needs to be similar to the custom element as defined. Takes values between 0.0 (== all elements are recognized as the custom element which is probably not what you want) and 1.0 (== elements need to look exactly like the customImage which is unlikely to be achieved as even minor differences count). Defaults to 0.9. rotationDegreePerStep (number, optional): Step size in rotation degree. Rotates the custom image by this step size until 360° is exceeded. The range is from 0 to 360. Defaults to 0. imageCompareFormat ('RGB' | 'grayscale', optional): The color compare style. 'greyscale' compares the brightness of each pixel whereas 'RGB' compares all three color. Defaults to 'grayscale'. of the given custom image. @param {CustomElementJson} customElement - The custom element to filter for. element() production Filters for any UI element on the screen. Examples: await aui.moveMouseTo().element().exec() icon() production Filters for a UI element 'icon'. You can combine it with the element-description 'withText()' to look for a specific icon. Examples: icon().withText('plus') Note: This is an alpha feature. The prediction of the icon name is sometimes unstable. Use custom elements as an alternative. image() production Filters for a UI element 'image'. Examples: // Works if there is only one image visible on the screen await aui.click().image().exec(); // Works if you have an image with // a caption text below await aui.click().image().above().text('The caption').exec(); matching() experimental Filters elements based on a textual description. What Should I Write as Matching Text​ The text description inside the matching() should describe the element visually. It understands color, some famous company/product names, general descriptions. It sometimes requires a bit of playing to find a matching description: E.g., puzzle piece can fail here while an icon showing a puzzle piece might work. Generally, the more detail the better. Examples: await aui.click().matching('a mask on purple background and a firefox logo').exec() @param {string} text - A description of the target element. otherElement() production Filters for a UI element 'other element'. special() production Filters special elements defined over a specifically trained custom element descriptor. Custom element descriptors are trained on your elements that were not detected with our default models. Please contact us for further details on how to do this. We are working on a solution to provide this in our User Portal. In the example below circle refers to a circle shaped icon with specific properties. Examples: await aui.moveMouseTo().element().special(&quot;circle&quot;).exec() @param {string} text - A text to be matched. switch() production Filters for a UI element 'switch'. table() production Filters for a UI element 'table'. text() production Filters for an UI element 'text'. Takes an optional parameter to filter for a specific text. See the examples below. See also the filters withTextRegex() and withExactText() Examples: await aui.click().text().exec(); await aui.click().text('Username').exec(); await aui.click().text().withTextRegex('\\b[Ss]\\w+').exec(); @param {string} [text] - A text to be matched. textfield() production Filters for a UI element 'textfield'. Examples: // Works if there is only one textfield visible on the screen await aui.typeIn('Oh yeah').textfield().exec(); // Works if you have a labeled textfield // Label is above the textfield await aui.typeIn('Oh yeah').textfield().below().text('E-Mail Address').exec(); withExactText() production Filters for equal text. Note: This should be only used in cases where the similarity comparison of {@link FluentFilters.withText()} allows not for specific enough filtering (too many elements). Examples: 'text' === withExactText('text') =&gt; true 'test' === withExactText('text') =&gt; false 'other' === withExactText('text') =&gt; false await aui.moveMouseTo().text().withExactText('Password').exec() @param {string} text - A text to be matched. withText() production Filters for similar (doesn't need to be a 100% equal) text. Examples: 'text' === withText('text') =&gt; true 'test' === withText('text') =&gt; true 'Test' === withText('text') =&gt; true 'Text' === withText('text') =&gt; true 'TEXT' === withText('text') =&gt; true 'texst' === withText('text') =&gt; true 'texts' === withText('text') =&gt; true // usually false 'atebxtc' === withText('text') =&gt; false 'other' === withText('text') =&gt; false @param {string} text - A text to be matched. withTextRegex() production Filters for texts, which match the regex pattern. Examples: 'The rain in Spain' === withTextRegex('\\b[Ss]\\w+') =&gt; true 'The rain in Portugal' === withTextRegex('\\b[Ss]\\w+') =&gt; false 'The rain in switzerland' === withTextRegex('\\b[Ss]\\w+') =&gt; true await aui.get().text().withTextRegex('\\b[Ss]\\w+').exec() @param {string} regex_pattern - A regex pattern  ","version":"0.11.6","tagName":"h2"},{"title":"Relations​","type":1,"pageTitle":"Table of Contents","url":"/docs/0.11.6/api/API/table-of-contents#relations","content":" Nameabove() production Filters for an element above another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text1 | -------------- -------------- | text0 | -------------- -------------- | button | -------------- // Returns text0 because text0 is the first element above button ...text().above().button() ...text().above(0).button() // Returns text1 because text1 is the second element above button ...text().above(1).button() // Returns no element because button is below text ...button().above().text() @param {number} [optionalIndex=0] - element index and() production Logic and operator Examples: example scene: --------------- ---------------- | icon user | | icon search | --------------- ---------------- const icons = await aui.get().icon().exec(); console.log(icons); Using only the element-description icon, the get will return both icons console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 1000, ymin: 1010, xmax: 1020, ymax: 1030 } }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] You can combine element-descriptions with the and() relation and specify exactly which icon you want. const icons = await aui.get().icon().and().withText('user').exec() console.log(icons) The get returns only the user icon although both elements are icons. console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] below() production Filters for an element below another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text | -------------- -------------- | button0 | -------------- -------------- | button1 | -------------- // Returns button0 because button0 is the first button below text ...button().below().text() ...button().below(0).text() // Returns button1 because button1 is the second button below text ...button().below(1).text() // Returns no element because text is above button ...text().below().button() @param {number} [optionalIndex=0] - element index contains() production Filters for an element containing another element. Example: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns outerEl because outerEl contains innerEl ...outerEl().contains().innerEl() // Returns no element because innerEl contains no outerEl ...innerEl().contains().outerEl() in() production Filters for an element inside another element. Examples: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns innerEl because innerEl is inside outerEl ...innerEl().in().outerEl() // Returns nothing because innerEl is not inside outerEl ...outerEl().in().innerEl() leftOf() production Filters for an element left of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl1 | | leftEl0 | | rightEl | -------------- -------------- -------------- // Returns leftEl0 because leftEl0 is the first element left of rightEl ...leftEl().leftOf().rightEl() ...leftEl().leftOf(0).rightEl() // Returns leftEl1 because leftEl1 is the second element left of rightEl ...leftEl().leftOf(1).rightEl() // Returns no element because rightEl is left of leftEl ...rightEl().leftOf().leftEl() @param {number} [optionalIndex=0] - element index nearestTo() production Filters for an element nearest to another element. Examples: -------------- | button 1 | -------------- -------------- | text | -------------- -------------- | button 2 | -------------- // Returns button 1 because button 1 is nearer to the text than button 2 ...button().nearestTo().text() or() production Logic or operator Examples: scene 1 -------------- --------------- | button | | icon | -------------- --------------- scene 2 -------------- --------------- | button | | text | -------------- --------------- In case, that your reference element can have multiple values, in the following example, the element right of the button can be either icon or text. You can use the or() relation, so your instruction is valid for both scenes const button = await aui.get().button().rightOf().icon().or().text().exec(); console.log(button); Returns the same button for both cases console output: [ DetectedElement { name: 'BUTTON', text: 'button', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] rightOf() production Filters for an element right of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl | | rightEl0 | | rightEl1 | -------------- -------------- -------------- // Returns rightEl0 because rightEl0 is the first element right of leftEl ...rightEl().rightOf().leftEl() ...rightEl().rightOf(0).leftEl() // Returns rightEl1 because rightEl1 is the second element right of leftEl ...rightEl().rightOf(1).leftEl() // Returns no element because leftEl is left of rightEl ...leftEl().rightOf().rightEl() @param {number} [optionalIndex=0] - element index  ","version":"0.11.6","tagName":"h2"},{"title":"Checks​","type":1,"pageTitle":"Table of Contents","url":"/docs/0.11.6/api/API/table-of-contents#checks","content":" Nameexists() production Expects that filtered element exists. Always use together with expect(). Note Throws an error and stops the execution when the element is not found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does not exist. await aui.expect().text('Login').exists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').exists().exec() } catch (error) { console.log('Too bad we could not find the element!'); } notExists() production Expects that filtered element not exists. Always use together with expect(). Note Throws an error and stops the execution when the element is found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does exist. await aui.expect().text('Login').notExists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').notExists().exec() } catch (error) { console.log('Too bad we could find the element!'); }   ","version":"0.11.6","tagName":"h2"},{"title":"Getters​","type":1,"pageTitle":"Table of Contents","url":"/docs/0.11.6/api/API/table-of-contents#getters","content":" Nameget() production Returns an array with all filtered elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const text = await aui.get().text('Sign').exec(); console.log(text); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 } } ] getAll() production Returns an array with all detected elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const detectedElements = await aui.getAll().exec(); console.log(detectedElements); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 250.8204241071428, ymin: 300.21332310267857, xmax: 450.6304241071428, ymax: 950.47812834821428 }, ... 381 more items } ]  ","version":"0.11.6","tagName":"h2"},{"title":"Annotations, Screenshots and Videos","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Element Selection/annotations-and-screenshots","content":"","keywords":"","version":"0.11.6"},{"title":"Interactive Annotation​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/0.11.6/general/Element Selection/annotations-and-screenshots#interactive-annotation","content":" info Windows Users Please use annotate() as explained in the section below. The interactive annotation aui.annotateInteractively() currently leads to an error on Windows.  An interactive annotation is in essence three components:  A screenshot of whatever the AskUI controller is told to see, as defined in the config file:    Annotations, marked by the red boxes you see, which are added by the machine learning model.    Element-Descriptions, which are labels applied to the annotations of the screenshot.  Clicking an element will copy this element-description, which we can then use in the step 3 of Write Your First Instruction, which is actually using that run instructions.    ","version":"0.11.6","tagName":"h2"},{"title":"Static Annotation​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/0.11.6/general/Element Selection/annotations-and-screenshots#static-annotation","content":" The helper function annotate() creates an annotated HTML file of the given image and saves it into the given path. If no image is given, then it captures the specified screen and annotates the captured image.  Synopsis and Arguments Synopsis UiControlClient.annotate(); // or UiControlClient.annotate({ imagePath: '&lt;your-image-path&gt;', outputPath: '&lt;path-of-the-generated-html&gt;', fileNamePrefix: '&lt;prefix-of-the-output-file&gt;', customElements: CustomElementJson[] // more details in the example below }); Arguments If no argument is given, A screenshot of your specified screen will be taken, and annotated. Thereafter, it will be saved as an interactive HTML file into the report/ folder. imagePath: If defined, the image at the path is loaded and annotated.If not defined, a screenshot of your specified screen is taken and annotated. outputPath: If defined, the generated HTML report will be saved in this path.If not defined, a folder report/ will be created in the project root. fileNamePrefix: The prefix for the resulting HTML report. customElements: A list of custom elements. The AI model will use them to detect elements similar to them.  Example  /* Takes a screenshot of your selected display, and produces an HTML report file inside the default output path &lt;project_root&gt;/report. */ await aui.annotate(); /* Loads the image 'my-screenshot.png' and produces an HTML report file inside the output path 'annotation-reports/' */ await aui.annotate( { imagePath: 'my-screenshot.png', outputPath: 'annotation-reports/' }); /* Loads the image 'my-screenshot.png' together with the custom elements and produces an HTML report file inside the output path 'annotation-reports/' */ await aui.annotate( { imagePath: 'my-screenshot.png', outputPath: 'annotaion-reports/', customElements: [ { customImage: '&lt;custom_image_path|base64Image&gt;', imageCompareFormat: 'grayscale', name: 'custom element 1' }, { /* for this custom element the OCR AI model will be used to extract text from the image, since no name was given. */ customImage: '&lt;custom_image2_path|base64Image&gt;', imageCompareFormat: 'RGB', } ] });   ","version":"0.11.6","tagName":"h2"},{"title":"Taking Screenshots​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/0.11.6/general/Element Selection/annotations-and-screenshots#taking-screenshots","content":" If you want to see what AskUI sees at a specific point in the execution you can use TypeScript to create a screenshot. Here is a code-snippet you can copy and paste into your code that saves an image with the name screenshot.png to the root-folder of your project.  info Do not forget the import mentioned at the start of the snippet!  // Add this to the start of your AskUI-file containing your workflows/instructions import * as fs from 'fs'; // First, get all the information from the annotation // This will also save an interactive HTML file to the 'report/' folder const annotation = await aui.annotate(); // The screenshot is contained as a string in 'base64' format // Create a buffer with the base64 image let buf = Buffer.from(annotation.image.split('base64,')[1], 'base64'); // Write the file fs.writeFileSync(&quot;./test.png&quot;, buf);   ","version":"0.11.6","tagName":"h2"},{"title":"Recording Videos​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/0.11.6/general/Element Selection/annotations-and-screenshots#recording-videos","content":" caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly. ","version":"0.11.6","tagName":"h2"},{"title":"Assertions","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Element Selection/assertions","content":"","keywords":"","version":"0.11.6"},{"title":"Assert the (non) Existence of Elements​","type":1,"pageTitle":"Assertions","url":"/docs/0.11.6/general/Element Selection/assertions#assert-the-non-existence-of-elements","content":" To validate if an element exists or not we use expect() in combination with exists() or notExists.  // Expect that a button with text 'Go for it' exists await aui.expect().text('Login').exists().exec(); // Expect that a text 'Do not go for it' not exists await aui.expect().text('Login').notExists().exec();   ","version":"0.11.6","tagName":"h2"},{"title":"Assert the Correctness of Values​","type":1,"pageTitle":"Assertions","url":"/docs/0.11.6/general/Element Selection/assertions#assert-the-correctness-of-values","content":" Let's say you want to check if your automation actually wrote something into a textfield. You can do two things:  ","version":"0.11.6","tagName":"h2"},{"title":"1. Use expect() to check if the text in the textfield matches​","type":1,"pageTitle":"Assertions","url":"/docs/0.11.6/general/Element Selection/assertions#1-use-expect-to-check-if-the-text-in-the-textfield-matches","content":" This technique is useful if the text you entered is unique on the screen.  // Type something into a textfield await aui.typeIn(&quot;Please find me&quot;).textfield().contains().text(&quot;Enter email&quot;).exec(); // Assert if the textfield contains the value await aui.expect().textfield().contains().text('Please find me').exists().exec();   ","version":"0.11.6","tagName":"h3"},{"title":"2. Retrieve the element with get() and use an assertions library​","type":1,"pageTitle":"Assertions","url":"/docs/0.11.6/general/Element Selection/assertions#2-retrieve-the-element-with-get-and-use-an-assertions-library","content":" If your value is not unique on your screen you can retrieve the element with get() and a different selector. For example with a relational selector like below(). With an assertion library you can assert if the value is correct.  Jest comes with assertions. You only have to import them into your AskUI-file.  info Do not forget the import mentioned at the start of the snippet!  // Add this to the start of your AskUI-file containing your workflows/instructions import {expect, jest, test} from '@jest/globals'; // Type something into a textfield await aui.typeIn(&quot;Please find me&quot;).textfield().contains().text(&quot;Enter email&quot;).exec(); // You have to retrieve the text you wrote inside the textfield here // If you retrieve the textfield it does not contain the text inside of it const textfield = await aui.get().text().below().text(&quot;User email&quot;).exec(); // below() returns an array. We want the first element of that array! expect(textfield[0].text).toBe(&quot;Please find me&quot;);  ","version":"0.11.6","tagName":"h3"},{"title":"Automation Recorder","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Element Selection/automation-recorder","content":"Automation Recorder caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.11.6"},{"title":"Supported Keys","type":0,"sectionRef":"#","url":"/docs/0.11.6/api/Supported-Keys","content":"Supported Keys Scroll the table to the right if the table is not shown completely 🙃. Names\tDescription\tPress\tRelease\tGroupalt\tALT key\tspecial case\tspecial case\t🪄 Modifier capslock\tCAPS LOCK key\tspecial case\tspecial case\t🪄 Modifier command\tRight Windows key (Natural keyboard)\tspecial case\tspecial case\t🪄 Modifier command\tLeft Windows key (Natural keyboard)\tspecial case\tspecial case\t🪄 Modifier control\tCTRL key\tspecial case\tspecial case\t🪄 Modifier left_control\tLeft CONTROL key\tspecial case\tspecial case\t🪄 Modifier numpad_lock\tNUM LOCK key\tspecial case\tspecial case\t🪄 Modifier right_alt\tRight ALT key\tspecial case\tspecial case\t🪄 Modifier right_control\tRight CONTROL key\tspecial case\tspecial case\t🪄 Modifier right_shift\tRight SHIFT key\tspecial case\tspecial case\t🪄 Modifier shift\tSHIFT key\tspecial case\tspecial case\t🪄 Modifier Left ALT key\tspecial case\tspecial case\t🪄 Modifier Left SHIFT key\tspecial case\tspecial case\t🪄 Modifier 0\t0 key\tworks\tworks\t🔠 Alphanumeric 1\t1 key\tworks\tworks\t🔠 Alphanumeric 2\t2 key\tworks\tworks\t🔠 Alphanumeric 3\t3 key\tworks\tworks\t🔠 Alphanumeric 4\t4 key\tworks\tworks\t🔠 Alphanumeric 5\t5 key\tworks\tworks\t🔠 Alphanumeric 6\t6 key\tworks\tworks\t🔠 Alphanumeric 7\t7 key\tworks\tworks\t🔠 Alphanumeric 8\t8 key\tworks\tworks\t🔠 Alphanumeric 9\t9 key\tworks\tworks\t🔠 Alphanumeric a\tA key\tworks\tworks\t🔠 Alphanumeric b\tB key\tworks\tworks\t🔠 Alphanumeric c\tC key\tworks\tworks\t🔠 Alphanumeric d\tD key\tworks\tworks\t🔠 Alphanumeric e\tE key\tworks\tworks\t🔠 Alphanumeric f\tF key\tworks\tworks\t🔠 Alphanumeric g\tG key\tworks\tworks\t🔠 Alphanumeric h\tH key\tworks\tworks\t🔠 Alphanumeric i\tI key\tworks\tworks\t🔠 Alphanumeric j\tJ key\tworks\tworks\t🔠 Alphanumeric k\tK key\tworks\tworks\t🔠 Alphanumeric l\tL key\tworks\tworks\t🔠 Alphanumeric m\tM key\tworks\tworks\t🔠 Alphanumeric n\tN key\tworks\tworks\t🔠 Alphanumeric o\tO key\tworks\tworks\t🔠 Alphanumeric p\tP key\tworks\tworks\t🔠 Alphanumeric q\tQ key\tworks\tworks\t🔠 Alphanumeric r\tR key\tworks\tworks\t🔠 Alphanumeric s\tS key\tworks\tworks\t🔠 Alphanumeric t\tT key\tworks\tworks\t🔠 Alphanumeric u\tU key\tworks\tworks\t🔠 Alphanumeric v\tV key\tworks\tworks\t🔠 Alphanumeric w\tW key\tworks\tworks\t🔠 Alphanumeric x\tX key\tworks\tworks\t🔠 Alphanumeric y\tY key\tworks\tworks\t🔠 Alphanumeric z\tZ key\tworks\tworks\t🔠 Alphanumeric backspace\tBACKSPACE key\tworks\tworks\t⚙️ Controls delete\tDEL key\tworks\tworks\t⚙️ Controls enter\tENTER key\tworks\tworks\t⚙️ Controls escape\tESC key\tworks\tworks\t⚙️ Controls space\tSPACEBAR key\tworks\tworks\t⚙️ Controls tab\tTAB key\tworks\tworks\t⚙️ Controls &quot;The &lt; &gt; keys on the US standard keyboard, or the \\\\| key on the non-US 102-key keyboard&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols Used for miscellaneous characters; it can vary by keyboard.\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the 'single-quote/double-quote' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the ']}' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '\\|' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '[' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '`~' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '/?' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;For any country/region, the '.' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;For any country/region, the '-' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;For any country/region, the ',' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;For any country/region, the '+' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the ';:' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols down\tDOWN ARROW key\tbroken\tbroken\t➡️ Arrows left\tLEFT ARROW key\tworks\tworks\t➡️ Arrows right\tRIGHT ARROW key\tworks\tworks\t➡️ Arrows up\tUP ARROW key\tworks\tworks\t➡️ Arrows f1\tF1 key\tworks\tworks\t⚡️ Function keys f10\tF10 key\tbroken\tbroken\t⚡️ Function keys f11\tF11 key\tworks\tworks\t⚡️ Function keys f12\tF12 key\tworks\tworks\t⚡️ Function keys f13\tF13 key\tworks\tworks\t⚡️ Function keys f14\tF14 key\tworks\tworks\t⚡️ Function keys f15\tF15 key\tworks\tworks\t⚡️ Function keys f16\tF16 key\tworks\tworks\t⚡️ Function keys f17\tF17 key\tworks\tworks\t⚡️ Function keys f18\tF18 key\tworks\tworks\t⚡️ Function keys f19\tF19 key\tworks\tworks\t⚡️ Function keys f2\tF2 key\tworks\tworks\t⚡️ Function keys f20\tF20 key\tworks\tworks\t⚡️ Function keys f21\tF21 key\tworks\tworks\t⚡️ Function keys f22\tF22 key\tworks\tworks\t⚡️ Function keys f23\tF23 key\tworks\tworks\t⚡️ Function keys f24\tF24 key\tworks\tworks\t⚡️ Function keys f3\tF3 key\tworks\tworks\t⚡️ Function keys f4\tF4 key\tworks\tworks\t⚡️ Function keys f5\tF5 key\tworks\tworks\t⚡️ Function keys f6\tF6 key\tworks\tworks\t⚡️ Function keys f7\tF7 key\tworks\tworks\t⚡️ Function keys f8\tF8 key\tworks\tworks\t⚡️ Function keys f9\tF9 key\tworks\tworks\t⚡️ Function keys audio_forward Unsupported\tUnsupported\t⏯️ Media controls audio_mute\tVolume Mute key\tworks\tworks\t⏯️ Media controls audio_next\tNext Track key\tworks\tworks\t⏯️ Media controls audio_pause Unsupported\tUnsupported\t⏯️ Media controls audio_play\tPlay/Pause Media key\tbroken\tbroken\t⏯️ Media controls audio_prev\tPrevious Track key\tworks\tworks\t⏯️ Media controls audio_random Unsupported\tUnsupported\t⏯️ Media controls audio_repeat Unsupported\tUnsupported\t⏯️ Media controls audio_rewind Unsupported\tUnsupported\t⏯️ Media controls audio_stop\tStop Media key\tworks\tworks\t⏯️ Media controls audio_vol_down\tVolume Down key\tworks\tworks\t⏯️ Media controls audio_vol_up\tVolume Up key\tworks\tworks\t⏯️ Media controls Play key\tUnsupported\tUnsupported\t⏯️ Media controls Select Media key\tUnsupported\tUnsupported\t⏯️ Media controls PAUSE key\tUnsupported\tUnsupported\t⏯️ Media controls numpad_*\tMultiply key\tworks\tworks\t🔢 Keypad keys numpad_+\tAdd key\tworks\tworks\t🔢 Keypad keys numpad_-\tSubtract key\tworks\tworks\t🔢 Keypad keys numpad_.\tDecimal key\tworks\tworks\t🔢 Keypad keys numpad_/\tDivide key\tbroken\tbroken\t🔢 Keypad keys numpad_0\tNumeric keypad 0 key\tworks\tworks\t🔢 Keypad keys numpad_1\tNumeric keypad 1 key\tworks\tworks\t🔢 Keypad keys numpad_2\tNumeric keypad 2 key\tworks\tworks\t🔢 Keypad keys numpad_3\tNumeric keypad 3 key\tworks\tworks\t🔢 Keypad keys numpad_4\tNumeric keypad 4 key\tworks\tworks\t🔢 Keypad keys numpad_5\tNumeric keypad 5 key\tbroken\tbroken\t🔢 Keypad keys numpad_6\tNumeric keypad 6 key\tworks\tworks\t🔢 Keypad keys numpad_7\tNumeric keypad 7 key\tworks\tworks\t🔢 Keypad keys numpad_8\tNumeric keypad 8 key\tworks\tworks\t🔢 Keypad keys numpad_9\tNumeric keypad 9 key\tworks\tworks\t🔢 Keypad keys IME PROCESS key\tUnsupported\tUnsupported\t🈯️ International IME mode change request\tUnsupported\tUnsupported\t🈯️ International IME accept\tUnsupported\tUnsupported\t🈯️ International IME nonconvert\tUnsupported\tUnsupported\t🈯️ International IME convert\tUnsupported\tUnsupported\t🈯️ International IME Off\tUnsupported\tUnsupported\t🈯️ International IME Kanji mode\tUnsupported\tUnsupported\t🈯️ International IME Hanja mode\tUnsupported\tUnsupported\t🈯️ International IME final mode\tUnsupported\tUnsupported\t🈯️ International IME Junja mode\tUnsupported\tUnsupported\t🈯️ International IME On\tUnsupported\tUnsupported\t🈯️ International IME Hangul mode\tUnsupported\tUnsupported\t🈯️ International IME Hanguel mode (maintained for compatibility; use VK_HANGUL)\tUnsupported\tUnsupported\t🈯️ International IME Kana mode\tUnsupported\tUnsupported\t🈯️ International X2 mouse button\tUnsupported\tUnsupported\t🖱️Mouse X1 mouse button\tUnsupported\tUnsupported\t🖱️Mouse Middle mouse button (three-button mouse)\tUnsupported\tUnsupported\t🖱️Mouse Left mouse button\tUnsupported\tUnsupported\t🖱️Mouse Right mouse button\tUnsupported\tUnsupported\t🖱️Mouse end\tEND key\tworks\tworks\t🦄 Special purpose home\tHOME key\tworks\tworks\t🦄 Special purpose insert\tINS key\tworks\tworks\t🦄 Special purpose lights_kbd_down Unsupported\tUnsupported\t🦄 Special purpose lights_kbd_toggle Unsupported\tUnsupported\t🦄 Special purpose lights_kbd_up Unsupported\tUnsupported\t🦄 Special purpose lights_mon_down Unsupported\tUnsupported\t🦄 Special purpose lights_mon_up Unsupported\tUnsupported\t🦄 Special purpose pagedown\tPAGE DOWN key\tworks\tworks\t🦄 Special purpose pageup\tPAGE UP key\tworks\tworks\t🦄 Special purpose printscreen\tPRINT SCREEN key\tbroken\tbroken\t🦄 Special purpose Clear key\tUnsupported\tUnsupported\t🦄 Special purpose PA1 key\tUnsupported\tUnsupported\t🦄 Special purpose Zoom key\tUnsupported\tUnsupported\t🦄 Special purpose Erase EOF key\tUnsupported\tUnsupported\t🦄 Special purpose ExSel key\tUnsupported\tUnsupported\t🦄 Special purpose CrSel key\tUnsupported\tUnsupported\t🦄 Special purpose Attn key\tUnsupported\tUnsupported\t🦄 Special purpose &quot;Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP&quot;\tUnsupported\tUnsupported\t🦄 Special purpose Start Application 2 key\tUnsupported\tUnsupported\t🦄 Special purpose Start Application 1 key\tUnsupported\tUnsupported\t🦄 Special purpose Start Mail key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Start and Home key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Favorites key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Search key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Stop key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Refresh key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Forward key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Back key\tUnsupported\tUnsupported\t🦄 Special purpose SCROLL LOCK key\tUnsupported\tUnsupported\t🦄 Special purpose Separator key\tUnsupported\tUnsupported\t🦄 Special purpose Computer Sleep key\tUnsupported\tUnsupported\t🦄 Special purpose Applications key (Natural keyboard)\tUnsupported\tUnsupported\t🦄 Special purpose HELP key\tUnsupported\tUnsupported\t🦄 Special purpose EXECUTE key\tUnsupported\tUnsupported\t🦄 Special purpose PRINT key\tUnsupported\tUnsupported\t🦄 Special purpose SELECT key\tUnsupported\tUnsupported\t🦄 Special purpose CLEAR key\tUnsupported\tUnsupported\t🦄 Special purpose Control-break processing\tUnsupported\tUnsupported\t🦄 Special purpose","keywords":"","version":"0.11.6"},{"title":"Multi Language Support","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Element Selection/multi-language-support","content":"Multi Language Support caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.11.6"},{"title":"Prompt Selectors","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Element Selection/prompt-selectors","content":"Prompt Selectors caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.11.6"},{"title":"Tables","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Element Selection/tables","content":"Tables caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.11.6"},{"title":"Desktop Automation","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Executing Automations/desktop-automation","content":"Desktop Automation caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.11.6"},{"title":"Scraping and Storing Elements","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Element Selection/scraping-and-storing-lements","content":"","keywords":"","version":"0.11.6"},{"title":"Basic Usage​","type":1,"pageTitle":"Scraping and Storing Elements","url":"/docs/0.11.6/general/Element Selection/scraping-and-storing-lements#basic-usage","content":" The get()-Instruction returns an array of all the elements it found. It looks like this example:   console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 } }, ... ]   Usually you do not want every element from your UI returned. So you pair it with an element-selector:  const textFieldText = await aui .get() .text() .in() .textfield() .exec();   [ DetectedElement { name: 'text', text: 'Search', bndbox: BoundingBox { xmin: 488, ymin: 138, xmax: 548, ymax: 164 }, colors: [ '', '', '' ] } ]   ","version":"0.11.6","tagName":"h2"},{"title":"Extract the Value​","type":1,"pageTitle":"Scraping and Storing Elements","url":"/docs/0.11.6/general/Element Selection/scraping-and-storing-lements#extract-the-value","content":" You can extract the value by reading the text-property of the DetectedElement.  Notice: textFieldText is an array. You have to iterate over it or use an index to access the DetectedElement.  // Access by index // textFieldTextValue gets the value 'Search' const textFieldTextValue = textFieldText?.[0]?.text;   ","version":"0.11.6","tagName":"h2"},{"title":"Use Extracted Value as Input​","type":1,"pageTitle":"Scraping and Storing Elements","url":"/docs/0.11.6/general/Element Selection/scraping-and-storing-lements#use-extracted-value-as-input","content":" You can use the extracted value as input for another textfield for example:  await aui .typeIn(textFieldTextValue) .textfield() .contains() .text() .withText(&quot;AskUI&quot;) .exec();  ","version":"0.11.6","tagName":"h2"},{"title":"Mobile Automation","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Executing Automations/mobile-automation","content":"","keywords":"","version":"0.11.6"},{"title":"Android Automation​","type":1,"pageTitle":"Mobile Automation","url":"/docs/0.11.6/general/Executing Automations/mobile-automation#android-automation","content":" In this tutorial, we will walk you through how to set up an Android device for automating mobile apps running on Android devices. Depending on the environment, i.e. whether it is a real Android device or an emulator, the procedure might slightly differ. But the overall process of the setup will be more or less the same.  If you want to set up the development environment for Android devices without the Android Studio, then skip the 1. Install Android SDK Command-line Tools and go to Set up SDK Command Line Tools without Android Studio  ","version":"0.11.6","tagName":"h2"},{"title":"Requirements​","type":1,"pageTitle":"Mobile Automation","url":"/docs/0.11.6/general/Executing Automations/mobile-automation#requirements","content":" Android Studio installed.(optional) Android device, if you want to run your app on a real device  ","version":"0.11.6","tagName":"h3"},{"title":"1. Install Android SDK Command-line Tools​","type":1,"pageTitle":"Mobile Automation","url":"/docs/0.11.6/general/Executing Automations/mobile-automation#1-install-android-sdk-command-line-tools","content":" If you have the Android Studio installed, you have to verify if you have the Android SDK Command-line Tools and the Android SDK Platform-Tools installed. They both are packages containing several command line tools that are useful for developing apps for Android devices.  To verify the installation of them,  Click on the More Actions button, and thenOpen the SDK Manager    Then, select Android SDK from the list on the left side of the window.Go to the SDK Tools tab, and check the Android SDK Command-line Tools and the Android SDK Platform-Tools. After clicking the OK button, it will start to install the tools we have selected.    ","version":"0.11.6","tagName":"h3"},{"title":"2. Set up the Test Device​","type":1,"pageTitle":"Mobile Automation","url":"/docs/0.11.6/general/Executing Automations/mobile-automation#2-set-up-the-test-device","content":" After installing the necessary tools in the Android Studio, we can start to set up the Android device that we want to use for the development.  Set up a Real Android Device​  This part is for setting up a real Android device. If you want to use the Android Emulator instead, then you can skip it and go directly to the next step.  To use additional development features in an Android device, we need to enable the Developer Options within the device. To enable the Developer Options, tap the Build Number option 7 times. You can find this option in one of the following locations, depending on your Android version:  Android 9 (API level 28) and higher: Settings &gt; About Phone &gt; Build NumberAndroid 8.0.0 (API level 26) and Android 8.1.0 (API level 26): Settings &gt; System &gt; About Phone &gt; Build NumberAndroid 7.1 (API level 25) and lower: Settings &gt; About Phone &gt; Build Number  After enabling the Developer Options, we can enable the USB debugging option. This option will allow the Android Studio and other SDK tools to recognize your Android device via USB. To enable USB debugging, toggle the USB debugging option in the Developer Options menu. You can find this option in one of the following locations, depending on your Android version:  Android 9 (API level 28) and higher: Settings &gt; System &gt; Advanced &gt; Developer Options &gt; USB debuggingAndroid 8.0.0 (API level 26) and Android 8.1.0 (API level 26): Settings &gt; System &gt; Developer Options &gt; USB debuggingAndroid 7.1 (API level 25) and lower: Settings &gt; Developer Options &gt; USB debugging  Set up an Android Emulator​  If you want to use the Android Emulator for automation purposes, we have to create a virtual device that runs in the emulator. After running the Android Studio,  Click on the More Actions button, and thenOpen the Virtual Device Manager  If no virtual device is created, we can create one by clicking the Create device button on the top left corner of the Virtual Device Manager window.  You will now see the Virtual Device Configuration window. Within the configuration window, you will be asked to:  Choose a hardware profileChoose a system image    The hardware profile represents the specification of the hardware that will be used as a virtual device. Various presets of Android devices e.g. Pixel or Nexus are provided. But you can also create your own hardware profile, after which you will be customizing parameters in such:  Screen sizeResolutionUsing Hardware buttons (Back, Home, Menu, Volume, etc.)Using On-device sensors (Accelerometer, Gyroscope, GPS)  After choosing a hardware profile, we will be choosing a system image for the Android device. Here we can choose out of a variety of Android images, from the latest Android 13 Tiramisu down to Android 7 Nougat. If you have Android studio freshly installed and haven't used it yet, then it will start to download the image after selecting one.  After finishing creating a new virtual device, we will be able to see our new device listed in the Device Manager. Click the device's play button(▶️) to run it.    ","version":"0.11.6","tagName":"h3"},{"title":"Set Up SDK Command Line Tools without Android Studio​","type":1,"pageTitle":"Mobile Automation","url":"/docs/0.11.6/general/Executing Automations/mobile-automation#set-up-sdk-command-line-tools-without-android-studio","content":" Case01: Set Up for the Android Emulator​  Download the Android SDK Command-Line Tools Install the necessary tools:  # create a directory for the cli-tools, and move the .zip file into the directory mkdir android_sdk cd android_sdk mv &lt;PATH_TO_YOUR_DOWNLOADED_ZIP_FILE&gt; . # unzip the donwloaded file, and put the contents in the new directory 'latest/' unzip commandlinetools-&lt;YOUR_PLATFORM&gt;-8512546_latest.zip mkdir cmdline-tools/latest cd cmdline-tools/latest mv ../* . # The hierarchy of the 'android_sdk/': └- android_sdk/ ├- cmdline-tools/ ├- latest/ ├- bin/ ├- lib/ ├- NOTICE.txt └- source.properties # Install platform and build tools # You can fetch the complete list of available packages via: bin/sdkmanager --list # Install the desired package and tools via: bin/sdkmanager --install &quot;system-images;android-33;google_apis;x86_64&quot; # The above command will download and install the tools in the sdk_root (android_sdk/)   Download and install the Emulator:  bin/sdkmanager --install &quot;emulator&quot;   Create a new avd device:  bin/avdmanager create avd -n mytestdevice -k &quot;system-images;android-33;google_apis;x86_64&quot;   Check if the avd device is available:  # go to the 'emulator/' directory, and run the command cd ../../emulator ./emulator -list-avds   Now you should see your newly created avd device mytestdevice  Run the emulator:  ./emulator -avd mytestdevice   Case02: Set Up for a Real Android Device​  Download the SDK Platform-Tools from the official site. Unzip the .zip file. You can find the adb binary within the extracted directory.  cd platform-tools # Show every available Android devices ./adb devices   ","version":"0.11.6","tagName":"h3"},{"title":"3. Set Up the ADBKeyboard​","type":1,"pageTitle":"Mobile Automation","url":"/docs/0.11.6/general/Executing Automations/mobile-automation#3-set-up-the-adbkeyboard","content":" Until now, we have prepared our Android device and now we are ready to go for automating our Android app. But before we jump into the this phase, we will set up one more utility that will make the procedure easier.  ADBKeyboard is a virtual keyboard that can be installed on Android devices. It enables us to type within the Android device by using command lines commands via adb.  One noticeable advantage of using ADBKeyboard is that it can also handle base64 encoding, which becomes handy if you want to type Unicode characters such as emojis🔥 For more details about this virtual keyboard, see here.  To install the ADBKeyboard on your device,  Download the ADBKeyboard package from this GitHub Repository (Important: Version 2.0) Unzip it. Find your device: # make sure that your Android device is connected. # in case of using the emulator, it should be running adb devices Install the ADBKeyboard on the device: # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; install ADBKeyboard.apk Configure the ADB Keyboard: adb -s &lt;your device id&gt; shell settings put secure default_input_method com.android.adbkeyboard/.AdbIME Enable the ADBKeyboard: adb -s &lt;your device id&gt; shell ime enable com.android.adbkeyboard/.AdbIME To check if it is enabled: Click on a textfield in an app and see if the ADB Keyboard {ON} notification is shown at the bottom of the screen.  ","version":"0.11.6","tagName":"h3"},{"title":"4. Done​","type":1,"pageTitle":"Mobile Automation","url":"/docs/0.11.6/general/Executing Automations/mobile-automation#4-done","content":" We are finally done with the preparation for automating apps running on Android devices.  You can now try your setup in our Automate Web Search on Android Devices Tutorial.  If you have a recurring or persisting issue while following this tutorial, don’t hesitate to ask the Outverse-Community for help!  ","version":"0.11.6","tagName":"h3"},{"title":"iOS Automation​","type":1,"pageTitle":"Mobile Automation","url":"/docs/0.11.6/general/Executing Automations/mobile-automation#ios-automation","content":" caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly. ","version":"0.11.6","tagName":"h2"},{"title":"Relational Selectors","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Element Selection/relational-selectors","content":"","keywords":"","version":"0.11.6"},{"title":"Selecting an Element by Visual Relation​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.11.6/general/Element Selection/relational-selectors#selecting-an-element-by-visual-relation","content":" After reading the next section you will know how to use the full power of all the relational element-descriptions. Additionally, you learn what pitfalls you can fall into and how to avoid them in the future.  We will use the Selectorshub practice page for the demonstration.  We’ll discuss the following relational element-descriptions:  above()below()contains()in()leftOf()rightOf()nearestTo()  ","version":"0.11.6","tagName":"h2"},{"title":"above()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.11.6/general/Element Selection/relational-selectors#above","content":" When you want to click on a textfield and it is above an element, like for example a button with the text Submit. You can do it with above(). The following code snippet moves the mouse to the textfield above the Submit-button:  await aui .click() .textfield() .above() .button() .withText('Submit') .exec();     ","version":"0.11.6","tagName":"h2"},{"title":"below()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.11.6/general/Element Selection/relational-selectors#below","content":" When you want to select a textfield you can do so by finding the correct label, which is often above the textfield. The following code snippet moves the mouse to the textfield below the text Mobile Number:  await aui .moveMouseTo() .textfield() .below() .text() .withText('Mobile Number') .exec();     ","version":"0.11.6","tagName":"h2"},{"title":"contains()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.11.6/general/Element Selection/relational-selectors#contains","content":" For selecting an element, that contains another element, contains() is the right candidate. It is especially useful if you want to select a textfield with a placeholder text inside it. The text inside the textfield is annotated as an element itself.  If you have problems with selecting a specific element, always run annotate() to create a screenshot of all the annotations or use annotateInteractively() to see if you need to use contains().  The following snippet moves the mouse to a textfield based on its placeholder text First Crush which is contained in the textfield:  await aui .moveMouseTo() .textfield() .contains() .text() .withText('First Crush') .exec();     ","version":"0.11.6","tagName":"h2"},{"title":"in()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.11.6/general/Element Selection/relational-selectors#in","content":" When you want to target an element that is inside another element you can use in().  -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | --------------------   The following code snippet moves the mouse pointer to the text of the first textfield AskUI found:  await aui .moveMouseTo() .text() .in() .textfield() .exec();     ","version":"0.11.6","tagName":"h2"},{"title":"leftOf() and rightOf()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.11.6/general/Element Selection/relational-selectors#leftof-and-rightof","content":" If you want to select an element based on its location left or right of another element you have to use leftOf() or rightOf() respectively.  💡 If you do not specify another element-description like withText() then you will get the nearest element. Otherwise, AskUI retrieves the nearest element that matches the element-description!  await aui .moveMouseTo() .text() .leftOf() .text() .withText('Denmark') .exec();     await aui .moveMouseTo() .text() .rightOf() .text() .withExactText('Joe Root') .exec();     ","version":"0.11.6","tagName":"h2"},{"title":"nearestTo()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.11.6/general/Element Selection/relational-selectors#nearestto","content":" Filtering with the nearestTo() will return the element nearest to another element. This is useful when the direction is not clear on where to search. Especially responsive designs are prone to wrap elements into a new line where leftOf() and rightOf() would fail.  await aui .moveMouseTo() .textfield() .nearestTo() .text() .withTextRegex('User Em*') .exec();     ","version":"0.11.6","tagName":"h2"},{"title":"Additional Considerations About the Distance Metric​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.11.6/general/Element Selection/relational-selectors#additional-considerations-about-the-distance-metric","content":" The distance is not entirely based on physical distance. If you use an additional element-description like withText() it optimizes to find the best match. It also considers special cases, for example, modal dialogs. Therefore the element selected by AskUI might sometimes be wrong from a user's point of view.  You can use moveMouseTo() like in the following example to see what element an instruction targets.  await aui .moveMouseTo() .textfield() .above() .button() .withText('Submit') .exec()  ","version":"0.11.6","tagName":"h2"},{"title":"Single Device Automation","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Executing Automations/single-device-automation","content":"Single Device Automation caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.11.6"},{"title":"Framework Configuration","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Getting Started/configure_test_framework","content":"","keywords":"","version":"0.11.6"},{"title":"Jest​","type":1,"pageTitle":"Framework Configuration","url":"/docs/0.11.6/general/Getting Started/configure_test_framework#jest","content":" You can configure Jest with the jest.config.ts. It should look something like this:  export default { preset: 'ts-jest', testEnvironment: 'node', setupFilesAfterEnv: ['./helper/jest.setup.ts'], sandboxInjectedGlobals: ['Math'] };   In case your Jest tests are executed slowly, make sure you have added 'Math' to sandboxInjectedGlobals.  caution The option sandboxInjectedGlobals was named extraGlobals in Jest v27 and lower. ","version":"0.11.6","tagName":"h2"},{"title":"Multi Device Automation","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Executing Automations/multi-device-automation","content":"","keywords":"","version":"0.11.6"},{"title":"1. Download and Prepare the askui-ui-controller Binary for Each Device​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.11.6/general/Executing Automations/multi-device-automation#1-download-and-prepare-the-askui-ui-controller-binary-for-each-device","content":" info At the moment you need to run AskUI one time for the askui-ui-controller to be downloaded! Follow the instructions below.  If you already used the AskUI library once, then the binary for your platform already exists in the node_modules/ directory, as the binary gets automatically downloaded when an instance of UiController gets initialized. See here for more details on the AskUI UI Controller. Follow this path and confirm that the binary exists: # Windows node_modules/askui/dist/release/latest/win32/askui-ui-controller.exe # macOS node_modules/askui/dist/release/latest/darwin/askui-ui-controller.app/Contents/MacOS/askui-ui-controller # Linux node_modules/askui/dist/release/latest/linux/askui-ui-controller.AppImage If the remote device runs the same OS as the local device, copy the binary from the local device to the remote device. If the remote device runs a different OS, then download the binary for the respective platform: Windows | macOS(intel) | macOS(silicon) | Linux macOS and Linux only: If you downloaded the askui-ui-controller manually from the link above, you have to make it executable. macOS: Mount the downloaded askui-ui-controller.dmg by double-clicking it and copy the askui-ui-controller.app to wherever you want to store it. Then, the executable binary will be within the .app: askui-ui-controller.app/Contents/MacOS/askui-ui-controller Linux: Run the command below to make it executable: chmod +x askui-ui-controller.AppImage If the remote devices runs Android, see the chapter Android Only.  ","version":"0.11.6","tagName":"h2"},{"title":"Android Only:​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.11.6/general/Executing Automations/multi-device-automation#android-only","content":" There is no need to save the binary to Android devices. They are controlled by the AskUI UI Controller running on the local device (desktop). Be sure that your Android device is discoverable by the Android Debug Bridge adb from your local device: # Run this command to confirm that your Android device is discoverable adb devices If you don't have the adb installed on your local device, set it up by following this tutorial. Use the commands below, if you want to connect your Android device via adb wirelessly: # Make sure that the `USB Debugging Mode` is enabled in the Android device. # Connect the Android device with a USB cable, and run this command: adb devices # will print the &lt;device-id&gt; adb -s &lt;device-id&gt; tcpip 9000 # replace &lt;device-id&gt; with your device-id adb -s &lt;device-id&gt; connect &lt;local-ip-address&gt;:9000 # replace the &lt;local-ip-address&gt; # Run this command, if you want to check the local ip address of the android device adb -s &lt;device-id&gt; shell ip -f inet addr show wlan0 # Now you can disconnect the USB cable from the Android device. # Confirm that the Android device is recognised by adb wirelessly. adb devices   ","version":"0.11.6","tagName":"h3"},{"title":"2. Configure the jest.setup.ts​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.11.6/general/Executing Automations/multi-device-automation#2-configure-the-jestsetupts","content":" Figure out the local IP address of the remote device, and then change the &lt;local-ip-address&gt; of the jest.setup.ts: import { UiControlClient, UiController } from 'askui'; let localDevice: UiControlClient; let remoteDevice: UiControlClient; jest.setTimeout(60 * 1000 * 60); beforeAll(async () =&gt; { // Get your AskUI credentials from https://app.askui.com/workspaces const credentials = { workspaceId: '&lt;your-workspace-id&gt;', token: '&lt;your-token&gt;', } // This client will communicate with // the controller running on this local device. localDevice = await UiControlClient.build({ uiControllerUrl: &quot;ws://127.0.0.1:6769&quot;, credentials: credentials, }); await localDevice.connect(); // This client will communicate with // the controller running on the remote device. // Replace the &lt;local-ip-address&gt; // In case of Android device, replace it with 127.0.0.1 remoteDevice = await UiControlClient.build({ uiControllerUrl: &quot;ws://&lt;local-ip-address&gt;:6769&quot;, credentials: credentials, }); await remoteDevice.connect(); }); afterAll(async () =&gt; { localDevice.close(); remoteDevice.close(); }); export { localDevice, remoteDevice };   ","version":"0.11.6","tagName":"h2"},{"title":"3. Run the Controller on Each Device​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.11.6/general/Executing Automations/multi-device-automation#3-run-the-controller-on-each-device","content":" danger Change to the directory of the askui-ui-controller binary first: See Download and Prepare step.  Run the binary AskUI UI Controller on the local and remote devices with the following command: # Windows powershell .\\askui-ui-controller.exe --host 0.0.0.0 -d 0 -m # Windows cmd start askui-ui-controller.exe --host 0.0.0.0 -d 0 -m # macOS ./askui-ui-controller --host 0.0.0.0 -d 0 -m # Linux ./askui-ui-controller.AppImage --host 0.0.0.0 -d 0 -m If running successfully, you should see the logs printed on the terminal, e.g: [2023-01-02 17:31:19.634 +0100] DEBUG (AskuiUiController): Window is minimized. [2023-01-02 17:31:19.639 +0100] INFO (AskuiUiController): Selecting display number 0. [2023-01-02 17:31:19.641 +0100] INFO (AskuiUiController): Successfully started.   ","version":"0.11.6","tagName":"h2"},{"title":"Android Only:​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.11.6/general/Executing Automations/multi-device-automation#android-only-1","content":" If your remote device is an Android device, run the AskUI UI Controller on the local device (desktop) with an extra option as below: # Windows powershell .\\askui-ui-controller.exe --host 0.0.0.0 -d 0 -m -r android # Windows cmd start askui-ui-controller.exe --host 0.0.0.0 -d 0 -m -r android # macOS ./askui-ui-controller --host 0.0.0.0 -d 0 -m -r android # Linux ./askui-ui-controller.AppImage --host 0.0.0.0 -d 0 -m -r android Make sure that your local device (desktop) is running TWO DIFFERENT askui-ui-controller, if you want to control the local device and the Android device at the same time.  (option) Running Multiple Android Devices​  The AskUI UI Controller considers all Android devices as a single device with multiple displays. See the screenshot below. Set the -d 0 option of the binary differently for each Android device. # Windows Powershell # For the first Android device .\\askui-ui-controller.exe --host 0.0.0.0 -d 0 -m -r android # For the second Android device .\\askui-ui-controller.exe --host 0.0.0.0 -d 1 -m -r android # Windows cmd start askui-ui-controller.exe --host 0.0.0.0 -d 0 -m -r android start askui-ui-controller.exe --host 0.0.0.0 -d 1 -m -r android # macOS # For the first Android device ./askui-ui-controller --host 0.0.0.0 -d 0 -m -r android # For the second Android device ./askui-ui-controller --host 0.0.0.0 -d 1 -m -r android # Linux # For the first Android device ./askui-ui-controller.AppImage --host 0.0.0.0 -d 0 -m -r android # For the second Android device ./askui-ui-controller.AppImage --host 0.0.0.0 -d 1 -m -r android     ","version":"0.11.6","tagName":"h3"},{"title":"4. Write the AskUI Code​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.11.6/general/Executing Automations/multi-device-automation#4-write-the-askui-code","content":" Write the AskUI code in test/my-first-askui-test-suite.test.ts: import { localDevice, remoteDevice } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should work with multiple devices', async () =&gt; { const everyElement_remote = await remoteDevice.getAll().exec(); console.log(everyElement_remote); await localDevice.moveMouse(500,500).exec(); const everyElement_local = await localDevice.getAll().exec(); console.log(everyElement_local); }); });   ","version":"0.11.6","tagName":"h2"},{"title":"5. Run the Code​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.11.6/general/Executing Automations/multi-device-automation#5-run-the-code","content":" Run the command below to run the AskUI code: npx jest test/my-first-askui-test-suite.test.ts --config ./test/jest.config.ts   ","version":"0.11.6","tagName":"h2"},{"title":"6. Conclusion​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.11.6/general/Executing Automations/multi-device-automation#6-conclusion","content":" Now you should be able to automate multiple devices in the network. If you got any issues while following this tutorial, don't hesitate to ask our Outverse-Community! ","version":"0.11.6","tagName":"h2"},{"title":"Web Automation","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Executing Automations/web-automation","content":"Web Automation caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.11.6"},{"title":"Install AskUI Android","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Getting Started/getting-started-android","content":"","keywords":"","version":"0.11.6"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI Android","url":"/docs/0.11.6/general/Getting Started/getting-started-android#requirements","content":" Node.js version 16 or abovenpm in version 7.10 or above (usually comes with the Node.js installation)A text editor/IDE like Visual Studio Code  ","version":"0.11.6","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Install AskUI Android","url":"/docs/0.11.6/general/Getting Started/getting-started-android#installation","content":" Open a directory where you would like to place the AskUI setup. If you haven’t already, set up an NPM project by running:  npm init -y   This will create a package.json file inside your present working directory which contains the configuration of your project including a description of its dependencies.  Install askui and other dependencies for writing and executing tests:  npm i -D askui @askui/askui-reporters typescript ts-node @types/jest ts-jest jest   Quick explanation of all the dependencies AskUI: Controlling a multitude of operating systems with commands based on automatically detected screen elements etc.@askui/askui-reporters: AskUI reporters for nice looking reports.typescript: Allowing you to write your tests in TypeScript instead of JavaScriptts-node: TypeScript execution and REPL for node.js, with source map and native ESM support.jest: Allowing you to write and run tests (describe, it, assertions, mocking etc.)ts-jest: A Jest transformer with source map support that lets you use Jest to test projects written in TypeScript@types/jest: Types for Jest  note To create and serve a static HTML-Report you have to install Allure and then call allure serve ./allure-results from your root-directory.  ","version":"0.11.6","tagName":"h2"},{"title":"Access Token​","type":1,"pageTitle":"Install AskUI Android","url":"/docs/0.11.6/general/Getting Started/getting-started-android#access-token","content":" As we need to prevent misuse of our API, we need you to create some credentials through our AskUI Studio (while still free) and configure our library to use these credentials for authenticating and authorizing with our API.  Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio. ","version":"0.11.6","tagName":"h2"},{"title":"Install AskUI Windows","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Getting Started/getting-started","content":"","keywords":"","version":"0.11.6"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/0.11.6/general/Getting Started/getting-started#requirements","content":" Node.js version 16 or abovenpm in version 7.10 or above (usually comes with the Node.js installation)A text editor/IDE like Visual Studio Code  ","version":"0.11.6","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/0.11.6/general/Getting Started/getting-started#installation","content":" Open a directory where you would like to place the AskUI setup. If you haven’t already, set up an NPM project by running:  npm init -y   This will create a package.json file inside your present working directory which contains the configuration of your project including a description of its dependencies.  Install askui and other dependencies for writing and executing tests:  npm i -D askui @askui/askui-reporters typescript ts-node @types/jest ts-jest jest   Quick explanation of all the dependencies AskUI: Controlling a multitude of operating systems with commands based on automatically detected screen elements etc.@askui/askui-reporters: AskUI reporters for nice looking reports.typescript: Allowing you to write your tests in TypeScript instead of JavaScriptts-node: TypeScript execution and REPL for node.js, with source map and native ESM support.jest: Allowing you to write and run tests (describe, it, assertions, mocking etc.)ts-jest: A Jest transformer with source map support that lets you use Jest to test projects written in TypeScript@types/jest: Types for Jest  note To create and serve a static HTML-Report you have to install Allure and then call allure serve ./allure-results from your root-directory.  ","version":"0.11.6","tagName":"h2"},{"title":"Access Token​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/0.11.6/general/Getting Started/getting-started#access-token","content":" As we need to prevent misuse of our API, we need you to create some credentials through our AskUI Studio (for free).  Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio. ","version":"0.11.6","tagName":"h2"},{"title":"Enterprise Checklist","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Getting Started/enterprise-checklist","content":"Enterprise Checklist 🚧 Under construction 🚧","keywords":"","version":"0.11.6"},{"title":"Install AskUI macOS","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Getting Started/getting-started-macos","content":"","keywords":"","version":"0.11.6"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI macOS","url":"/docs/0.11.6/general/Getting Started/getting-started-macos#requirements","content":" Node.js version 16 or abovenpm in version 7.10 or above (usually comes with the Node.js installation)A text editor/IDE like Visual Studio Code  danger Some users have reported instability running AskUI on macOS with external displays and/or virtual desktops (called Spaces). If you experience similar issues, please disconnect external displays and close virtual desktops, or see documentation on running AskUI in Docker.  ","version":"0.11.6","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Install AskUI macOS","url":"/docs/0.11.6/general/Getting Started/getting-started-macos#installation","content":" Open a directory where you would like to place the AskUI setup. If you haven’t already, set up an NPM project by running:  npm init -y   This will create a package.json file inside your present working directory which contains the configuration of your project including a description of its dependencies.  Install askui and other dependencies for writing and executing tests:  npm i -D askui @askui/askui-reporters typescript ts-node @types/jest ts-jest jest   Quick explanation of all the dependencies AskUI: Controlling a multitude of operating systems with commands based on automatically detected screen elements etc.@askui/askui-reporters: AskUI reporters for nice looking reports.typescript: Allowing you to write your tests in TypeScript instead of JavaScriptts-node: TypeScript execution and REPL for node.js, with source map and native ESM support.jest: Allowing you to write and run tests (describe, it, assertions, mocking etc.)ts-jest: A Jest transformer with source map support that lets you use Jest to test projects written in TypeScript@types/jest: Types for Jest  note To create and serve a static HTML-Report you have to install Allure and then call allure serve ./allure-results from your root-directory.  ","version":"0.11.6","tagName":"h2"},{"title":"Access Token​","type":1,"pageTitle":"Install AskUI macOS","url":"/docs/0.11.6/general/Getting Started/getting-started-macos#access-token","content":" As we need to prevent misuse of our API, we need you to create some credentials through our AskUI Studio (while still free) and configure our library to use these credentials for authenticating and authorizing with our API.  Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio. ","version":"0.11.6","tagName":"h2"},{"title":"Install AskUI Linux","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Getting Started/getting-started-linux","content":"","keywords":"","version":"0.11.6"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI Linux","url":"/docs/0.11.6/general/Getting Started/getting-started-linux#requirements","content":" Node.js version 16 or abovenpm in version 7.10 or above (usually comes with the Node.js installation)A text editor/IDE like Visual Studio Code⚠️ Information for Wayland.  ","version":"0.11.6","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Install AskUI Linux","url":"/docs/0.11.6/general/Getting Started/getting-started-linux#installation","content":" Open a directory where you would like to place the AskUI setup. If you haven’t already, set up an NPM project by running:  npm init -y   This will create a package.json file inside your present working directory which contains the configuration of your project including a description of its dependencies.  Install askui and other dependencies for writing and executing tests:  npm i -D askui @askui/askui-reporters typescript ts-node @types/jest ts-jest jest   Quick explanation of all the dependencies AskUI: Controlling a multitude of operating systems with commands based on automatically detected screen elements etc.@askui/askui-reporters: AskUI reporters for nice looking reports.typescript: Allowing you to write your tests in TypeScript instead of JavaScriptts-node: TypeScript execution and REPL for node.js, with source map and native ESM support.jest: Allowing you to write and run tests (describe, it, assertions, mocking etc.)ts-jest: A Jest transformer with source map support that lets you use Jest to test projects written in TypeScript@types/jest: Types for Jest  note To create and serve a static HTML-Report you have to install Allure and then call allure serve ./allure-results from your root-directory.  ","version":"0.11.6","tagName":"h2"},{"title":"Access Token​","type":1,"pageTitle":"Install AskUI Linux","url":"/docs/0.11.6/general/Getting Started/getting-started-linux#access-token","content":" As we need to prevent misuse of our API, we need you to create some credentials through our AskUI Studio (while still free) and configure our library to use these credentials for authenticating and authorizing with our API.  Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio. ","version":"0.11.6","tagName":"h2"},{"title":"Start","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Getting Started/start","content":"Start Choose what you want to automate. 📦 Quickstart Try AskUI without any hassle in Gitpod. Try it now! 🪟 Windows Learn how to automate on Windows. Get started! 🤖 Android Learn how to automate an Android device. Get started! 👩🏻‍💻 macOS Learn how to automate on macOS Get started! 💻 Linux Learn how to automate on Linux. Get started! 🏢 Enterprise Checklist Setup in an enterprise environment. Get started! 📱 iOS 🚧 Coming soon! 🚧 Get started!","keywords":"","version":"0.11.6"},{"title":"How AskUI Works","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Getting Started/guide-how-askui-works","content":"","keywords":"","version":"0.11.6"},{"title":"Overview​","type":1,"pageTitle":"How AskUI Works","url":"/docs/0.11.6/general/Getting Started/guide-how-askui-works#overview","content":" In this article, we will give a detailed overview of AskUI`s architecture and how it works under the hood.    AskUI is built on top of a number of components. We will cover what these components are and how they work together to provide a flexible and reliable way to automate interactions with UI elements of any operating system or platform.  By the end of this article, whether you're a software developer, QA engineer, or automation specialist, you'll have a solid understanding of how AskUI works, and be able to use this knowledge to build more efficient automation for your project.  AskUI consists of three building blocks:  AskUI Control ClientAskUI UI ControllerAskUI Inference Server  We will step through each of them and see how they work together to perform UI automation.    ","version":"0.11.6","tagName":"h2"},{"title":"Glossary​","type":1,"pageTitle":"How AskUI Works","url":"/docs/0.11.6/general/Getting Started/guide-how-askui-works#glossary","content":" Throughout this article, we will use some terms that describe certain parts of AskUI. Some of them are used only internally and not exposed by the AskUI Control Client API, but are important for understanding how AskUI works and what it can do. Please refer to this table while reading.  Term\tDescriptionElement-description\tA description for a UI element. In the AskUI Control Client API, for example, it is the coded description like button() or textfield().contains().text('Email'). Action\tA method in the AskUI Control Client API that describes an action to be taken against the operating system. For example click(), type(). InputEvent (internal)\tA specific type of action to be taken against the operating system. For example MouseInputEvent or KeyboardInputEvent. ControlCommand (internal)\tA command sent to the UI controller telling what to perform on the operating system. It consists of one or more InputEvents.    ","version":"0.11.6","tagName":"h2"},{"title":"AskUI Control Client​","type":1,"pageTitle":"How AskUI Works","url":"/docs/0.11.6/general/Getting Started/guide-how-askui-works#askui-control-client","content":"   The AskUI Control Client provides the API that tells AskUI what/how to automate. Once you start using AskUI, you will mostly interact with AskUI via the AskUI Control Client. In most of our tutorials and demonstrations, you will see let aui: UIControlClient is declared and combined with an Action and Element-descriptions which ends up forming an instruction, e.g:  await aui.click().button().withText('login').exec();   As shown above, you form an instruction by chaining an Action with Element-descriptions using the Fluent API of the AskUI Control Client. It is designed as a fluent interface to increase readability and make it more understandable. The AskUI Control Client sends a request to the AskUI UI Controller: to take a screenshot.with a ControlCommand that tells what InputEvent to perform on the operating system. The AskUI Control Client communicates with the AskUI Inference Server: to send a screenshot to be annotated with the instruction.to receive the annotation, e.g. detected elements.  To use the AskUI Control Client, user credentials are required. User credentials can be obtained via our AskUI Studio. Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio.  See our API documentation for more information on this component.    ","version":"0.11.6","tagName":"h2"},{"title":"AskUI UI Controller​","type":1,"pageTitle":"How AskUI Works","url":"/docs/0.11.6/general/Getting Started/guide-how-askui-works#askui-ui-controller","content":"   The AskUI UI Controller is a binary that controls the operating system. This binary gets automatically downloaded when the UiController is initialized by calling UiController.start(). Once executed, it stays in the background and communicates with the AskUI Control Client on a specific port to receive the ControlCommand. Based on the given ControlCommand, it triggers InputEvents respectively.  The AskUI UI Controller is responsible for: Taking a screenshot.Triggering the InputEvent, i.e MouseInputEvent, KeyboardInputEvent, or shell execution.Running the interactive annotation.  See our API documentation for more information on this component.    ","version":"0.11.6","tagName":"h2"},{"title":"AskUI Inference Server​","type":1,"pageTitle":"How AskUI Works","url":"/docs/0.11.6/general/Getting Started/guide-how-askui-works#askui-inference-server","content":"   The AskUI Inference Server is responsible for the prediction of UI elements within the given screenshot. As soon as it receives a request from the AskUI Control Client, it performs the prediction on the given image and returns the annotation to the AskUI Control Client.  For the inference, we use a machine-learning model that consists of several submodels:  Object Detector: Detects UI elements (e.g button, textfield).Icon Classifier: Predicts the class of an icon based on the detected objects (e.g. a user icon 👤).Optical Character Recognition (OCR): Converts the image of a text into text.Custom Element Detector: Searches for an area in the given screenshot that matches the image given by the Element-description .customElement().    ","version":"0.11.6","tagName":"h2"},{"title":"Them All in Action​","type":1,"pageTitle":"How AskUI Works","url":"/docs/0.11.6/general/Getting Started/guide-how-askui-works#them-all-in-action","content":" Assuming that we run AskUI on the same device we want to automate, the simplest synopsis can be described as such:    When running AskUI,  The AskUI Control Client checks whether it is needed to be processed by the Inference Server. If the code contains any of the Element-description or Getters, then the AskUI Control Client tells the AskUI UI Controller to take a screenshot of the given screen and sends it to the Inference Server. After the AskUI Control Client has retrieved the annotation back from the server, it sends a ControlCommand to the AskUI UI Controller. Afterwards, the AskUI UI Controller triggers the InputEvent on the operating system. // an example of AskUI code containing an element-identifier await aui.click().button().withText('Confirm').exec(); // Here, the element-description 'button()' is used together, // so the client will fire a request to the server. If the code contains an Action but no Element-description, then the AskUI Control Client sends the ControlCommand to the AskUI UI Controller to trigger the InputEvent directly. // an example of AskUI code containing only a command await aui.pressThreeKeys('control','alt','del').exec(); // It uses only a command 'pressThreeKeys()', // so it will be executed by the UI Controller directly.   An Element-description represents a specific type of UI element that can be recognized by inference. Most of the commonly used UI elements such as button, textfield are supported and can be used. An Action represents a specific type of action to be performed, i.e Mouse/Keyboard Input Event or Shell Command. This action can be performed on a specific element when combined with Element-descriptions or can be performed on its own as shown in the example right above.  Please visit our API Docs, if you want to learn more about different types of Element-description and Action.    ","version":"0.11.6","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"How AskUI Works","url":"/docs/0.11.6/general/Getting Started/guide-how-askui-works#conclusion","content":" Here we have seen the three core components of AskUI. If you aim to use AskUI in a more advanced way, e.g. integrating it into your CI/CD pipeline, it may be worthwhile to get an overview of how it is composed. For more practical examples, please refer to our Tutorials and API docs. And don't forget to come over to our Outverse-Community, if you have any questions about AskUI! ","version":"0.11.6","tagName":"h2"},{"title":"Write Your First Instruction","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Getting Started/write-your-first-instruction","content":"","keywords":"","version":"0.11.6"},{"title":"Initialization​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.11.6/general/Getting Started/write-your-first-instruction#initialization","content":" To create your first AskUI suite, enter into your terminal  npx askui init   This will create a tsconfig.json: a json file specifying the root files and the compiler options required to compile the project,a folder called test which includes: test/my-first-askui-test-suite.test.ts: an example workflow with AskUI,a folder called helper which contains the jest.setup.ts file for setting up the test environmenta jest.config.ts configuration file  ","version":"0.11.6","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.11.6/general/Getting Started/write-your-first-instruction#configuration","content":" Generate credentials through the AskUI Studio (usage is free!). Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio.  Then, go to your helper/jest.setup.ts and add the configuration for your workspace id and your access token to the UiControlClient.   aui = await UiControlClient.build({ credentials: { workspaceId: '&lt;your workspace id&gt;', token: '&lt;your access token&gt;', } });   ","version":"0.11.6","tagName":"h2"},{"title":"Run Your First Instruction​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.11.6/general/Getting Started/write-your-first-instruction#run-your-first-instruction","content":" Writing and executing an instruction in AskUI can be done in three steps:  Execute an (interactive) annotation.Extract from the (interactive) annotation the element-description which identifies target element.Execute an instruction to control the keyboard and mouse to take action on target element.  ","version":"0.11.6","tagName":"h2"},{"title":"Step 1: Execute an (Interactive) Annotation​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.11.6/general/Getting Started/write-your-first-instruction#step-1-execute-an-interactive-annotation","content":" info Before executing the instructions, open test/my-first-askui-test-suite.test.ts on your main display. The code in this file is shown below. Windows Users Please use annotate() as outlined in the code below. The interactive annotation aui.annotateInteractively() currently leads to an error on Windows. macOS Users Some users have reported instability running AskUI on macOS with external displays and/or virtual desktops (called Spaces). If you experience similar issues, please disconnect external displays and close virtual desktops, or see documentation on running AskUI in Docker.  test/my-first-askui-test-suite.test.ts import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should generate an (interactive) annotation', async () =&gt; { // For Windows users: // Use annotate() to create an annotated HTML file // of your screen that is saved under &lt;project_root&gt;/report await aui.annotate(); // Uncomment for macOS and Linux // Delete the lines above to not trigger annotate() // await aui.annotateInteractively(); }); });   To execute the instructions, enter into your terminal  npx jest test/my-first-askui-test-suite.test.ts --config ./test/jest.config.ts --runInBand   info We use the --runInBand CLI option here to run the workflows from the it-code blocks sequentially and not in parallel. This is usually what you want on your local machine without isolated environments like containers or VMs.  A few seconds later an (interactive) annotation will be generated.  If you’d like a longer explanation as to what an (interactive) annotation is, read about it here. Explanation of (Interactive) Annotations  ","version":"0.11.6","tagName":"h3"},{"title":"Step 2: Extract the Element-Description​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.11.6/general/Getting Started/write-your-first-instruction#step-2-extract-the-element-description","content":" Extract from the (interactive) annotation the element-description which identifies target element. Locate any element you’d like the mouse to move to and copy the element-description by clicking on it: Clicking an element will copy this element-description, which we can then use in the step 3.  To close out the interactive annotation, use CMD/CTRL + W or ESC.  ","version":"0.11.6","tagName":"h3"},{"title":"Step 3: Execute an Instruction​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.11.6/general/Getting Started/write-your-first-instruction#step-3-execute-an-instruction","content":" Add this instruction code block to the describe block in your test file just under your (interactive) annotation instruction, taking note to also add your copied element-description from the annotation:  test/my-first-askui-test-suite.test.ts it('should click on my element', async () =&gt; { await aui .click() // &lt;INSERT YOUR COPIED ELEMENT-DESCRIPTION HERE AND UNCOMMENT THIS AND THE NEXT LINE&gt; // .exec(); });   Be sure to xit out the (interactive) annotation, as that is no longer needed. The final version should look like this, taking exception of course to whatever element-description text you chose:  test/my-first-askui-test-suite.test.ts describe('jest with askui', () =&gt; { xit('should generate an (interactive) annotation', async () =&gt; { // For Windows users: // Use annotate() to create an annotated HTML file // of your screen that is saved under &lt;project_root&gt;/report await aui.annotate(); // Uncomment for macOS and Linux // Delete the lines above to not trigger annotate() // await aui.annotateInteractively(); }); it('should click on my element', async () =&gt; { await aui .click() .text(&quot;node_nodu&quot;) .exec(); }); });   As before, run your code with npx jest test/my-first-askui-test-suite.test.ts --config ./test/jest.config.ts --runInBand  You should see AskUI take over your mouse, mouse over the element you chose and click.  Congratulations! You’ve just built your first instruction using AskUI. 🎉  ","version":"0.11.6","tagName":"h3"},{"title":"What other instructions are available?​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.11.6/general/Getting Started/write-your-first-instruction#what-other-instructions-are-available","content":" Actions APIElement-Descriptions APIRelations APIChecks APIGetters API  ","version":"0.11.6","tagName":"h3"},{"title":"Troubleshooting​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.11.6/general/Getting Started/write-your-first-instruction#troubleshooting","content":" ","version":"0.11.6","tagName":"h2"},{"title":"AskUI moves to the wrong element?​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.11.6/general/Getting Started/write-your-first-instruction#askui-moves-to-the-wrong-element","content":" Have a look at Relational Selectors to select elements via a visual relation instead.  ","version":"0.11.6","tagName":"h3"},{"title":"Technical​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.11.6/general/Getting Started/write-your-first-instruction#technical","content":" For technical problems with the execution, take a look at our Troubleshooting page  ","version":"0.11.6","tagName":"h3"},{"title":"Where to Go Next?​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.11.6/general/Getting Started/write-your-first-instruction#where-to-go-next","content":" Our Outverse-Community is there to help you out!  ","version":"0.11.6","tagName":"h2"},{"title":"Tutorials​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.11.6/general/Getting Started/write-your-first-instruction#tutorials","content":" If you are unsure on how/what to do yet, try to follow our tutorials. They cover some of use cases of AskUI in depth:  Search Image in GoogleLogin at an Online ShopAutomate Spotify on DesktopAutomate an Android App  ","version":"0.11.6","tagName":"h3"},{"title":"Annotation​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.11.6/general/Getting Started/write-your-first-instruction#annotation","content":" Read Debug with Annotation to learn how to use the Image Annotation Feature. ","version":"0.11.6","tagName":"h3"},{"title":"Custom Web Hooks","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Integrations/custom-web-hooks","content":"Custom Web Hooks caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.11.6"},{"title":"Docker","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Integrations/containers","content":"","keywords":"","version":"0.11.6"},{"title":"AskUI Device Controller Docker Images​","type":1,"pageTitle":"Docker","url":"/docs/0.11.6/general/Integrations/containers#askui-device-controller-docker-images","content":" We maintain Docker Images for running instructions with askui inside a Docker Container, e.g., locally or in a CI/CD pipeline. The images are based on Ubuntu (amd64) images and contain the askui UI Controller (also known as the UiController) and a browser. Currently, we offer some of the latest versions of Chrome and Firefox. The askui library connects to the askui UI Controller inside the Docker container to execute the instructions inside it. You can find our images on DockerHub.  caution If you are on an ARM architecture such as Apple Silicon, you have to install an Emulator like Rosetta.  ","version":"0.11.6","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Docker","url":"/docs/0.11.6/general/Integrations/containers#configuration","content":" The following environment variables can be used for configuring the Docker Container started from one of our Docker Images:  Variable\tDefault Value\tDescriptionENABLE_VNC\tfalse\ttrue to enable VNC so that you can connect and observe whats happening inside the container. The VNC server is bound to port 5900 of the container. SCREEN_RESOLUTION\t1920x1080\tThe screen resolution used inside the container in the format &lt;width&gt;x&lt;height&gt;.  ","version":"0.11.6","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Docker","url":"/docs/0.11.6/general/Integrations/containers#usage","content":" The AskUI UI Controller is bound to port 6769 of the container so this needs to be exposed.  ","version":"0.11.6","tagName":"h3"},{"title":"Starting Container Manually​","type":1,"pageTitle":"Docker","url":"/docs/0.11.6/general/Integrations/containers#starting-container-manually","content":" You can pull an image using docker pull, e.g.,  docker pull askuigmbh/askui-ui-controller:v0.11.2-chrome-100.0.4896.60-amd64   and, then, start the corresponding container using:  docker run -e ENABLE_VNC=true -p 6769:6769 -p 5900:5900 askuigmbh/askui-ui-controller:v0.11.2-chrome-100.0.4896.60-amd64   ","version":"0.11.6","tagName":"h3"},{"title":"Starting Container from Within beforeAll() Using Testcontainers​","type":1,"pageTitle":"Docker","url":"/docs/0.11.6/general/Integrations/containers#starting-container-from-within-beforeall-using-testcontainers","content":" Testcontainers is a Node.js library that supports starting Docker Containers from within tests and throwing them away afterwards.  To use it, first install it:  npm i -D testcontainers   After that, you can adjust the jest.setup.ts that is created when running npx askui init like in the following example starting the AskUI UI Controller container just before all instructions are run and connecting to it:  import { UiControlClient } from 'askui'; import { GenericContainer, StartedTestContainer } from 'testcontainers'; jest.setTimeout(60 * 1000 * 60); function getDockerImageName(): string { const askuiUiControllerVersion = 'v0.10.0'; const browser = 'firefox'; const browserVersion = '82.0.3'; const osArch = 'amd64'; return `askuigmbh/askui-ui-controller:${askuiUiControllerVersion}-${browser}-${browserVersion}-${osArch}`; } async function startTestContainer(): Promise&lt;StartedTestContainer&gt; { const container = await new GenericContainer(getDockerImageName()) .withEnv('ENABLE_VNC', 'true') .withEnv('SCREEN_RESOLUTION', '1920x1080') .withExposedPorts(6769, 5900) .start(); console.log(`VNC link: ${container.getHost()}:${container.getMappedPort(5900)}`); return container; } let testContainer: StartedTestContainer; // eslint-disable-next-line import/no-mutable-exports let aui: UiControlClient; beforeAll(async () =&gt; { testContainer = await startTestContainer(); aui = await UiControlClient.build({ uiControllerUrl: `http://127.0.0.1:${testContainer.getMappedPort(6769)}`, }); await aui.connect(); }); afterAll(async () =&gt; { aui.close(); await testContainer.stop(); }); export { aui };   ","version":"0.11.6","tagName":"h3"},{"title":"Connect via VNC​","type":1,"pageTitle":"Docker","url":"/docs/0.11.6/general/Integrations/containers#connect-via-vnc","content":" To check what is happening inside a running container, you can connect via VNC. For this, you need a VNC client like Remmina. When starting the Docker Container manually, you have to map the internal port 5900 to a free port on your machine that you, then, can connect to. When using the testcontainers example code, the VNC port to connect to is logged to the console.  When connecting, enter the password askui when asked.  Example of a VNC connection with a Chrome browser running inside a container:   ","version":"0.11.6","tagName":"h2"},{"title":"Databases","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Integrations/databases","content":"Databases caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.11.6"},{"title":"Continuous Integration","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Integrations/continuous-integration","content":"","keywords":"","version":"0.11.6"},{"title":"Github Actions​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.11.6/general/Integrations/continuous-integration#github-actions","content":" ","version":"0.11.6","tagName":"h2"},{"title":"AskUI-Runner Container: Get Workflows from AskUI Studio​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.11.6/general/Integrations/continuous-integration#askui-runner-container-get-workflows-from-askui-studio","content":" When you want to get the latest version of your workflows from AskUI Studio, the AskUI-Runner container needs a configuration file config.yaml to know where to pull them from.  The AskUI-Runner container downloads the workflows and runs them inside a docker container. You do not have to take care of any installation of tools on your side 🥳.  Set these environment variables for your pipeline:  ASKUI_WORKSPACE_ID=&lt;Your workspace id from AskUI Studio&gt; ASKUI_TOKEN=&lt;An access token from your AskUI Studio workspace&gt; ASKUI_INFERENCE_SERVER_URL=&lt;Use https://inference.askui.com if your are not on-premise&gt; ASKUI_WORKFLOW_ENDPOINT_URL=https://app-gateway-api.askui.com/prod/api/v1 DOCKER_USERNAME=&lt;Your Docker Hub username&gt; DOCKER_PASSWORD=&lt;Your Docker Hub password&gt;   Create a config.yaml inside your pipeline like this:  cat &lt;&lt; EOF &gt; config.yaml access_token: ${{ secrets.ASKUI_TOKEN }} inference_server_url: ${{ secrets.ASKUI_INFERENCE_SERVER_URL }} workspace_id: ${{ secrets.ASKUI_WORKSPACE_ID }} workflow_endpoint: prefixes: - workspaces/${{ secrets.ASKUI_WORKSPACE_ID }}/test-cases url: ${{ secrets.ASKUI_WORKFLOW_ENDPOINT_URL }}/workspaces/${{ secrets.ASKUI_WORKSPACE_ID }}/objects EOF   Execute your workflows with our AskUI-Runner container. Do not forget to login into Docker Hub 😉.  docker run --shm-size=&quot;2g&quot; --rm -v ${{ github.workspace }}/config.yaml:/home/askui/config.yaml -v ${{ github.workspace }}/allure-results:/home/askui/test_project/allure-results askuigmbh/askui-runner:v0.13.1-github   Generate Allure report: The run results are placed in allure-results where you can render your report from. Check the detailed examples for your pipeline technology.  Please check the full example file on GitHub.  ","version":"0.11.6","tagName":"h3"},{"title":"Without AskUI-Runner Container​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.11.6/general/Integrations/continuous-integration#without-askui-runner-container","content":" Download the workflows from AskUI Studio and place the folder test in the root of your repository.  Then implement the following steps in your pipeline:  Optional: Set up AskUI Controller as serviceSetup node in version 16.xInstall all dependencies: npm installRun tests with npm run test Set the environment variables: ASKUI_WORKSPACE_IDASKUI_TOKENASKUI_INFERENCE_SERVER_URLOptional: UI_CONTROLLER_URL if the UiController is running on a remote machine and not localhost or as a service inside your pipeline. For reports: Generate reportsDeploy/Send reports  Please check the full example file on GitHub.  ","version":"0.11.6","tagName":"h3"},{"title":"Gitlab CI​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.11.6/general/Integrations/continuous-integration#gitlab-ci","content":" ","version":"0.11.6","tagName":"h2"},{"title":"AskUI-Runner Container: Get Workflows from AskUI Studio​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.11.6/general/Integrations/continuous-integration#askui-runner-container-get-workflows-from-askui-studio-1","content":" When you want to get the latest version of your workflows from AskUI Studio, the AskUI-Runner container needs a configuration file config.yaml to know where to pull them from.  The AskUI-Runner container downloads the workflows and runs them inside a docker container. You do not have to take care of any installation of tools on your side 🥳.  Set these Gitlab variables for your pipeline:  ASKUI_WORKSPACE_ID=&lt;Your workspace id from AskUI Studio&gt; ASKUI_TOKEN=&lt;An access token from your AskUI Studio workspace&gt; ASKUI_INFERENCE_SERVER_URL=&lt;Use https://inference.askui.com if your are not on-premise&gt; ASKUI_WORKFLOW_ENDPOINT_URL=https://app-gateway-api.askui.com/prod/api/v1 DOCKER_USERNAME=&lt;Your Docker Hub username&gt; DOCKER_PASSWORD=&lt;Your Docker Hub password&gt;   Create a config.yaml inside your pipeline like this:  cat &lt;&lt; EOF &gt; config.yaml access_token: $ASKUI_TOKEN inference_server_url: $ASKUI_INFERENCE_SERVER_URL workspace_id: $ASKUI_WORKSPACE_ID workflow_endpoint: prefixes: - workspaces/${ASKUI_WORKSPACE_ID}/test-cases url: ${ASKUI_WORKFLOW_ENDPOINT_URL}/workspaces/${ASKUI_WORKSPACE_ID}/objects EOF   Do not forget to login into Docker Hub and enable Docker-In-Docker like this 😉:  services: - docker:dind before_script: - docker info - echo &quot;$DOCKER_PASSWORD&quot; | docker login --username $DOCKER_USERNAME --password-stdin   Execute your workflows with our AskUI-Runner container.  docker run --shm-size=&quot;2g&quot; --rm -v ./config.yaml:/home/askui/config.yaml -v ./allure-results:/home/askui/test_project/allure-results askuigmbh/askui-runner:v0.13.1-github   Generate Allure report: The run results are placed in allure-results where you can render your report from.  Check the detailed examples for your pipeline technology.  Please check the full example file on Gitlab.com.  ","version":"0.11.6","tagName":"h3"},{"title":"Without AskUI-Runner Container​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.11.6/general/Integrations/continuous-integration#without-askui-runner-container-1","content":" Download the workflows from AskUI Studio and place the folder test in the root of your repository.  Then implement the following steps in your pipeline:  Optional: Set up AskUI Controller as serviceSetup node in version 16.xInstall all dependencies: npm installRun tests with npm run test Set the environment variables: ASKUI_WORKSPACE_IDASKUI_TOKENASKUI_INFERENCE_SERVER_URLOptional: UI_CONTROLLER_URL if the UiController is running on a remote machine and not localhost or as a service inside your pipeline. For reports: Generate reportsDeploy/Send reports  Please check the full example file on Gitlab.com.  ","version":"0.11.6","tagName":"h3"},{"title":"Azure DevOps​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.11.6/general/Integrations/continuous-integration#azure-devops","content":" ","version":"0.11.6","tagName":"h2"},{"title":"AskUI-Runner Container: Get Workflows from AskUI Studio​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.11.6/general/Integrations/continuous-integration#askui-runner-container-get-workflows-from-askui-studio-2","content":" When you want to get the latest version of your workflows from AskUI Studio, the AskUI-Runner container needs a configuration file config.yaml to know where to pull them from.  The AskUI-Runner downloads the workflows and runs them inside a docker container. You do not have to take care of any installation of tools on your side 🥳.  Set these variables for your pipeline:  ASKUI_WORKSPACE_ID=&lt;Your workspace id from AskUI Studio&gt; ASKUI_TOKEN=&lt;An access token from your AskUI Studio workspace&gt; ASKUI_INFERENCE_SERVER_URL=&lt;Use https://inference.askui.com if your are not on-premise&gt; ASKUI_WORKFLOW_ENDPOINT_URL=https://app-gateway-api.askui.com/prod/api/v1 DOCKER_USERNAME=&lt;Your Docker Hub username&gt; DOCKER_PASSWORD=&lt;Your Docker Hub password&gt;   Create a config.yaml inside your pipeline like this:  cat &lt;&lt; EOF &gt; config.yaml access_token: $(ASKUI_TOKEN) inference_server_url: $(ASKUI_INFERENCE_SERVER_URL) workspace_id: $(ASKUI_WORKSPACE_ID) workflow_endpoint: prefixes: - workspaces/$(ASKUI_WORKSPACE_ID)/test-cases url: $(ASKUI_WORKFLOW_ENDPOINT_URL)/workspaces/$(ASKUI_WORKSPACE_ID)/objects EOF   Execute your workflows with our AskUI-Runner container. Do not forget to login into Docker Hub 😉.  echo &quot;$(DOCKER_PASSWORD)&quot; | docker login --username $(DOCKER_USERNAME) --password-stdin docker run --shm-size=&quot;2g&quot; --rm -v &quot;/$(pwd)/config.yaml:/home/askui/config.yaml&quot; -v &quot;/$(pwd)/allure-results:/home/askui/test_project/allure-results&quot; askuigmbh/askui-runner:v0.13.1-github   Generate Allure report: The run results are placed in allure-results where you can render your report from. Check the detailed examples for your pipeline technology.  - bash: | curl -o allure-commandline-2.10.0.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.10.0/allure-commandline-2.10.0.tgz sudo tar -zxf allure-commandline-2.10.0.tgz -C . echo &quot;Creating allure-report&quot; ./allure-2.10.0/bin/allure generate allure-results -o allure-report echo &quot;allure-report created&quot; # Install https://github.com/mclay/azure-pipeline-allure-report first - task: PublishAllureReport@1 displayName: 'Publish Allure Report' inputs: reportDir: 'allure-report'   Please check the full example file on GitHub.  ","version":"0.11.6","tagName":"h3"},{"title":"Without AskUI-Runner Container​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.11.6/general/Integrations/continuous-integration#without-askui-runner-container-2","content":" Download the workflows from AskUI Studio and place the folder test in the root of your repository.  Then implement the following steps in your pipeline:  Set the pipeline variables: ASKUI_WORKSPACE_IDASKUI_TOKENASKUI_INFERENCE_SERVER_URLOptional: UI_CONTROLLER_URL if the UiController is running on a remote machine and not localhost or as a service inside your pipeline. Setup docker and node in version 16.x  - task: DockerInstaller@0 inputs: dockerVersion: '17.09.0-ce' - task: NodeTool@0 inputs: versionSpec: '16.x' displayName: 'Install Node.js'   Start the UiController from our Docker image  - bash: | sudo ufw disable echo 'Start UIController' docker run -d -p 6769:6769 --cidfile container.cid askuigmbh/askui-ui-controller:v0.11.2-chrome-100.0.4896.60-amd64   Install all dependencies and run the workflow:  echo 'Run npm install' npm install echo 'Run AskUI' export ASKUI_TOKEN=$(ASKUI_TOKEN) export ASKUI_WORKSPACE_ID=$(ASKUI_WORKSPACE_ID) npm run test   For reports: Generate reportsDeploy/Send reports  - bash: | curl -o allure-commandline-2.10.0.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.10.0/allure-commandline-2.10.0.tgz sudo tar -zxf allure-commandline-2.10.0.tgz -C . echo &quot;Creating allure-report&quot; ./allure-2.10.0/bin/allure generate allure-results -o allure-report echo &quot;allure-report created&quot; # Install https://github.com/mclay/azure-pipeline-allure-report first - task: PublishAllureReport@1 displayName: 'Publish Allure Report' inputs: reportDir: 'allure-report'   Please check the full example file on GitHub. ","version":"0.11.6","tagName":"h3"},{"title":"Text and Element Selectors","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors","content":"","keywords":"","version":"0.11.6"},{"title":"Text Selectors​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#text-selectors","content":" When using AskUI for automated tests, text elements are playing a big role, since they typically appear more distinctively than other elements such as icons or text fields. Hence, knowing the benefits of using different text element-description can become critical in scaffolding a robust set of instructions.  AskUI provides four different element-descriptions to handle text elements:  containsText()withExactText()withText()withTextRegex()  For a convenient demonstration, we will use a Flutter web demo provided by Flutter.    ","version":"0.11.6","tagName":"h2"},{"title":"Basic Text Matching​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#basic-text-matching","content":" The simplest way to interact with a text element is to use withText(). Go to the demo app page and run the code below:  await aui.moveMouseTo().text('matrial').exec(); await aui.mouseLeftClick().exec();     withText() tries to find a text that matches the whole sequence. In most cases, you will want to stick to this method, as it supports Fuzzy Matching and tolerates misspelled text. Note that the above example code has two typos. matrial doesn't match the text in the demo app, which is Material, although AskUI will find the text element that roughly matches the text on the screen.    ","version":"0.11.6","tagName":"h3"},{"title":"Match a Sub-string within a Text​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#match-a-sub-string-within-a-text","content":" Even though the withText() is handy and quite reliable, you might face a case where you know only a fraction of the text element that you want to interact with. In such a case, containsText() is the element-description you might want to use:  await aui.moveMouseTo().text().containsText('Bottom').exec(); await aui.mouseLeftClick().exec();     Be aware that even if the containsText() also supports Fuzzy Matching, it won't match the whole sequence by just a few characters. Try to use this code with the given demo app:  // this will fail await aui.moveMouseTo().text().containsText('Bottm').exec();   You will notice that AskUI fails to match the given text Bottm, whereas this code will work:  // this will succeed await aui.moveMouseTo().text().containsText('Bottm appbar').exec(); // this will also succeed await aui.moveMouseTo().text().containsText('Bottom').exec();   The biggest difference between withText() and containsText() is whether it matches the text as a whole sequence or not. Matching many texts with a repeating affix could be a practical use case for the containsText().  It is recommended to experiment enough with these element-descriptions to find a better option that suits your specific case, since it's not easy to predict if the given text can be fuzzy-matched with target texts.    ","version":"0.11.6","tagName":"h3"},{"title":"Match the Exact Text​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#match-the-exact-text","content":" If you already know what text you are looking for, or if there are too many similar text elements, you can use the element-description withExactText().  From the main page of the demo app, go to Material-&gt;Data tables. You will see a table with different foods given with nutrition factors for each of them.  Let's say that we want to click on the items that has exactly 25.0 gm of Fat. In our demo app, only the Doughnut is the matching item. Run this code and see how withText() matches the text:   // Use this helper function to calculate the centroid of the detected elements. function getCentroid(element: any): any { let x = (element.bndbox.xmax - element.bndbox.xmin) / 2.0 + element.bndbox.xmin; let y = (element.bndbox.ymax - element.bndbox.ymin) / 2.0 + element.bndbox.ymin; return { x: x, y: y }; } // Find all the text elements that matches '25.0' const elts = await aui.get().text('25.0').exec(); // Then, iterate through the found elements and click on them for(let i=0; i&lt;elts.length; ++i){ const centroid = getCentroid(elts[i]); await aui.moveMouse(Math.round(centroid.x), Math.round(centroid.y)).exec(); await aui.mouseLeftClick().exec(); }     You will see that AskUI clicks not only the 25.0 but also the 26.0, which is the fat of the Apple pie. The result of this test code may differ in your case, because of the different screen resolution and the rendered-size of the demo app.  It will give you a clear idea where you will need to use the element-description withExactText() instead of withText(). Try to run the same code after replacing the withText() to withExactText():  // Find all the text elements that matches '25.0' exactly const elts = await aui.get().text().withExactText('25.0').exec(); // Then, iterate through the found elements and click on them for(let i=0; i&lt;elts.length; ++i){ const centroid = getCentroid(elts[i]); await aui.moveMouse(Math.round(centroid.x), Math.round(centroid.y)).exec(); await aui.mouseLeftClick().exec(); }     ","version":"0.11.6","tagName":"h3"},{"title":"Match Text with Regular Expression​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#match-text-with-regular-expression","content":" The element-description withTextRegex() supports Regular Expression to match any text in the most flexible way. Although it might be tricky to use regex due to its esoteric appearance, it is maybe one of the most versatile solutions when it comes to character matching.  On the same page of the demo app, let's say that we want to click on the items whose Calorie is between 300 and 500 (cal&gt;=300 &amp;&amp; cal&lt;500). Since regex doesn't support numeric comparison, we will try to match the digits in a sequence:  // Find all the text that matches the expression const cals = await aui.get().text().withTextRegex('[3-4][0-9]{2}').exec(); // Then, iterate through the found elements and click on them for(let i=0; i&lt;cals.length; ++i){ const coord = getCentroid(cals[i]); console.log(cals[i].text, coord); await aui.moveMouse(Math.round(coord.x), Math.round(coord.y)).exec(); await aui.mouseLeftClick().exec(); }     The regular expression [3-4][0-9]{2} means,  [3-4]: Match one character between 3 and 4.[0-9]: Match one character between 0 and 9.2: Repeat the previous expression ([0-9]) two times.  As the result, it will try to match every text that has a sequence starting with the digit 3 or 4, and then has any two digits in a row.  ","version":"0.11.6","tagName":"h3"},{"title":"Element Selectors​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#element-selectors","content":" caution This page is currently under construction. If you have any questions, please feel free to reach out to info@AskUI.com or book a meeting with Jonas over Calendly.  ","version":"0.11.6","tagName":"h2"},{"title":"Custom Elements​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#custom-elements","content":" caution Important: This increases the runtime quite a bit. So use it only if absolutely necessary.  ","version":"0.11.6","tagName":"h2"},{"title":"Overview​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#overview","content":" Custom Element Selection is a feature in AskUI that enables you to create custom element-descriptions for elements on the screen, instead of relying on the standard element-descriptions provided such as Button, Textfield, etc.  With this feature, you can define a custom element-description based on how the element is displayed on the screen. This can be particularly useful in situations where standard element-descriptions are unreliable due to the non-standard properties of the element. It provides greater flexibility and control, allowing you to tailor the automation to meet the specific needs of your application.  Here we will demonstrate how to use a custom element to explore Google Street View.  ","version":"0.11.6","tagName":"h3"},{"title":"Demonstration​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#demonstration","content":"   ","version":"0.11.6","tagName":"h3"},{"title":"Requirements​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#requirements","content":" AskUI - Follow this tutorial if you haven't installed it yet.Web Browser - We use Safari in this demonstration, but you can use any web browser you have.  ","version":"0.11.6","tagName":"h3"},{"title":"Understanding the customElement() in AskUI​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#understanding-the-customelement-in-askui","content":" customElement() is an element to look for on the screen that is defined by the user with a given image.  // Example of customElement() await aui .click() .customElement({ customImage: './logo.png', // required name: 'myLogo', // optional threshold: 0.9, // optional, defaults to 0.9 rotationDegreePerStep: 0, // optional, defaults to 0 imageCompareFormat: 'grayscale', // optional, defaults to 'grayscale' }) .exec();   Arguments​  customImage (string, required): A cropped image in the form of a base64 string or file path. name (string, optional): A unique name that can be used for filtering for the custom element. If not given, any text inside the custom image will be detected via OCR. threshold (number, optional): A threshold for how much a UI element needs to be similar to the custom element as defined. Takes values between 0.0 (== all elements are recognized as the custom element which is probably not what you want) and 1.0 (== elements need to look exactly like the customImage which is unlikely to be achieved as even minor differences count). Defaults to 0.9. rotationDegreePerStep (number, optional): Step size in rotation degree. Rotates the custom image by this step size until 360° is exceeded. The range is from 0 to 360. Defaults to 0. imageCompareFormat ('RGB' | 'grayscale', optional): The color compare style. grayscale compares the brightness of each pixel whereas RGB compares all three color. Defaults to grayscale.  Two Things to be Aware of When Using customElement()​  1) Create the Custom Image by Cropping it From The Actual Screen  To find a matching element from the screen, the custom image must be the same as it is displayed on the screen. By saying same in this sense, includes the size, rotation as well as the overlapping object, if there is any.    Note the left-bottom case of the illustration. A rotated element can be also matched, but only if everything else except the rotation are staying the same as it is displayed on the screen. If you can assure that your custom image is exactly the same as it is displayed on the screen + if you know the degree of the rotation, then you could consider using the rotationDegreePerStep parameter. And because AskUI will try to rotate the custom element for the whole revolution, a divisor of the rotated degree could be also used, e.g in the illustrated case, we can use not only 90 but also 45, 30, 15, etc. But since smaller degrees will require more iteration steps, it will increase the runtime by a notable amount. The simplest way to accomplish it might be to screen capture and crop the desired image from your screen directly. In Windows and macOS, you can use the built-in screen capture tool: Windows: Press windows + shift + s (Windows 10 or higher)macOS: Press cmd + shift + 4 In both cases, you will be asked to select a certain portion of the screen. On Windows, the captured image will be stored in the clipboard, so you will need to save it to an image file. On macOS, the image will be saved in the ~/Desktop by default.  tip The quality of the crop-out determines how good the element will be recognized. Make sure to: Save it as a PNG to avoid artifacts from compressionCrop it out as tight as possible. At best with no pixel space on the borders.  2) The Time of the Execution will Increase by a Notable Amount  To examine whether the custom image matches the given screen, AskUI iterates through the whole pixels of the given screen as well as the custom image. So it is likely to increase the runtime by a notable amount. Therefore, if the task could be accomplished with other element-descriptions such as icon(), button(), or text(), then it's maybe better to avoid using the customElement().  ","version":"0.11.6","tagName":"h3"},{"title":"Capture the Custom Element​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#capture-the-custom-element","content":" In this demonstration, we will search for a certain area in Google Street View. This can be enabled by pressing a button at the right corner of the Google Maps:    Can you see the yellow tiny human in the corner? We need an image of this human figure to interact with it. Let's make a screen capture of it. It shall look like this: Then save the image in your project's root directory with the name human-figure.png. The file tree of your project's root directory will be like this:  project_root/ ├─ node_modules/ ├─ test/ ├─ package.json ├─ tsconfig.json ├─ human-figure.png   ","version":"0.11.6","tagName":"h3"},{"title":"Write the AskUI Code​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#write-the-askui-code","content":" If you are prepared with the image above, let's jump into our code:  import { aui } from './helper/jest.setup'; describe('Explore the world in google maps', ()=&gt;{ it('open web browser and go to google maps', async ()=&gt;{ // open the start menu/spotlight to search for the web browser await aui.pressTwoKeys('command', 'space').exec(); // for macOS // await aui.pressKey('command').exec(); // for Windows await aui.waitFor(250).exec(); // wait for the start menu to open await aui.type('safari').exec(); // type the name of the web browser // await aui.type('chrome').exec(); // if you are using another web browser, replace the name to it await aui.pressKey('enter').exec(); // open the web browser await aui.waitFor(1000).exec(); // wait for the web browser to open await aui.type('https://maps.google.com').exec(); // type the url of the website await aui.pressKey('enter').exec(); // open the website await aui.waitFor(1000).exec(); // wait for the website to load }); it('search for a location', async ()=&gt;{ await aui.type('machu picchu').exec(); // type the name of the location await aui.pressKey('enter').exec(); // search for the location await aui.waitFor(2000).exec(); // wait for the map to load await aui.pressKey(',').exec(); // hide the side panel }); it('enable street view', async ()=&gt;{ // now we look for our custom element on the map // move the mouse to the custom element await aui.moveMouseTo() .customElement({ customImage: &quot;./human-figure.png&quot;, name: &quot;street-view-icon&quot;, threshold: 0.9, }) .exec(); // click and hold on the custom element await aui.mouseToggleDown().exec(); // drag the custom element(our human) to the location we want to explore // note the offset of -50 pixels along the y axis // we drag the human 10 pixels higher than the location Aguas Calientes await aui.moveMouseRelativelyTo(0, -10).text('Aguas Calientes').exec(); // release the mouse button await aui.mouseToggleUp().exec(); }); });   After successfully running the code, you will be able to see the landscape of Machu Picchu, the most iconic citadel of the lost empire Inca. It is possible that you end up with a plain Google Map without having the Street View enabled. It might be caused by various reasons, but the most likely scenario is due to the different resolutions of the screen (your display can have a different resolution than mine). You could try to adjust the amount of the pixel offset that is given to the moveMouseRelativelyTo(), for example, try with moveMouseRelativelyTo(-5, -15).  ","version":"0.11.6","tagName":"h3"},{"title":"Breaking Down the Code​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#breaking-down-the-code","content":" 1) Open the Web Browser and Go To the Desired Website​  One notable part of this step is the waitFor() after each execution. We have used it in three different lines of this code block. Check out the respective parts and adjust the amount of time to wait until the process is finished. It may take more or less time depending on the condition of your device and internet connection:  it('open web browser and go to google maps', async ()=&gt;{ // open the start menu/spotlight to search for the web browser await aui.pressTwoKeys('command', 'space').exec(); // for macOS // await aui.pressKey('command').exec(); // for Windows await aui.waitFor(250).exec(); // wait for the start menu to open await aui.type('safari').exec(); // type the name of the web browser await aui.pressKey('enter').exec(); // open the web browser await aui.waitFor(1000).exec(); // wait for the web browser to open await aui.type('https://maps.google.com').exec(); // type the url of the website await aui.pressKey('enter').exec(); // open the website await aui.waitFor(1000).exec(); // wait for the website to load });   Also, don't forget to change the key to press and the name of the web browser based on your condition.  2) Search for the Location​  Here we type our desired keyword into the textfield of Google Maps. As the textfield gets focused automatically, we can directly type in the keyword to the textfield:  it('search for a location', async ()=&gt;{ await aui.type('machu picchu').exec(); // type the name of the location await aui.pressKey('enter').exec(); // search for the location await aui.waitFor(2000).exec(); // wait for the map to load await aui.pressKey(',').exec(); // hide the side panel });   Note that we also press the ,(comma) key to hide the side panel of Google Maps. This is for hiding unnecessary information from the screen.  ","version":"0.11.6","tagName":"h3"},{"title":"Drag the Human Icon to the Desired Location​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#drag-the-human-icon-to-the-desired-location","content":" Finally, we drag our human, which we defined as our Custom Element, to the desired location.Firstly, we move the mouse cursor to our custom element.For dragging the mouse, we use the mouseToggleDown() to press-and-hold the mouse left button.After that, we move the mouse to the desired location.Thereafter, we use mouseToggleUp() to release the mouse button.  it('enable street view', async ()=&gt;{ // now we look for our custom element on the map // move the mouse to the custom element await aui.moveMouseTo() .customElement({ customImage: &quot;./human-figure.png&quot;, name: &quot;maps&quot;, threshold: 0.9, }) .exec(); // click and hold on the custom element await aui.mouseToggleDown().exec(); // drag the custom element(our human) to the location we want to explore // note the offset of -10 pixels in the y axis // we drag the human to 10 pixels higher than the location Aguas Calientes await aui.moveMouseRelativelyTo(0,-10).text('Aguas Calientes').exec(); // release the mouse button await aui.mouseToggleUp().exec(); });   Note the optional parameters for the customElement(), especially the threshold that is set to 0.9.This parameter can be set from 0.0 up to 1.0. 0.0 will consider every element on the screen as matched with the given image.1.0 will examine the given elements as strict as possible, so you might end up without any matching element found. So, the best scenario to set the threshold might be: Make the custom image to be as precise as possible (cropping from the screen). Keep the threshold relatively higher, but below 1.0  ","version":"0.11.6","tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#conclusion","content":" If you plan to program an automation where you have elements with non-standard properties, you might want to consider using the custom element feature of AskUI. But as mentioned above, keep in mind that, as a trade-off, it consumes more time than other features. Taking it into account, using a custom element to interact with the given UI can be a huge help, especially if the element lacks standard properties such as tag or appearance.  If you got any issues while following this article, don't hesitate to ask for help in our Outverse-Community. We are more than glad to hear about your experience and help!  ","version":"0.11.6","tagName":"h3"},{"title":"Recommended Practices​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#recommended-practices","content":" This page will give you examples of how to use AskUI efficiently and effectively.  ","version":"0.11.6","tagName":"h2"},{"title":"General Considerations on Speed of Inference for Different Element-Descriptions​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#general-considerations-on-speed-of-inference-for-different-element-descriptions","content":" Submodel\tTasks\tSpeedObject Detector\tCommon elements, e.g. a button or textfield\tfast 🚀 Icon Classifier\tPredict the class of an icon, e.g., a user icon\tfast 🚀 Optical Character Recognition (OCR)\tRecognize text\tfast 🚀 Custom Element Detector\tSearch via an image inside the screen\tslow 🐌  Avoid Optical Character Recognition (OCR) on Too Many Element​  If you use containsText(), withText(), withExactText() or withTextRegex() OCR is applied to all elements detected on your screen. This can slow down AskUI. It is more efficient to narrow down the elements first. For example, if you want to click a button with a specific text you should select all buttons first.  // Do this await aui.click().button('See here').exec(); await aui.click().text('Sign in').exec(); // And NOT this await aui.click('See here').exec(); await aui.click('Sign in').exec();   Avoid Custom Element Detection if Possible​  If you use customElement() you are doing an image-in-image search. Use this sparingly only for specific custom elements as the execution time is slow!  // Do this await aui.click().button().withText('Login').exec(); await aui.click().text('Overview').exec(); // And NOT this await aui.click().customElement({ customImage: '.../login_button.png', name: 'login button', }).exec(); await aui.click().customElement({ customImage: '.../text_overview.png', name: 'overview button', }).exec();   ","version":"0.11.6","tagName":"h3"},{"title":"Scrolling​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#scrolling","content":" When you use AskUI you can only interact with elements that you can see on your screen. Therefore you have to scroll down/sideways to interact with currently invisible elements.  Scrolling on Touch Displays​  On touch displays you have to recreate the swipe gesture:  // Touch the display with your finger, move finger to the left, release await aui.mouseToggleDown().exec() await aui.moveMouseRelatively(-1500, 0).exec() await aui.mouseToggleUp().exec()   Scrolling With Mouse Wheel​  If you want to scroll with your mouse wheel you can use the scroll() action:  // Scroll 10 down in y direction&lt;&gt; await aui.scroll(0, -10).exec()   Scrolling With Key Press​  If you want to scroll with a key press you could use your arrow keys (up, down, left, right ) or the pagedown-key.  // Press down arrow key await aui.pressKey('down').exec() // Press up arrow key await aui.pressKey('up').exec() // Scroll down a page await aui.pressKey('pagedown').exec() // Scroll up a page await aui.pressKey('pageup').exec()   ","version":"0.11.6","tagName":"h3"},{"title":"Wait for an Element to Appear​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.11.6/general/Element Selection/text-and-element-selectors#wait-for-an-element-to-appear","content":" AskUI implements a conservative retry strategy to wait for an element to appear. But sometimes this is not long enough. You can wait for an element to appear with the following helper function:  // Retry the command 5 times with a // wait time of 2 seconds between each try async function waitUntil(AskUICommand: () =&gt; Promise&lt;void&gt;, maxTry = 5) { try { await AskUICommand(); } catch (error) { if (maxTry == 0) { throw error } console.log(`Retry predicting command, ${maxTry} tries left`) await aui.waitFor(2000).exec(); await waitUntil(AskUICommand, maxTry - 1) } } // Wait for the text 'Github' to be displayed await waitUntil( async () =&gt; aui.expect().text('Github').exists().exec() );  ","version":"0.11.6","tagName":"h3"},{"title":"Reporting","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Integrations/reporting","content":"","keywords":"","version":"0.11.6"},{"title":"Installation​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#installation","content":" Install @askui/askui-reporters as a dev-dependency:  npm install --save-dev @askui/askui-reporters   ","version":"0.11.6","tagName":"h2"},{"title":"AskUIAllureStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#askuiallurestepreporter","content":" Add the reporter to the UiControlClient in jest.setup.ts:  import { AskUIAllureStepReporter } from &quot;@askui/askui-reporters&quot;; ... const reporterConfig: ReporterConfig = { withScreenshots: 'always', // See below for possible values withDetectedElements: 'always', // See below for possible values } aui = await UiControlClient.build({ reporter: new AskUIAllureStepReporter( reporterConfig ) }); ...   You can pass a ReporterConfig object to the reporter to configure the level of detail for screenshots and detected elements.  There are four possible values (See the @askui/askui-reporters README for a detailed explanation):  onFailure (Default for both)requiredbeginalways  ","version":"0.11.6","tagName":"h2"},{"title":"Configure beforeEach() and afterEach() in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#configure-beforeeach-and-aftereach-in-jestsetupts","content":" The UiControlClient retrieves the videos and images from your UiController. You have to implement beforeEach() and afterEach() in jest.setup.ts to start the recording and then add it to your report:  Allure Reporter  beforeEach(async () =&gt; { await aui.startVideoRecording(); }); afterEach(async () =&gt; { await aui.stopVideoRecording(); const video = await aui.readVideoRecording(); await AskUIAllureStepReporter.attachVideo(video); });   ","version":"0.11.6","tagName":"h3"},{"title":"Enable the Test Environment @askui/jest-allure-circus in jest.config.ts​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#enable-the-test-environment-askuijest-allure-circus-in-jestconfigts","content":" Install @askui/jest-allure-circus environment:  npm install --save-dev @askui/jest-allure-circus   import type { Config } from '@jest/types'; const config: Config.InitialOptions = { preset: 'ts-jest', setupFilesAfterEnv: ['./helper/jest.setup.ts'], sandboxInjectedGlobals: [ 'Math', ], // Enables the test environment for Allure testEnvironment: '@askui/jest-allure-circus', }; // eslint-disable-next-line import/no-default-export export default config;   ","version":"0.11.6","tagName":"h3"},{"title":"AskUIJestHtmlStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#askuijesthtmlstepreporter","content":" info Due to restrictions of jest-html-reporters you can either have screenshots or video with this reporter but not both at the same time. For screenshots omit the beforeEach() and afterEach() hooks in jest.setup.ts. For video do not configure a reporter in your UiControlClient.  ","version":"0.11.6","tagName":"h2"},{"title":"Install ffmpeg On Your System​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#install-ffmpeg-on-your-system","content":" To use this reporter you have to have ffmpeg installed on your system (including all necessary encoding libraries like libmp3lame or libx264).  Please follow the installation instructions for your system.  ","version":"0.11.6","tagName":"h3"},{"title":"Enable Reporter in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#enable-reporter-in-jestsetupts","content":" Add the reporter to the UiControlClient in jest.setup.ts:  // Do not forget this import at the start of the file! import { AskUIJestHtmlStepReporter } from &quot;@askui/askui-reporters&quot;; ... aui = await UiControlClient.build({ reporter: new AskUIJestHtmlStepReporter({ withScreenshots: 'always' as const, // See below for possible values withDetectedElements: 'always' as const, // See below for possible values }) }); ...   You can pass a ReporterConfig object to the reporter to configure the level of detail for screenshots and detected elements:  onFailure (Default for both)requiredbeginalways  ","version":"0.11.6","tagName":"h3"},{"title":"Configure beforeEach() and afterEach() in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#configure-beforeeach-and-aftereach-in-jestsetupts-1","content":" import path from &quot;path&quot;; import { AskUIJestHtmlStepReporter } from &quot;@askui/askui-reporters&quot;; beforeEach(async () =&gt; { await aui.startVideoRecording(); }); afterEach(async () =&gt; { await aui.stopVideoRecording(); const video = await aui.readVideoRecording(); await AskUIJestHtmlStepReporter.attachVideo(video); });   ","version":"0.11.6","tagName":"h3"},{"title":"Enable the Jest-Html-Reporters in jest.config.ts​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#enable-the-jest-html-reporters-in-jestconfigts","content":" Install jest-html-reporters environment:  npm install --save-dev jest-html-reporters   import type { Config } from &quot;@jest/types&quot;; const config: Config.InitialOptions = { preset: &quot;ts-jest&quot;, testEnvironment: &quot;node&quot;, setupFilesAfterEnv: [&quot;./helper/jest.setup.ts&quot;], sandboxInjectedGlobals: [&quot;Math&quot;], reporters: [&quot;default&quot;, &quot;jest-html-reporters&quot;], }; // eslint-disable-next-line import/no-default-export export default config;   ","version":"0.11.6","tagName":"h3"},{"title":"AskUIXRayStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#askuixraystepreporter","content":" info Due to restrictions this reporter only works when you run your workflows one after another (default for AskUI)!  ","version":"0.11.6","tagName":"h2"},{"title":"Enable and Configure the AskUIXRayStepReporter in askui-helper.ts (former jest.setup.ts)​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#enable-and-configure-the-askuixraystepreporter-in-askui-helperts-former-jestsetupts","content":" You have to do a few things in your askui-helper.ts (former jest.setup.ts) to enable the AskUIXRayStepReporter:  info We will try to move this into the custom testEnvironment we provide.  Import the reporterInitialize the reporterAdd it to the UiControlClientModify before beforeEach() and afterEach() hook to create/finish TestEntriesAdd writing the report to afterAll() hook  import { UiControlClient, UiController } from 'askui'; /* 1 Import the reporter */ import { AskUIXRayStepReporter } from '@askui/askui-reporters'; ... /* 2 Initialize the reporter */ let xRayReporter = new AskUIXRayStepReporter({ withScreenshots: 'always', }); beforeAll(async () =&gt; { ... aui = await UiControlClient.build({ credentials: { workspaceId: '&lt;your workspace id&gt;', token: '&lt;your access token&gt;', }, /* 3 Enable reporter */ reporter: xRayReporter, }); await aui.connect(); }); /* 4 Create TestEntry with name of test from it-block */ beforeEach(async () =&gt; { xRayReporter.createNewTestEntry(global.testName); }); /* 4 Finish TestEntry with the test status */ afterEach(async () =&gt; { xRayReporter.finishTestEntry(global.testStatus); }); afterAll(async () =&gt; { /* 5 Writing the report */ await xRayReporter.writeReport(); aui.disconnect(); await uiController.stop(); }); export { aui };   ","version":"0.11.6","tagName":"h3"},{"title":"Configure jest-xray-environment in jest.config.ts​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#configure-jest-xray-environment-in-jestconfigts","content":" For the AskUIXRayStepReporter step reporter to work properly you need a special testEnvironment that provides the names from the it-blocks used to create the JSON-Objects for each test. Configure the testEnvironment in your jest.config.ts as shown in the code below:  import type { Config } from '@jest/types'; const config: Config.InitialOptions = { preset: 'ts-jest', // This uses cjs module system // Replace cjs with esm if your project uses esm testEnvironment: '@askui/askui-reporters/dist/cjs/xray/jest-xray-environment.js', setupFilesAfterEnv: ['./helpers/askui-helper.ts'], sandboxInjectedGlobals: [ 'Math', ], reporters: [ &quot;default&quot;, &quot;jest-junit&quot; ] }; // eslint-disable-next-line import/no-default-export export default config;   ","version":"0.11.6","tagName":"h3"},{"title":"AskUIAnnotationStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#askuiannotationstepreporter","content":" ","version":"0.11.6","tagName":"h2"},{"title":"Enable and Configure the AskUIAnnotationStepReporter in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#enable-and-configure-the-askuiannotationstepreporter-in-jestsetupts","content":" import { AskUIAnnotationStepReporter, AnnotationLevel } from '@askui/askui-reporters'; ... aui = await UiControlClient.build({ ... reporter: new AskUIAnnotationStepReporter( // AnnotationLevel.ON_FAILURE, /* Uncomment and change to AnnotationLevel.ALL for reporting at every step */ // folderPath: &quot;report&quot;, /* Uncomment and change property for different folder */ // fileNameSuffix: &quot;_testStep_annotation&quot; /* Uncomment and change property for different file name suffix */ ), }); ...   AnnotationLevel is implemented as an enum. You have two options:  ON_FAILURE (Default Value): After a step failedALL: After every step  folderPath is the folder name, relative to the root of your project, the report-files will be saved to.  Default value: report  fileNameSuffix: The suffix for every report-file.  The generated report-filename has the following name convention: ** {YYYYYYMMDDTHHmmsssss}_{passed|failed}{fileNameSuffix}.html** Example: 20230922072153421_failed_testStep_annotation.html  ","version":"0.11.6","tagName":"h3"},{"title":"Enable Multiple Reporters​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#enable-multiple-reporters","content":" You can enable multiple reporters simultaneously by passing an array of reporters in the reporter property like this:  aui = await UiControlClient.build({ reporter: [ new AskUIAnnotationStepReporter( AnnotationLevel.ALL, &quot;annotation_report&quot;, &quot;_annotation&quot; ), new AskUIJestHtmlStepReporter({ withScreenshots: 'always' as const, // See below for possible values withDetectedElements: 'always' as const, // See below for possible values }) ], });   caution The testEnvironment setting has to be the SAME for all reporters in the array! The following table shows which reporters can be enabled together.  \tAskUIAllureStepReporter\tAskUIJestHtmlStepReporter\tAskUIAnnotationStepReporter\tAskUIXRayStepReporterAskUIAllureStepReporter ❌\t❌\t❌ AskUIJestHtmlStepReporter\t❌ ✅\t✅ AskUIAnnotationStepReporter\t❌\t✅ ✅ AskUIXRayStepReporter\t❌\t✅\t✅\t  ","version":"0.11.6","tagName":"h2"},{"title":"Implement Your Own Reporter​","type":1,"pageTitle":"Reporting","url":"/docs/0.11.6/general/Integrations/reporting#implement-your-own-reporter","content":" To write your own reporter you have to implement AskUI's Reporter interface. It offers three optional methods you can overwrite to adapt to your specific reporter framework:  export interface Reporter { config?: ReporterConfig; onStepBegin?(step: Step): Promise&lt;void&gt;; onStepRetry?(step: Step): Promise&lt;void&gt;; onStepEnd?(step: Step): Promise&lt;void&gt;; }   See the Example implementation for Allure on how that is used to extract the screenshot before/after each step and how to record a video of each step. ","version":"0.11.6","tagName":"h2"},{"title":"Device Farms","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Integrations/device-farms","content":"Device Farms caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.11.6"},{"title":"Visual Regression","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Integrations/visual-regression","content":"","keywords":"","version":"0.11.6"},{"title":"Install jest-image-snapshot​","type":1,"pageTitle":"Visual Regression","url":"/docs/0.11.6/general/Integrations/visual-regression#install-jest-image-snapshot","content":" In your terminal, navigate into the folder where you initialized AskUI while following our Getting Started (Linux, macOS)  Install jest-image-snapshot as a dev-dependency  npm install --save-dev jest-image-snapshot   ","version":"0.11.6","tagName":"h2"},{"title":"Integration​","type":1,"pageTitle":"Visual Regression","url":"/docs/0.11.6/general/Integrations/visual-regression#integration","content":" The package provides a function toMatchImageSnapshot which implements Jest's Matchers&lt;R&gt; interface making it a Jest matcher that can be used with Jest's expect().  You have to add this matcher to Jest with expect.extend like this in your workflow file (See the docs):  const { toMatchImageSnapshot } = require('jest-image-snapshot'); expect.extend({ toMatchImageSnapshot });   Now the only thing you have to provide for a regression test in your workflows is an image to the function expect() as Buffer:  expect(imageBuffer).toMatchImageSnapshot();   You can use AskUI to get the screenshot as a base64 encoded string. The string is in the format of a data URL. So you have to strip the scheme data:[&lt;mediatype&gt;][;base64], away because it is not a valid image with the scheme. Here is the full code:  const annotate = await aui.annotate(); const imageBase64 = annotate.image; // Strip away this: data:image/png;base64, // Not valid png -&gt; Only if used as a data URL let imageBuffer = Buffer.from( imageBase64.split('base64,')[1], 'base64'); expect(imageBuffer).toMatchImageSnapshot();   ","version":"0.11.6","tagName":"h2"},{"title":"Get It to Work with TypeScript​","type":1,"pageTitle":"Visual Regression","url":"/docs/0.11.6/general/Integrations/visual-regression#get-it-to-work-with-typescript","content":" When you run this as it is you will get an error.  This is because Jest's typings in jest.d.ts do not include toMatchImageSnapshot.  Luckily TypeScript has a mechanism called Declaration Merging. When we create a file jest.d.ts in our project and declare our matcher there, TypeScript will pick it up.  declare namespace jest { interface Matchers { toMatchImageSnapshot(): CustomMatcherResult; } }   ","version":"0.11.6","tagName":"h2"},{"title":"How Jest-Image-Snapshot Works​","type":1,"pageTitle":"Visual Regression","url":"/docs/0.11.6/general/Integrations/visual-regression#how-jest-image-snapshot-works","content":" Explanation from the repository:  Given an image (Buffer instance with PNG image data) the toMatchImageSnapshot() matcher will create an image_snapshots directory in the directory the test is in and will store the baseline snapshot image there on the first run. Note that if customSnapshotsDir option is given then it will store baseline snapshot there instead. On subsequent test runs the matcher will compare the image being passed against the stored snapshot. To update the stored image snapshot run Jest with --updateSnapshot or -u argument. All this works the same way as Jest snapshots.  You also want to check out the options you can provide to toMatchImageSnapshot() to fine-tune the behavior. For example you might want to set a threshold for a mismatch so that minimal differences do not fail a run:  expect(image).toMatchImageSnapshot({ failureThreshold: 0.01, failureThresholdType: 'percent' });  ","version":"0.11.6","tagName":"h2"},{"title":"Deprecated Endpoints","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Troubleshooting/deprecated-endpoints","content":"Deprecated Endpoints If you are using the AskUI library you may see this warning: This endpoint will deprecate. Please upgrade your AskUI version This means that you are using an AskUI version, which will stop working in the near future. You can upgrade your AskUI version with the following command: npm install askui@latest If this does not work, try the following steps: Delete your node_modules folderCheck the latest version of askui in your package.json3 Run npm install to reinstall AskUI","keywords":"","version":"0.11.6"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Troubleshooting","content":"","keywords":"","version":"0.11.6"},{"title":"Pages​","type":1,"pageTitle":"Troubleshooting","url":"/docs/0.11.6/general/Troubleshooting#pages","content":" Cannot find Element ErrorJestLinuxWindowsmacOSproxyipv6Deprecated Endpoints  Support  Join our Outverse-Community to get help from fellow users and AskUI staff. ","version":"0.11.6","tagName":"h2"},{"title":"Terminology","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Terminology","content":"Terminology Term\tMeaningaccess token\tGives you access to the AskUI inference in combination with your workspace id. Every access token has an expiry date and is assigned to exactly one workspace. action\tA method in the AskUI Control Client API that describes an action to be taken against the operating system. For example click(), type(). annotation\tMarked area around an element with metadata name, text, and bounding box coordinates. automation\tA system of multiple connected workflows. bounding box\tRectangle described by coordinates that describe an element's location. Displayed visually as red rectangle. credentials\tCombination of workspace id and access token living in the same workspace. element\tA user interface component which websites and blocks are build from. element-description\tA description for a UI element. In the AskUI Control Client API, for example, it is the coded description like button() or textfield().contains().text('Email'). inference\tThe process of annotating a user interface. inference server\tBackend which performs the inference. instruction\tSingle AskUI directive which usually has following parts: action + (optional)element-description. interactive annotation\tExploring the annotations of a user interface through an annotated screenshot. UI Controller\tService to control inputs and observe the visuals on the operating system. UI Control Client\tRetrieves the annotations from the inference server and uses the given instructions to execute inputs on the operating system through the UI Controller. User Portal\tIn the AskUI User Portal you can create access tokens for your workspace. workflow\tA set of instructions to complete a single task workspace\tEvery registered user has exactly one workspace. Every workspace can contain multiple access tokens. workspace id\tThe id of your workspace. Gives you access to the AskUI inference in combination with your access token.","keywords":"","version":"0.11.6"},{"title":"Cannot Find Element Error","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Troubleshooting/cannot_find_element_error","content":"","keywords":"","version":"0.11.6"},{"title":"Use Interactive Annotation to Debug​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.11.6/general/Troubleshooting/cannot_find_element_error#use-interactive-annotation-to-debug","content":" When you develop an automation you can use interactive annotation to extract filters as described on our interactive annotation page.  This gif illustrates the process:  If an element-description derived through this method does not work you may run the interactive annotation again and check if AskUI gives you the same element-description. Sometimes elements are hard to identify correctly, like icons or specific fonts. Read the next sections on how to tackle this 🙂  ","version":"0.11.6","tagName":"h2"},{"title":"Selecting Icons​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.11.6/general/Troubleshooting/cannot_find_element_error#selecting-icons","content":" There are millions of different icon sets out there. Detecting them all reliable is nearly impossible.  You can use three strategies to make your instructions more stable.  ","version":"0.11.6","tagName":"h2"},{"title":"1. Use Relative Element-Descriptors​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.11.6/general/Troubleshooting/cannot_find_element_error#1-use-relative-element-descriptors","content":" Often there is text near a specific icon. You can use this to your advantage, like in the following example, where the icon below a specific text is clicked. See our guide about relational element-descriptors to understand how those work:  await aui .click() .icon() .below() .text() .withText('Please Enter your Name').exec();   ","version":"0.11.6","tagName":"h3"},{"title":"2. Use Generic Element-Descriptor​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.11.6/general/Troubleshooting/cannot_find_element_error#2-use-generic-element-descriptor","content":" It could be the case that the target element is not detected correctly, e.g, an icon could possibly be detected as a toggle or checkbox and vice versa. In such cases, the generic element-descriptor element() could be a good option.  Be aware that element() alone specifies no particular property. It is recommended to be used in conjunction with a relational element descriptor:  await aui .click() .element() .below() .text() .withText('Please Enter your Name').exec();   This method is not restricted to icon elements, but can also be used for a wide range of elements.  ","version":"0.11.6","tagName":"h3"},{"title":"3. Use Custom Element Selection​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.11.6/general/Troubleshooting/cannot_find_element_error#3-use-custom-element-selection","content":" Custom element selection is your last resort because it is slow as it uses image-in-image search. Check out our Google Street View Tutorial to see how you can make use of it.  ","version":"0.11.6","tagName":"h3"},{"title":"Selecting Image​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.11.6/general/Troubleshooting/cannot_find_element_error#selecting-image","content":" Images are supposed to have a very certain visual property.  An image is expected to have a color contrasting against the background.An image is expected to have a rectangular shape. (rounded corner in a certain degree can be accepted)  Generally speaking, everything on the screen can be an image. For example, icons on a website are actually images. But in terms of visual semantics, we don't deal with the notion of image in general. So it is worth knowing that the above two conditions are critical when using the image() descriptor.  ","version":"0.11.6","tagName":"h2"},{"title":"Selecting Text​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.11.6/general/Troubleshooting/cannot_find_element_error#selecting-text","content":" OCR is tricky and we are working hard to improve it. But you will encounter cases where some text may not be recognized reliably depending on the font size, style or typeface:  ","version":"0.11.6","tagName":"h2"},{"title":"1. Missing Whitespaces Between Words​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.11.6/general/Troubleshooting/cannot_find_element_error#1-missing-whitespaces-between-words","content":" You can guard against missing whitespaces with withTextRegex():  // Use [\\\\s]{0,1} as a replacement for whitespace await aui .click() .text() .withTextRegex('your[\\\\s]{0,1}name').exec();   ","version":"0.11.6","tagName":"h3"},{"title":"2. Cut off characters at the start/end​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.11.6/general/Troubleshooting/cannot_find_element_error#2-cut-off-characters-at-the-startend","content":" For cut-off characters you can omit the first/last character:  // Omit first and last character of 'your name' await aui .click() .text() .withText('your name').exec();   ","version":"0.11.6","tagName":"h3"},{"title":"Missing Permissions for UiController on macOS​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.11.6/general/Troubleshooting/cannot_find_element_error#missing-permissions-for-uicontroller-on-macos","content":" AskUI controls your operating system and macOS is very restrictive in giving access to third-party applications (which is a good thing actually!). The AskUI UiController needs to be given access for Screen Recording and Accessibility. See our troubleshooting macOS page. ","version":"0.11.6","tagName":"h2"},{"title":"Jest","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Troubleshooting/jest","content":"","keywords":"","version":"0.11.6"},{"title":"Termination Error​","type":1,"pageTitle":"Jest","url":"/docs/0.11.6/general/Troubleshooting/jest#termination-error","content":" Jest sometimes has problems terminating correctly. If this happens, you can see the following error message:  Jest did not exit one second after the test run has completed. This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.   As described in the error message Jest has problems stopping because of some processes which are still running. This can cause problems in your CI/CD pipeline because your pipeline can't continue after getting this error.  A solution is to force Jest to stop. For this case Jest provides the --forceExit flag:  npx jest --config ./test/jest.config.ts --forceExit  ","version":"0.11.6","tagName":"h2"},{"title":"Linux","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Troubleshooting/linux","content":"","keywords":"","version":"0.11.6"},{"title":"Wayland​","type":1,"pageTitle":"Linux","url":"/docs/0.11.6/general/Troubleshooting/linux#wayland","content":" We do not yet support the windowing system Wayland for any Linux distribution. So you are going to see multiple errors when trying to run AskUI instructions or may not even be able to start the UI Controller.  You can check if you are running on Wayland with  echo $XDG_SESSION_TYPE   If it says &quot;wayland&quot;, you guessed it, you are running on Wayland.  As a solution, you can switch to Xorg instead of Wayland (how to switch to Xorg).  ","version":"0.11.6","tagName":"h2"},{"title":"libfuse2​","type":1,"pageTitle":"Linux","url":"/docs/0.11.6/general/Troubleshooting/linux#libfuse2","content":" If you are using Ubuntu 22.04 or later, you need to install libfuse before using AskUI lib since it's no longer installed by default.  libfuse2 can be installed with:  sudo apt-get update sudo apt-get install libfuse2  ","version":"0.11.6","tagName":"h2"},{"title":"IPv6","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Troubleshooting/ipv6","content":"IPv6 By default, the UI Controller which the AskUI lib starts and interacts with (you can also start it manually) is started at IP address 127.0.0.1 (IPv4 IP address that localhost normally resolves to). To use IPv6, e.g., because you disabled IPv4, you need to start the UI Controller manually from the command line providing --host ::1 (assuming you want to use IP address ::1, otherwise provide a different address) and provide the uiControllerUrl when constructing the UiControlClient (by default, in the &lt;project_dir&gt;/test/helper/jest.setup.ts): aui = await UiControlClient.build({ uiControllerUrl: 'http://[::1]:6769', // other client args... }); For example, starting the UI Controller (version latest, for other versions replace the respective part of the path) on macOS from your project's root directory is done like this: ./node_modules/askui/dist/release/latest/darwin/askui-ui-controller.app --args --host ::1 On other operating systems the path is different: # Windows start ./node_modules/askui/dist/release/latest/win32/askui-ui-controller.exe --args --host ::1 # Linux ./node_modules/askui/dist/release/latest/linux/askui-ui-controller --args --host ::1 ","keywords":"","version":"0.11.6"},{"title":"macOS","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Troubleshooting/mac-os","content":"","keywords":"","version":"0.11.6"},{"title":"Elements Can't Be Found / Annotated Screen Empty / UI Controller not starting​","type":1,"pageTitle":"macOS","url":"/docs/0.11.6/general/Troubleshooting/mac-os#elements-cant-be-found--annotated-screen-empty--ui-controller-not-starting","content":"   macOS sometimes does not recognize an installation of an AskUI UI Controller and, therefore, does not give it proper permissions although it looks like it.  You can fix this, by heading over to System Preferences &gt; Security &amp; Privacy. Open the Privacy tab and check if you can find the askui-ui-controller under Screen Recording and Accessibility.  If yes, revoke its permissions by unchecking the corresponding checkboxes and removing the application from each list by clicking the minus (-) button.    Head over to the installation of the AskUI UI Controller. If you did not install it manually, you can find it under node_modules/askui/dist/release/&lt;version&gt;/darwin.&lt;version&gt; may be latest or a semantic version like v0.8.0. In there, you should find corresponding .app directory which is your installation of the AskUI UI Controller. Start it by double-clicking it in the Finder.  The application should ask forScreen Recording permissions which you have to grant for it to work. You should remove every reference to UiController in your helper/jest.setup.ts so that the AskUI lib does not override the installation or tries to start it automatically.  Now, you can run your instructions starting the AskUI UI Controller manually each time. On the first run, you are going to be asked for Accessibility permissions which you also have to grant. After that, your instructions should run flawlessly as and you should be able to capture what is shown on the screen as well as execute instructions.  We are actively searching for a solution to improve the current state of affairs but Apple does not make it easy (which is good for your privacy but not so much for automation frameworks). But be sure that we keep trying ;)  ","version":"0.11.6","tagName":"h2"},{"title":"Mouse Cursor Not Moving as Expected​","type":1,"pageTitle":"macOS","url":"/docs/0.11.6/general/Troubleshooting/mac-os#mouse-cursor-not-moving-as-expected","content":" Apple devices that have a display manufactured by Apple, i.e., Macbook, iMac have a so-called Retina Display, and they have a higher pixel density.  To use the actions such as moveMouse() or moveMouseRelatively(), the coordinates should be doubled in order to move the mouse cursor as expected.  For example, let's say that your screen resolution is of 1920x1080. If you want to move the mouse cursor to the middle of the screen, the correct numeric arguments are as such:  await aui.moveMouse(1920,1080).exec();   The coordinate of the middle of the screen is (960,540). But if you use these numbers, it will move the cursor only half of the expected distance. ","version":"0.11.6","tagName":"h2"},{"title":"Tutorials","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Tutorials","content":"","keywords":"","version":"0.11.6"},{"title":"🤖 Android​","type":1,"pageTitle":"Tutorials","url":"/docs/0.11.6/general/Tutorials#-android","content":" Web Search on Android Go to Tutorial Flutter Android App Go to Tutorial  ","version":"0.11.6","tagName":"h2"},{"title":"🕸️ Browser​","type":1,"pageTitle":"Tutorials","url":"/docs/0.11.6/general/Tutorials#️-browser","content":" Google Cat Search Go to Tutorial Online Shop Go to Tutorial  ","version":"0.11.6","tagName":"h2"},{"title":"💻 Desktop​","type":1,"pageTitle":"Tutorials","url":"/docs/0.11.6/general/Tutorials#-desktop","content":" Spotify Like Go to Tutorial ","version":"0.11.6","tagName":"h2"},{"title":"Windows","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Troubleshooting/windows","content":"","keywords":"","version":"0.11.6"},{"title":"AskUI UI Controller​","type":1,"pageTitle":"Windows","url":"/docs/0.11.6/general/Troubleshooting/windows#askui-ui-controller","content":" On Windows, the AskUI UI Controller may not terminate after each execution. This may lead to problems when using the AskUI UI Controller in a pipeline like a pipeline's run not coming to an end.  In this case you can force termination of the AskUI UI Controller. The UiController.stop() takes an optional boolean argument which is set to false by default. If we pass true to the UiController.stop() method, e.g., uiController.stop(true), we kill the AskUI UI Controller process.  await uiController.stop(true);   If you are using the Jest framework to execute your instructions, you can also force Jest to exit as described on our Jest-Troubleshooting page. This option terminates all processes which were set up and didn't close properly. The first option explicitly stops the AskUI UI Controller. ","version":"0.11.6","tagName":"h2"},{"title":"Proxy","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Troubleshooting/proxy","content":"","keywords":"","version":"0.11.6"},{"title":"Installing AskUI Through NTLM or Kerberos Proxy Server​","type":1,"pageTitle":"Proxy","url":"/docs/0.11.6/general/Troubleshooting/proxy#installing-askui-through-ntlm-or-kerberos-proxy-server","content":" A Windows New Technology LAN Manager (NTLM) or Kerberos proxy requires you to authenticate yourself. This is done via your currently logged in Windows user or the username/password combination (Linux, macOS). The easiest way to do this is to install a local proxy that handles the handshake with the proxy for you.  ","version":"0.11.6","tagName":"h2"},{"title":"Install Local Proxy​","type":1,"pageTitle":"Proxy","url":"/docs/0.11.6/general/Troubleshooting/proxy#install-local-proxy","content":" We recommend Px as a local proxy. Install it in your preferred way and start it. The default port it runs on is 3128.  tip Choose the binary option if a package manager is not feasible in your environment.  ","version":"0.11.6","tagName":"h3"},{"title":"Windows Startup​","type":1,"pageTitle":"Proxy","url":"/docs/0.11.6/general/Troubleshooting/proxy#windows-startup","content":" You can add Px to the startup for the binary zipped option in Windows like this:  Create a px-start.bat file within the unzipped folder, e.g., c:\\tools\\px with the content: cd c:\\tools\\px (or whatever path you unzipped the archive to) px.exe Double-Click on the px-start.bat file to start Px Optional: Set up Px to autostart on system startup so you don’t have to start it manually each time you want to use it Create a link to px-start.batOpen the startup folder with Windows logo key + R, enter shell:startupMove the link to px-start.bat into this folder  ","version":"0.11.6","tagName":"h3"},{"title":"Create .npmrc file for npm​","type":1,"pageTitle":"Proxy","url":"/docs/0.11.6/general/Troubleshooting/proxy#create-npmrc-file-for-npm","content":" Create a .npmrc file in your AskUI project. You want to make sure that:  registry and noproxy point to your companies registry (i.e. Artifactory)proxy and https-proxy point to the local Px proxy  registry=&lt;company-registry-url&gt; proxy=http://127.0.0.1:3128 https-proxy=http://127.0.0.1:3128 noproxy=&lt;company-registry-url&gt;   ","version":"0.11.6","tagName":"h3"},{"title":"Set Environment Variables​","type":1,"pageTitle":"Proxy","url":"/docs/0.11.6/general/Troubleshooting/proxy#set-environment-variables","content":" Setting the proxy inside .npmrc does not cover all cases. Sometimes a separate node command spawns a new process which does not inherit the proxy settings. Therefore you need to set the environment variable HTTPS_PROXY like this:  Windows instructions  # Linux and macOS # Add it to your favourite shell # at startup if necessary export HTTPS_PROXY=http://127.0.0.1:3128   ","version":"0.11.6","tagName":"h3"},{"title":"UiController Connection to AskUI Inference​","type":1,"pageTitle":"Proxy","url":"/docs/0.11.6/general/Troubleshooting/proxy#uicontroller-connection-to-askui-inference","content":" We describe two ways to connect to our backend AskUI Inference.  ","version":"0.11.6","tagName":"h2"},{"title":"Using Default Configuration with hpagent​","type":1,"pageTitle":"Proxy","url":"/docs/0.11.6/general/Troubleshooting/proxy#using-default-configuration-with-hpagent","content":" Per default, our library uses hpagent to support the use of HTTP and HTTPS proxies. hpagent is an open source package which provides HTTP(S) proxies that keeps connections alive. To use it, you need to  install hpagent  npm install --save-dev hpagent   configure which proxies to use by setting the proxies' URLs using the environment variables HTTP_PROXY or HTTPS_PROXY  export HTTP_PROXY=http://&lt;your-proxy-url&gt; export HTTPS_PROXY=https://&lt;your-proxy-url&gt;   ","version":"0.11.6","tagName":"h3"},{"title":"Manually Configuring the HTTP and HTTPS Agent​","type":1,"pageTitle":"Proxy","url":"/docs/0.11.6/general/Troubleshooting/proxy#manually-configuring-the-http-and-https-agent","content":" If you need even more control, you can also configure an HTTP agent and HTTPS agent supporting your proxy manually for either one or both,  the UI Controller (configuring the UiController) running on the OS you would like to control andthe Inference API (configuring the UiControlClient) running on our servers and providing the vision to run your tests.  In the following example we are going to use hpagent again but you can use any HTTP and HTTPS agents that support proxies, e.g., the http.Agent or the https.Agent provided by the http and https module of Node.js, respectively.  Install hpagent  npm install --save-dev hpagent   Import hpagent (or the agent(s) you would like to use) and configure the UiController and/or the UiControlClient inside the test/helper/jest.setup.ts file.  import { HttpProxyAgent, HttpsProxyAgent } from 'hpagent'; // &lt;-- Add imports // other code beforeAll(async () =&gt; { // Add this block const httpProxyUrl = &quot;http://&lt;your-proxy-url&gt;&quot; // &lt;-- Adapt http proxy url const httpsProxyUrl = &quot;https://&lt;your-proxy-url&gt;&quot; // &lt;-- Adapt https proxy url const proxyAgents = { http: new HttpProxyAgent({ proxy: httpProxyUrl, }), https: new HttpsProxyAgent({ proxy: httpsProxyUrl, }), } // other code uiController = new UiController({ proxyAgents // &lt;-- Set proxy agents }); // other code aui = await UiControlClient.build({ proxyAgents // &lt;-- Set proxy agents }); // other code })   Here are some example for the httpProxyUrl (for more details see docs from hpagent)  Proxy Type\tURL\tDescriptionHTTP\te.g. http://proxy.company.com:8293\tA HTTP proxy without authentication HTTP + Basic Auth\te.g. http://username:password@proxy.company.com:8293\tA HTTP proxy with authentication SOCKET Socket proxies are not supported by hpagent  Here are some example for the httpsProxyUrl (for more details see docs from hpagent)  Proxy Type\tURL\tDescriptionHTTPS\te.g. https://proxy.company.com:8293\tA HTTPS proxy without authentication HTTPS + Basic Auth\te.g. https://username:password@proxy.company.com:8293\tA HTTP proxy with authentication. SOCKET Socket proxies are not supported by hpagent  ","version":"0.11.6","tagName":"h3"},{"title":"Deep Package Inspection​","type":1,"pageTitle":"Proxy","url":"/docs/0.11.6/general/Troubleshooting/proxy#deep-package-inspection","content":" Company proxies, like Zscalar, use deep package inspection to analyze the network traffic. Such proxies are adding self-signed certificates to the HTTPS request to break up the TLS connection.  This can result in the following error messages:   RequestError: self signed certificate   or   RequestError: unable to verify the first certificate   There are multiple options to deal with this:  Deactivate TLS certificate validation (NOT RECOMMENDED)​  This option deactivates the TLS validation (see here) and is not recommended. Only for testing!  Windows:  set NODE_TLS_REJECT_UNAUTHORIZED 0   macOS/Unix:  export NODE_TLS_REJECT_UNAUTHORIZED=0   Add Self-Signed Certificate as Extra CA Certs (RECOMMENDED)​  The other option is to add the self-signed certificate as extra certificates for Node.js.  Get the certificate and convert it to a .pem file, e.g., by exporting it with Chrome.Set the NODE_EXTRA_CA_CERTS with the following commands:  Windows:  set NODE_EXTRA_CA_CERTS '&lt;path&gt;\\&lt;cert&gt;.pem'   macOS/Unix:  export NODE_EXTRA_CA_CERTS='&lt;path&gt;/&lt;cert&gt;.pem'   Additional information:  Get Zscalar custom certificate ","version":"0.11.6","tagName":"h3"},{"title":"Web Search on Android","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Tutorials/android-search-in-browser","content":"","keywords":"","version":"0.11.6"},{"title":"Requirements​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.11.6/general/Tutorials/android-search-in-browser#requirements","content":" Android Studio or Android SDK Command-line Tools installed (See Setup Android tutorial).(optional) Android device, if you want to run your app on a real device.    ","version":"0.11.6","tagName":"h2"},{"title":"1. Prepare the AskUI Development Environment​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.11.6/general/Tutorials/android-search-in-browser#1-prepare-the-askui-development-environment","content":" ","version":"0.11.6","tagName":"h2"},{"title":"Install and initialize AskUI​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.11.6/general/Tutorials/android-search-in-browser#install-and-initialize-askui","content":" Please follow the Getting Started tutorial.  Configure AskUI for Android  We need to run the UiController manually with an extra argument to specify the runtime mode, as the current version of AskUI doesn't provide the API for running it with the runtime option yet:  # first, go to the folder that contains the binary cd &lt;YOUR_PROJECT_DIRECTORY&gt;/node_modules/askui/dist/release/latest/&lt;YOUR_PLATFORM&gt; # for example, Mac OS cd node_modules/askui/dist/release/latest/darwin/askui-ui-controller.app/Contents/MacOS/ # then run it ./askui-ui-controller -r android # If you can't find the binary as described above, # then you might have AskUI freshly installed and haven't run it yet. # The binary gets downloaded as the AskUI code runs the first time. # Run the command below to run the AskUI code: npx jest test/my-first-askui-test-suite.test.ts --config ./test/jest.config.ts   If the UiController starts, it will display the log of it on the shell. We can leave it in the background, and prepare a new terminal window for the next step.  💡If you got any errors after running the binary, please check if your android device/emulator is properly connected and recognized by the Android Debug Bridge adb by using this command: adb devices. You should see a list of recognized devices.  Next, we have to change a few lines of the generated code, as the code ships with the part that creates another UiController instance.  Go to helper/jest.setup.ts and comment out every line that is using uiController:  import { UiControlClient, UiController } from 'askui'; // Server for controlling the operating system // let uiController: UiController; // Client is necessary to use the askui API // eslint-disable-next-line import/no-mutable-exports let aui: UiControlClient; jest.setTimeout(60 * 1000 * 60); beforeAll(async () =&gt; { // uiController = new UiController({ // /** // * Select the display you want to run your tests on, display 0 is your main display; // * ignore if you have only one display // */ // display: 0, // }); // await uiController.start(); aui = await UiControlClient.build({ credentials: { workspaceId: myworkspaceid, token: mytoken, } }); await aui.connect(); }); afterAll(async () =&gt; { // await uiController.stop(); aui.close(); }); export { aui };     ","version":"0.11.6","tagName":"h3"},{"title":"2. Try Annotating​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.11.6/general/Tutorials/android-search-in-browser#2-try-annotating","content":" Make sure that your Android device is connected, or if you are using the Android Emulator, make sure that it is open and running on your local machine.  AskUI provides a feature where you can monitor how the visible elements are understood by AskUI. Try to change the code within test/my-first-askui-test-suite.test.ts to the following:  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should show the annotation', async () =&gt; { await aui.annotateInteractively(); }); });   and run,  npx jest test/my-first-askui-test-suite.test.ts --config ./test/jest.config.ts     💡 Annotation is InteractiveTry to hover your mouse on the red bounding box. It will let you know how to manipulate that element via AskUI  ","version":"0.11.6","tagName":"h2"},{"title":"3. Automate Web Searching​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.11.6/general/Tutorials/android-search-in-browser#3-automate-web-searching","content":" Now we are good to go for the actual automation process. The automation consist of three steps:  Open ChromeSelect the search bar and type 'spacecraft'Click on the desired search result  ","version":"0.11.6","tagName":"h2"},{"title":"1) Open Chrome​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.11.6/general/Tutorials/android-search-in-browser#1-open-chrome","content":" To open Chrome, we first have to figure out how we can let AskUI know where to click on.  As we can see in the annotated image above, the Chrome icon is recognized as an icon: undo. Indeed, we could also tell AskUI to select the icon: undo, but we will try to do it in a more precise way.  What we're gonna do is:  (1) Select the search bar  (2) Type 'chrome'  (3) Select the icon above the text 'chrome'  This approach will give us a more consistent result because typing &quot;chrome&quot; in the search bar will give us a more understandable visual element.  Try to change your code according to this:  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should open chrome', async () =&gt; { await aui.click().textfield().exec(); // Type the desired keyword into the search bar await aui.type('chrome').exec(); // We wait for 1500 milliseconds, to make sure that the search result // has been loaded before AskUI start to look for the search result. await aui.waitFor(1500).exec(); // Then click the icon that is above the text 'chrome' await aui.click().icon().above().text('chrome').exec(); }); });   and run,  npx jest test/my-first-askui-test-suite.test.ts --config ./test/jest.config.ts   Now you will be able to see that Chrome has been opened.  ","version":"0.11.6","tagName":"h3"},{"title":"2) Select the Search Bar and Type 'spacecraft'​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.11.6/general/Tutorials/android-search-in-browser#2-select-the-search-bar-and-type-spacecraft","content":" Let's select the search bar of chrome, and type our desired keyword in there.    Add this code block to the bottom of our code:  // We first look for the search bar. Depending on the system language of your device, the default text within the search bar may differ. await aui.click().text('search or type web address').exec(); // Type our desired keyword and hit enter await aui.type('spacecraft').exec(); await aui.pressAndroidKey('enter').exec();   In some cases, when searching in Google, you will be asked to give consent for the cookies. To avoid our execution from failing, we have to examine whether we got a pop-up for the cookie consent or not:  try { // The 'expect()' examines whether a specific element is detected or not. // An instruction starting with 'expect()' must always end with 'exists()' or 'notExists()' await aui.expect().text().containsText('cookies').notExists().exec(); } catch (error) { await aui.click().text('read more').exec(); await aui.waitFor(1000).exec(); // wait until the scrolling animation has been finished await aui.click().text('accept all').exec(); } // From here, we can write our next instructions   ","version":"0.11.6","tagName":"h3"},{"title":"3) Click on the Desired Search Result​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.11.6/general/Tutorials/android-search-in-browser#3-click-on-the-desired-search-result","content":"   After clearing the cookie consent pop-up, we can see and click our desired search result. In our case, we will look for the result from Wikipedia:  // We ask the AskUI to click the text that contains 'wikipedia', // which is the text that is nearest to the text containing 'wikipedia.org' await aui.click() .text() .containsText('wikipedia') .nearestTo() .text() .containsText('wikipedia.org') .exec();   Pay attention to the relational element-description nearestTo() that is interconnecting two different text elements.  AskUI offers several Relational Element-Descriptions, which enable you to select the desired element by their screen position:  above()below()contains()in()leftOf()rightOf()nearestTo()  💡 About withText() and containsText():  You might wonder how withText() and containsText() differ. withText() tries to match the given text as the whole sequence, whereas containsText() tries to match the given text as a sub-text within the elements. Generally speaking, containsText() can be handier to match the text roughly, but you might face a case where you want to find a specific text as a whole sequence.    ","version":"0.11.6","tagName":"h3"},{"title":"4. Complete AskUI Code​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.11.6/general/Tutorials/android-search-in-browser#4-complete-askui-code","content":" import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should search spacecraft in chrome', async () =&gt; { await aui.click().textfield().exec(); // Type the desired keyword into the search bar await aui.type('chrome').exec(); // We wait for 1500 miliseconds, to make sure that the search result has been loaded before AskUI start to look for the search result. await aui.waitFor(1500).exec(); // Then click the icon that is above the text 'chrome' await aui.click().icon().above().text('chrome').exec(); // We wait the Chrome app to be launched await aui.waitFor(1500).exec(); // We first look for the search bar. Depending on the system language of your device, the default text within the search bar may differ. await aui.click().text('search or type web address').exec(); // Type our desired keyword and hit enter await aui.type('spacecraft').exec(); await aui.pressAndroidKey('enter').exec(); // We wait for the search result to be loaded await aui.waitFor(3000).exec(); try { // The 'expect()' examines whether a specific element is detected or not. // An instruction starting with 'expect()' must always end with 'exists()' or 'notExists()' await aui.expect().text().containsText('cookies').notExists().exec(); } catch (error) { await aui.click().text('read more').exec(); await aui.waitFor(1000).exec(); // wait until the scrolling animation has been finished await aui.click().text('accept all').exec(); } // We ask the AskUI to click the text that contains 'wikipedia' which is the text that is nearest to the text containing 'wikipedia.org' await aui.click().text().containsText('wikipedia').nearestTo().text().containsText('wikipedia.org').exec(); }); });     ","version":"0.11.6","tagName":"h2"},{"title":"5. Conclusion​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.11.6/general/Tutorials/android-search-in-browser#5-conclusion","content":" We have covered a use case of AskUI to automate web searching in Android devices. If you got any issues while following the instruction, feel free to ask in our Outverse-Community! ","version":"0.11.6","tagName":"h2"},{"title":"Online Shop Login","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Tutorials/shop-demo","content":"","keywords":"","version":"0.11.6"},{"title":"Setup​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.11.6/general/Tutorials/shop-demo#setup","content":" Follow the AskUI installation guide and write your first instructionOpen a browser on your screen If you have multiple screens, configure the used display by setting the display variable at test/helper/jest.setup.js  ","version":"0.11.6","tagName":"h2"},{"title":"Code​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.11.6/general/Tutorials/shop-demo#code","content":" After running the npx askui init command as described in the setup you will have a file test/my-first-askui-test-suite.test.ts. In this file add a new workflow (it-code-block) inside the body of the callback passed to the describe function:  describe(/* a string identifying the test suite */, () =&gt; { ... (other workflows) it('Should log into account', async () =&gt; { }); });   ","version":"0.11.6","tagName":"h2"},{"title":"1. Open the Demo Shop​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.11.6/general/Tutorials/shop-demo#1-open-the-demo-shop","content":" First we need to open the demo shop in the browser. For that we open the browser and then type the URL into the search bar and hit enter.  it('Should log into account', async () =&gt; { // First open the browser. // If it is already open it should focus the current window // macOS: open -a 'Google Chrome' // Windows: start chrome await aui.execOnShell(&quot;start chrome&quot;).exec(); // Open a new tab // macOS: command + t // windows: control + t await aui.pressTwoKeys('control', 't').exec(); // Click the textfield or URL bar that contains // the text 'Search Google or type a URL' await aui.click() .text() .withText('Search Google or type a URL').exec(); // Type the text into the focused element await aui.type('https://askui-demo-shop-6e358.web.app/').exec(); // Navigate to the website await aui.pressKey('enter').exec(); });   When you run this code with npx jest --config ./test/jest.config.ts, you should see the demo online shop opening in the browser you opened.  ","version":"0.11.6","tagName":"h3"},{"title":"2. Navigate to the Login Dialog​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.11.6/general/Tutorials/shop-demo#2-navigate-to-the-login-dialog","content":" Next, to open the login dialog, we need to click the text login at the top of the page. We can do this with the following instruction:  it('Should log into account', async () =&gt; { ... await aui.click().text('Login').exec(); });   ","version":"0.11.6","tagName":"h3"},{"title":"3. Fill out Login Information​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.11.6/general/Tutorials/shop-demo#3-fill-out-login-information","content":" After opening the login dialog, we need to enter an email address and a password. For this we will use the typeIn action. After filling in an email address, depending on the browser used the textfield may open an auto-complete drop-down that overlaps with the password field:    To keep the password field visible, we have to hide the auto-complete drop-down. In order to do this, we have to blur the email input field. We do this by clicking on the headline of the page (&quot;Login&quot;). Afterwards, we can type into the password field.  it('Should log into account', async () =&gt; { ... await aui.typeIn('test@askui.com').textfield().contains().text('Email Address').exec(); await aui.click().text('Login').above().textfield().exec(); await aui.typeIn('passwort').textfield().contains().text('Password').exec(); });   ","version":"0.11.6","tagName":"h3"},{"title":"4. Click on Login Button​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.11.6/general/Tutorials/shop-demo#4-click-on-login-button","content":" After filling in email and password, we need to click the login button. The following instruction does that for us:  it('Should log into account', async () =&gt; { ... await aui.click().button().contains().text('Log in').exec(); });   ","version":"0.11.6","tagName":"h3"},{"title":"5. Check whether Login worked & Log out​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.11.6/general/Tutorials/shop-demo#5-check-whether-login-worked--log-out","content":" Finally, we need to check whether the login worked. We can do this by checking if the text &quot;Logout test@askui.com&quot; is displayed in the header as this is only displayed if we are logged in. We complete the workflow by logging out so that the workflow can easily be rerun without having to log out manually.  it('Should log into account', async () =&gt; { ... await aui.expect().text('Logout test@askui.com').exists().exec(); await aui.click().text('Logout test@askui.com').exec(); });   ","version":"0.11.6","tagName":"h3"},{"title":"Result​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.11.6/general/Tutorials/shop-demo#result","content":" The following code block shows the finished code for the login of the web shop:  it('Should log into account', async () =&gt; { // First open the browser. // If it is already open it should focus the current window // macOS: open -a 'Google Chrome' // Windows: start chrome await aui.execOnShell(&quot;start chrome&quot;).exec(); // Open a new tab // macOS: command + t // windows: control + t await aui.pressTwoKeys('control', 't').exec(); // Click the textfield or URL bar that contains // the text 'Search Google or type a URL' await aui.click() .text() .withText('Search Google or type a URL').exec(); // Type the text into the focused element await aui.type('https://askui-demo-shop-6e358.web.app/').exec(); // Navigate to the website await aui.pressKey('enter').exec(); await aui.click().text('Login').exec(); await aui.typeIn('test@askui.com').textfield().contains().text('Email Address').exec(); await aui.click().text('Login').above().textfield().exec(); await aui.typeIn('passwort').textfield().contains().text('Password').exec(); await aui.click().button().contains().text('Log in').exec(); await aui.expect().text('test@askui.com').exists().exec(); await aui.click().text('Logout test@askui.com').exec(); });   To run this code use the npx jest test/my-first-askui-test-suite.test.ts --config ./test/jest.config.ts command. ","version":"0.11.6","tagName":"h2"},{"title":"Google Cat Image Search","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Tutorials/google-cat-search","content":"","keywords":"","version":"0.11.6"},{"title":"Setup​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/0.11.6/general/Tutorials/google-cat-search#setup","content":" Follow one of the two options under Start to install AskUIOpen a Chrome browser window on your screen If you have multiple screens, configure the used display by setting the display variable in test/helper/jest.setup.js  ","version":"0.11.6","tagName":"h2"},{"title":"Setting Up AskUI​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/0.11.6/general/Tutorials/google-cat-search#setting-up-askui","content":" 💭 Let’s say we’re on google.com and we want to search for an image of a cat and then download it to our computer.  First, we break this task down into steps that a user would take. Then we can recreate those steps with AskUI instructions in code.  Go to Google Search pageGo to google imagesType “cat” in the search barSelect imageRight-click + save the image  Let us first get an annotated screenshot, where all of the on-screen elements are enclosed within annotated bounding boxes. This will help us select the correct elements with our instructions.  Open the file test/my-first-askui-test-suite.test.ts and replace the it-code block starting in line 4 with the following code:  it('annotate', async () =&gt; { await aui.annotate() });   Run the code from your terminal to create an annotated screenshot. A folder report in your project folder will appear.  npx jest test/my-first-askui-test-suite.test.ts --config ./test/jest.config.ts   If you want to annotate interactively change it to the following:  it('annotate', async () =&gt; { // Hit 'Esc' to stop the annotation // when you are done await aui.annotateInteractively() });   📌 The annotations are basically the substitute for IDs in selector-based frameworks. You can click on them to copy them into your clipboard.  If you are having problems with the execution, have a look at our Troubleshooting page.  ","version":"0.11.6","tagName":"h2"},{"title":"Writing and Debugging an AskUI Workflow​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/0.11.6/general/Tutorials/google-cat-search#writing-and-debugging-an-askui-workflow","content":" Now we can start to write our workflow, by locating the elements and then executing an instruction on them. Remember the steps, that we wanted to recreate?  Go to Google Search pageGo to google imagesType “cat” in the search barSelect imageRight-click + save the image  tip Make sure to open your browser on the configured display before the execution and move your mouse over the browser window immediately after starting the execution!  In the end, your code for the workflow looks like this.  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should find a cat image and save it', async () =&gt; { // Make sure the browser window has focus await aui.mouseLeftClick().exec(); // Open a new tab with keyboard shortcut // MacOS: command + t // Windows: control + T // Linux: control + t await aui .pressTwoKeys('command', 't') .exec(); // type google.com into browser bar await aui .typeIn('google.com') .text() .withText('Search Google or type a URL') .exec(); // Hit enter key await aui .pressKey('enter') .exec(); // Click the Images-text to the right of Gmail await aui .click() .text().withTextRegex(&quot;Image*&quot;) .rightOf() .text(&quot;Gmail&quot;) .exec(); // Type in cat into search field // Notice: withText does not have to be 100% equal await aui .typeIn(&quot;cat&quot;) .textfield() .contains() .icon().withText('microphone') .exec(); await aui .pressKey('enter') .exec(); // HINT // withText might need to be changed depending // on your search results! await aui .moveMouseTo() .image() .above() .text() .withText(&quot;pet guru Yuki Hattori explaiinICats&quot;) .exec(); // Save the image with right click await aui .mouseRightClick() .exec() // Find the right dialog entry await aui .click() .text() .withText('save image as') .exec(); // Save it // If it does not work because the button is not found // Remove the '.button()' await aui .click() .button() .withText(&quot;Save&quot;) .exec(); }); });   ","version":"0.11.6","tagName":"h2"},{"title":"Debugging​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/0.11.6/general/Tutorials/google-cat-search#debugging","content":" It’s possible that you’ll run into problems with locating elements. For example, when creating the tutorial, we first tried to locate the image nearest to the image title, like this:  await aui .moveMouseTo() .image() .nearestTo() .text() .withText(&quot;pet guru Yuki Hattori explaiinICats&quot;) .exec()   But it turns out, that our model uses a different metric for measuring distance between elements, which is why our workflow failed the first time. Then we substituted this function for above(), which fixed the problem for us.  Another problem regarding font-size occurred with the Images button. The model recognized Image with an s missing at the end. That is why we switched from _withText('Images') to withTextRegex('Image*').  await aui .click() .text().withTextRegex(&quot;Image*&quot;) .rightOf() .text(&quot;Gmail&quot;) .exec();   It is always a good idea to try to play around with the functions and see if you can tackle the problem from a different angle.  If you have a recurring or persisting issue, don’t hesitate to ask the community for help. You can be sure that your questions will be answered there. We’re excited to hear about how you apply AskUI to your projects.  If you have any feature requests, please feel free to post them in our Featurebase board.  Best regards and happy automating! ","version":"0.11.6","tagName":"h2"},{"title":"Like on Spotify Desktop App","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Tutorials/spotify-tutorial","content":"","keywords":"","version":"0.11.6"},{"title":"Setup​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.11.6/general/Tutorials/spotify-tutorial#setup","content":" Follow the AskUI installation guide and write your first instructionOpen the Spotify desktop application on your screen If you have multiple screens, configure the used display by setting the display variable at test/helper/jest.setup.js  ","version":"0.11.6","tagName":"h2"},{"title":"Code​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.11.6/general/Tutorials/spotify-tutorial#code","content":" After running the npx askui init command as described in the setup you will have a file test/my-first-askui-test-suite.test.ts. In this file add a new workflow (it-code-block) inside the body of the callback passed to the describe function:  describe(/* a string identifying the test suite */, () =&gt; { ... (other tests) it('should like Spotify song', async () =&gt; { }); });   ","version":"0.11.6","tagName":"h2"},{"title":"1. Navigate to the Search Page​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.11.6/general/Tutorials/spotify-tutorial#1-navigate-to-the-search-page","content":" First, we need to open the search page where we can look for a song:  it('should like Spotify song', async () =&gt; { await aui.click().icon().withText('search').exec(); });   ","version":"0.11.6","tagName":"h3"},{"title":"2. Search for a Song​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.11.6/general/Tutorials/spotify-tutorial#2-search-for-a-song","content":" Then we can use the search field (a textfield) to search a song:  it('should like Spotify song', async () =&gt; { ... await aui.typeIn('Bohemian Rhapsody').textfield().exec(); await aui.pressKey('enter').exec(); });   ","version":"0.11.6","tagName":"h3"},{"title":"3. Open Menu for a Song​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.11.6/general/Tutorials/spotify-tutorial#3-open-menu-for-a-song","content":" On the search result page we need to right click a song to open the menu for the song:  it('should like Spotify song', async () =&gt; { ... await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Songs').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Save to your Liked Songs').exec(); });   As the text &quot;Bohemian Rhapsody&quot; is present on the page multiple times, we are specifying the position of the text we want to click further by saying that it is the one below the text &quot;Songs&quot;.  caution We expect that the song has not yet been liked (although we totally understand if this is the case - we like it, too 😉 - but just for the sake of this workflow, let's unlike it or use another song).  ","version":"0.11.6","tagName":"h3"},{"title":"4. Check Whether the Song was Added to Liked Songs​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.11.6/general/Tutorials/spotify-tutorial#4-check-whether-the-song-was-added-to-liked-songs","content":" Finally, we want to check whether the song was actually added to the liked songs:  it('should like Spotify song', async () =&gt; { ... await aui.click().text('Liked Songs').exec(); await aui.expect().text('Bohemian Rhapsody').exists().exec(); });   ","version":"0.11.6","tagName":"h3"},{"title":"5. Remove Song from Like Songs​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.11.6/general/Tutorials/spotify-tutorial#5-remove-song-from-like-songs","content":" To be able to run the workflow again, it is necessary to reset the state of Spotify, or more specifically, your liked songs. One option would be to add the following instructions to your code in order to remove the song from the liked songs.  it('should like Spotify song', async () =&gt; { ... await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Title').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Remove from your Liked Songs').exec(); });   ","version":"0.11.6","tagName":"h3"},{"title":"Result​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.11.6/general/Tutorials/spotify-tutorial#result","content":" The following code block shows the complete code for the Spotify automation:  it('should like Spotify song', async () =&gt; { await aui.click().icon().withText('search').exec(); await aui.typeIn('Bohemian Rhapsody').textfield().exec(); await aui.pressKey('enter').exec(); await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Songs').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Save to your Liked Songs').exec(); await aui.click().text('Liked Songs').exec(); await aui.expect().text('Bohemian Rhapsody').exists().exec(); await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Title').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Remove from your Liked Songs').exec(); });   To run this workflow use the npx jest test/my-first-askui-test-suite.test.ts --config ./test/jest.config.ts command. ","version":"0.11.6","tagName":"h2"},{"title":"click","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/click","content":"click production Mouse left-clicks/taps on the filtered element by moving the mouse cursor to the filtered element first. If you need a simple mouseleftclick/tap only, use mouseLeftClick. Example: await aui.click().button().withText('Google Search').exec(); ","keywords":"","version":"0.12.2"},{"title":"execOnShell","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/execonshell","content":"execOnShell production Executes a shell command on the device your UiController is connected to. Example: // Open the lastpass app await aui.execOnShell('monkey -p com.lastpass.authenticator 1').exec(); // Open Google Chrome on Windows await aui.execOnShell(&quot;start chrome&quot;).exec() ;// Open Google Chrome on macOS await aui.execOnShell(&quot;open -a 'Google Chrome'&quot;).exec(); // Open Google Chrome on Linux await aui.execOnShell(&quot;chrome&quot;).exec(); @param {string} shell_command - A shell command which is executed.","keywords":"","version":"0.12.2"},{"title":"mouseDoubleLeftClick","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/mousedoubleleftclick","content":"mouseDoubleLeftClick production Double-clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouse(500,500).exec(); await aui.mouseDoubleLeftClick().exec(); ","keywords":"","version":"0.12.2"},{"title":"expect","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/expect","content":"expect production Expects a condition, e.g., exists() or notExits(). Use the structure expect().&lt;your filter&gt;.(exists()|notExists()) as shown in the examples below. Examples: await aui.expect().text('Login').exists().exec() await aui.expect().text('Login').notExists().exec() ","keywords":"","version":"0.12.2"},{"title":"mouseDoubleRightClick","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/mousedoublerightclick","content":"mouseDoubleRightClick production Double-clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleRightClick().exec(); ","keywords":"","version":"0.12.2"},{"title":"mouseDoubleMiddleClick","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/mousedoublemiddleclick","content":"mouseDoubleMiddleClick production Double-clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleMiddleClick().exec(); ","keywords":"","version":"0.12.2"},{"title":"mouseMiddleClick","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/mousemiddleclick","content":"mouseMiddleClick production Clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseMiddleClick().exec(); ","keywords":"","version":"0.12.2"},{"title":"mouseLeftClick","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/mouseleftclick","content":"mouseLeftClick production Clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseLeftClick().exec(); ","keywords":"","version":"0.12.2"},{"title":"mouseToggleUp","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/mousetoggleup","content":"mouseToggleUp production Toggles mouse up (Left mouse key/tap).This is equivalent to releasing the pressing mouse left button. Often combined with mouseToggleDown()to automate drag-and-drop. Example: await aui.mouseToggleDown().exec(); await aui.moveMouseRelatively(-400,0).exec(); await aui.mouseToggleUp().exec(); ","keywords":"","version":"0.12.2"},{"title":"mouseRightClick","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/mouserightclick","content":"mouseRightClick production Clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseRightClick().exec(); ","keywords":"","version":"0.12.2"},{"title":"mouseToggleDown","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/mousetoggledown","content":"mouseToggleDown production Toggles mouse down (Left mouse key/tap). This is equivalent to mouse-left-press-and-hold. It holds the mouse button until the mouseToggleUp() is called. Often combined with mouseToggleUp()to automate drag-and-drop. Example: await aui.mouseToggleDown().exec(); await aui.moveMouseRelatively(-400,0).exec(); await aui.mouseToggleUp().exec(); ","keywords":"","version":"0.12.2"},{"title":"moveMouseRelativelyTo","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/movemouserelativelyto","content":"moveMouseRelativelyTo production Moves the mouse relatively to an element in the direction. This can be used when the mouse should not hover over an element anymore. caution macOS only: Due to the higher pixel density of the retina display, the input coordinates must be doubled in order to move the mouse as expected. For example, if you want to move the mouse for 100 pixels, use 200. Examples: // Move mouse 30 pixels below button await aui.moveMouseRelativelyTo(0, 30).button().withText('Submit').exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction.","keywords":"","version":"0.12.2"},{"title":"moveMouseRelatively","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/movemouserelatively","content":"moveMouseRelatively production Moves the mouse from the current position (relative) in x and y direction. caution macOS only: Due to the higher pixel density of the retina display, the input coordinates must be doubled in order to move the mouse as expected. For example, if you want to move the mouse for 100 pixels, use 200. Example: await aui.moveMouseRelatively(0, 50).exec(); @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction.","keywords":"","version":"0.12.2"},{"title":"moveMouse","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/movemouse","content":"moveMouse production Moves the mouse to an arbitrary absolute x and y coordinates. If you want to move your mouse cursor to an element, use moveMouseTo(). caution macOS only: Due to the higher pixel density of the retina display, the input coordinates must be doubled in order to move the mouse as expected. For example, if you want to move the mouse for 100 pixels, use 200. Example: await aui.moveMouse(500, 500).exec(); @param {number} x_coordinate - A (positive/negative) x coordinate.@param {number} y_coordinate - A (positive/negative) y coordinate.","keywords":"","version":"0.12.2"},{"title":"Flutter Sample Android App","type":0,"sectionRef":"#","url":"/docs/0.11.6/general/Tutorials/flutter-android-sample-app","content":"","keywords":"","version":"0.11.6"},{"title":"Live Demo in Action (playback speed x3)​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.11.6/general/Tutorials/flutter-android-sample-app#live-demo-in-action-playback-speed-x3","content":"   ","version":"0.11.6","tagName":"h2"},{"title":"Setup​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.11.6/general/Tutorials/flutter-android-sample-app#setup","content":" The source code for the Flutter demo app used in this tutorial is provided in this repository.  ","version":"0.11.6","tagName":"h2"},{"title":"1. Build and Run Flutter Demo App​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.11.6/general/Tutorials/flutter-android-sample-app#1-build-and-run-flutter-demo-app","content":" Install Flutter Clone this repository and run flutter create demo_app within the directory:  git clone https://github.com/askui/flutter-example-automation cd flutter-example-automation flutter create demo_app cd demo_app   Install dependencies for the Flutter demo app:  # run this command inside the flutter project # directory `demo_app/` flutter pub add camera intl   To use the camera, we need to set the minSdkVersion in android/app/build.gradle:  // inside the 'android/app/build.gradle' // set the 'minSdkVersion' to 21 default config { ... minSdkVersion 21 ... }   (optional) The app is ready to be built but will throw deprecation warnings. If you want to clear the deprecation warnings, follow this step (See also this issue.).  # change the respective part inside the 'pubspec.yaml' dependencies: camera: git: url: https://github.com/flutter/plugins path: packages/camera/camera ref: 9e46048ad2e1f085c1e8f6c77391fa52025e681f   Run the Android Emulator. Run the demo app:  flutter run   Now you should see the demo app running on your Android device.  Setup ADBKeyboard In this example, we are going to automate the typing on the Android device. To let AskUI fluently type as desired, we will use a virtual keyboard that handles the keyboard input via adb: ADBKeyboard.apk  ‍  Download the ADBKeyboard package (Important: Version 2.0): Link to GitHub Repository Unzip it. Find your device:  # Make sure that your Android device is connected, and the USB debugging mode is enabled adb devices   Install the ADBKeyboard on the device:  # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; install ADBKeyboard.apk   Configure the ADB Keyboard:  # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; shell settings put secure default_input_method com.android.adbkeyboard/.AdbIME   Enable the ADB Keyboard:  # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; shell ime enable com.android.adbkeyboard/.AdbIME   To check if it is enabled:  Click on a textfield in an app and see if the ADB Keyboard {ON} notification is shown at the bottom of the screen.  ","version":"0.11.6","tagName":"h3"},{"title":"3. Setup AskUI​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.11.6/general/Tutorials/flutter-android-sample-app#3-setup-askui","content":" Setup AskUI by following the Getting Started Guide. We need to run the UiController directly with an extra argument to specify the runtime mode, as the current version of AskUI(version 0.7.2) doesn't provide the API for running it with the runtime argument yet. From within your npm project path, go to the directory that contains the askui-ui-controller binary:  cd &lt;YOUR_PROJECT_DIRECTORY&gt;/node_modules/askui/dist/release/latest/&lt;YOUR_PLATFORM&gt; ./askui-ui-controller -r android # for example, macOS: cd node_modules/askui/dist/release/latest/darwin/askui-ui-controller.app/Contents/MacOS/./askui-ui-controller -r android # If you can't find the binary as described above, # then you might have AskUI freshly installed and haven't run it yet. # The binary gets downloaded as the AskUI code runs. # Run the command below to run the AskUI code: npx jest test/my-first-askui-test-suite.test.ts --config ./test/jest.config.ts   If you got them both (emulator and UiController) running, then we are ready to go for the UI automation.  ‍ 3) You need to deactivate a few lines of the code in test/helper/jest.setup.ts that is running the UiController, because we are already running it manually in the previous step:  // file location: test/helper/jest.setup.ts // comment out every line that uses uiController import { UiControlClient, UiController } from 'askui'; // uiController: UiController; let aui: UiControlClient; jest.setTimeout(60 * 1000 * 60); beforeAll(async () =&gt; { // uiController = new UiController({ // /** // * Select the display you want to run your tests on, display 0 is your main display; // * ignore if you have only one display // */ // display: 0, // }); // await uiController.start(); aui = await UiControlClient.build({ credentials:{ workspaceId: 'YOUR_WORKSPACEID_FROM_ASKUI_STUDIO', token: 'YOUR_TOKEN_FROM_ASKUI_STUDIO', } }); await aui.connect(); }); afterAll(async () =&gt; { // await uiController.stop(); aui.close(); }); export { aui };   ","version":"0.11.6","tagName":"h2"},{"title":"Breaking Down the AskUI Code​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.11.6/general/Tutorials/flutter-android-sample-app#breaking-down-the-askui-code","content":" This chapter will walk you through the provided askui-test/demo-automation.ts step by step. The code is divided into three parts, and each part automates a different tab within the demo app:  Outline tab: Find a textfield and type in characters.Datepicker tab: Select a desired date within the date picker widget.Camera tab: Open the camera and push the record button.  ","version":"0.11.6","tagName":"h2"},{"title":"0. General Tips for Using AskUI as a More Friendly Tool:​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.11.6/general/Tutorials/flutter-android-sample-app#0-general-tips-for-using-askui-as-a-more-friendly-tool","content":" Try to annotate : Use await aui.annotateInteractively() or await aui.annotate() in order to see how AskUI is understanding the visible elements on your screen. By using await aui.annotate(), the result of the annotation will be saved in the folder report/ as an HTML file. Be aware of the screen size of your device: AskUI understands your application based on the screen shown and captured. Therefore, on some occasions, you may want to know your screen size to e.g. properly scroll or swipe within your application. You may need to change the numbers for the input swipe command within the provided code so that it suits the screen size of your device. Try to select the elements by their text  tip: If you are using a device with a bigger screen e.g. Tablet, then the screen of your device (real Android device or emulator) might be big enough to see the whole page without scrolling.  ","version":"0.11.6","tagName":"h2"},{"title":"1. Click and Type​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.11.6/general/Tutorials/flutter-android-sample-app#1-click-and-type","content":" The code is within the file askui-test/demo-automation.ts. Copy and paste the code into your AskUI code.  We start the run from the very first tab of our demo app.    To type into a textfield, we first need to get focus on the desired textfield. We can achieve it by running the code below:  // click on the textfield and type characters // repeat this as many times as the textfields await aui.click().text('Enter your username').exec(); await aui.type('askui').exec();   As we have multiple of textfields in our demo app, we can iterate the same procedure for each of them:  // click on the textfield and type characters // repeat this as many times as the textfields await aui.click().text('Enter your username').exec(); await aui.type('askui').exec(); // click and type the email address await aui.click().text('Enter your email').exec(); await aui.type('askui@askui.com').exec(); // Click and type the address await aui.click().text('Enter your address').exec(); await aui.type('Haid-und-Neu-Straße 18').exec(); // Pressing enter is the equivalent of pressing the return button on the on-screen-keyboard // This gets rid of the focus from the textfield await aui.pressAndroidKey('enter').exec();   After filling up the textfields, we can push the buttons at the bottom of the page:  // Press the 'Submit' button await aui.click().text('Submit').exec(); // We will have a popup window that has two buttons. Press the 'Refuse' button await aui.click().text('Refuse').exec(); // Here we press multiple toggle buttons one by one await aui.click().text('Banana').exec(); await aui.click().text('Mango').exec(); await aui.click().text('Sunny').exec(); await aui.click().text('Rainy').exec(); await aui.click().text('Windy').exec(); // Attention for swiping! /* Swipe/scroll within the page - execOnShell() can run shell commands within the device via adb. - Note that, you have to adjust the four numeric parameters, in order to make it fit to your device's screen. - The syntax is: input swipe &lt;startX&gt; &lt;startY&gt; &lt;endX&gt; &lt;endY&gt; - Depending on the screen size of your device, the coordinates should stay within the scrollable/swipeable area of the app. i.e. the 'Tabbar' at the top of the demo app is not scrollable. */ // Here we swipe the page two times in a row await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); await aui.execOnShell('input swipe 1000 1000 100 1000').exec();   ","version":"0.11.6","tagName":"h3"},{"title":"Datepicker​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.11.6/general/Tutorials/flutter-android-sample-app#datepicker","content":" After running the code above, we should see the demo app swiped to the Datepicker tab.    First, we select and type characters into two different textfields:  // First, we type in the desired values into the textfields. await aui.click().text('Title').exec(); await aui.type('My vacation plan').exec(); await aui.click().text('Description').exec(); await aui.type('0. Drink a lot of water').exec(); await aui.pressAndroidKey('tab').exec();   Thereafter, we interact with two different date picker widgets that are represented with edit buttons:  // Second, we select a desired date from the Datepicker widget. // Notice how we select the icon 'chevron right/left' to shift the calendar month. await aui.click().text('edit').nearestTo().text('Depature').exec(); // this will open up the calendar await aui.click().icon().withText('chevron right').exec(); // within the calendar, we push the &gt; icon on the top right corner await aui.click().icon().withText('chevron right').exec(); await aui.click().text('7').exec(); // select 7 await aui.click().text('ok').exec(); // then, press OK // Repeat the step for the next Datepicker widget. await aui.click().text('edit').nearestTo().text('Return').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().text('5').exec(); await aui.click().text('ok').exec();   Let's go further below to the bottom of the page, and then interact with more interfaces:  // click and check the checkbox await aui.click().checkboxUnchecked().nearestTo().text('Brushed Teeth').exec(); // finally, we turn on the switch await aui.click().switchDisabled().nearestTo().text('Enable feature').exec(); // Swipe the page to the Camera tab await aui.execOnShell('input swipe 1000 1000 100 1000').exec();   ","version":"0.11.6","tagName":"h2"},{"title":"Take a Picture with the Camera​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.11.6/general/Tutorials/flutter-android-sample-app#take-a-picture-with-the-camera","content":" In the final tab Camera, we can launch the device's camera and take a picture by pressing the record button. ‍  // Click on the button 'Take a Picture', then it will launch the camera await aui.click().button().contains().text('Take a Picture').exec(); // Notice how we select the record button. // Our demo-app intends to have the record button in a circular shape. // So we can look for an icon which is a 'circle' // It might be different in other applications. await aui.click().icon().containsText('circle').exec();   ","version":"0.11.6","tagName":"h2"},{"title":"Complete AskUI Code​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.11.6/general/Tutorials/flutter-android-sample-app#complete-askui-code","content":" This is the complete code that runs AskUI to automate our workflow:  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { xit('annotate', async () =&gt; { await aui.annotateInteractively(); }); it('should fill up the textfields and push buttons', async () =&gt; { // click on the textfield and type characters // repeat this as many times as the textfields await aui.click().text('Enter your username').exec(); await aui.type('askui').exec(); // click on the textfield and type the email await aui.click().text('Enter your email').exec(); await aui.type('askui@askui.com').exec(); // Click and type the address await aui.click().text('Enter your address').exec(); await aui.type('Haid-und-Neu-Straße 18').exec(); // Pressing enter is the equivelant to pressing the return button on the on-screen-keyboard // This gets rid of the focus from the textfield await aui.pressAndroidKey('enter').exec(); // Press the 'Submit' button await aui.click().text('Submit').exec(); // We will have a popup window that has two buttons. Press the 'Refuse' button await aui.click().text('Refuse').exec(); // Here we press multiple of toggle buttons one by one await aui.click().text('Banana').exec(); await aui.click().text('Mango').exec(); await aui.click().text('Sunny').exec(); await aui.click().text('Rainy').exec(); await aui.click().text('Windy').exec(); // Attention for swiping! /* Swipe/scroll within the page - execOnShell() can run shell commands within the device via adb. - Note that, you have to adjust the four numeric parameters, in order to make it fit to your device's screen. - The syntax is: input swipe &lt;startX&gt; &lt;startY&gt; &lt;endX&gt; &lt;endY&gt; - Depending on the screen size of your device, the coordinates should stay within the scrollable/swipeable area of the app. i.e. the 'Tabbar' at the top of the demo app is not scrollable. */ // Here we swipe the page two times in a row await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); }); it('should pick the dates', async () =&gt; { // First, we type in the desired values into the textfields. await aui.click().text('Title').exec(); await aui.type('My vacation plan').exec(); await aui.click().text('Description').exec(); await aui.type('0. Drink a lot of water').exec(); await aui.pressAndroidKey('tab').exec(); // Second, we select a desired date from the Datepicker widget. // Notice how we select the icon 'chevron right/left' to shift the calendar month. await aui.click().text('edit').nearestTo().text('Depature').exec(); // this will open up the calendar await aui.click().icon().withText('chevron right').exec(); // within the calendar, we push the &gt; icon on the top right corner await aui.click().icon().withText('chevron right').exec(); await aui.click().text('7').exec(); // select 7 await aui.click().text('ok').exec(); // then, press OK // Repeat the step for the next Datepicker widget. await aui.click().text('edit').nearestTo().text('Return').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().text('5').exec(); await aui.click().text('ok').exec(); // click and check the checkbox await aui.click().checkboxUnchecked().nearestTo().text('Brushed Teeth').exec(); // finally, we turn on the switch await aui.click().switchDisabled().nearestTo().text('Enable feature').exec(); // Swipe the page to the Camera tab await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); }); it('should take a picture', async ()=&gt;{ // Click on the button 'Take a Picture', then it will launch the camera await aui.click().button().contains().text('Take a Picture').exec(); // Notice how we select the record button. // Our demo-app intends to have the record button in a circular shape. // So we can look for an icon which is a 'circle' // It might be different in other applications. await aui.click().icon().containsText('circle').exec(); }); });   ","version":"0.11.6","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.11.6/general/Tutorials/flutter-android-sample-app#conclusion","content":" After following through this tutorial, you should be able to automate the interaction with the provided demo app. Although this example specifically provides a demo app built with Flutter, the overall method of using AskUI should also work with any mobile app running on an Android device.  If you got an issue while following this example, or in case you would like to share your use case, don't hesitate to join our community on Outverse! ","version":"0.11.6","tagName":"h2"},{"title":"pressAndroidKey","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/pressandroidkey","content":"pressAndroidKey production Press one Android key like del. Details Available keyshome, back, call, endcall, star, pound, dpad_up, dpad_down, dpad_left, dpad_right, dpad_center, volume_up, volume_down, power, camera, clear, comma, period, alt_left, alt_right, shift_left, shift_right, tab, space, sym, explorer, envelope, enter, del, grave, minus, equals, left_bracket, right_bracket, backslash, semicolon, apostrophe, slash, at, num, headsethook, focus, plus, menu, notification, search, media_play_pause, media_stop, media_next, media_previous, media_rewind, media_fast_forward, mute, page_up, page_down, switch_charset, escape, forward_del, ctrl_left, ctrl_right, caps_lock, scroll_lock, function, break, move_home, move_end, insert, forward, media_play, media_pause, media_close, media_eject, media_record, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, num_lock, numpad_0, numpad_1, numpad_2, numpad_3, numpad_4, numpad_5, numpad_6, numpad_7, numpad_8, numpad_9, numpad_divide, numpad_multiply, numpad_subtract, numpad_add, numpad_dot, numpad_comma, numpad_enter, numpad_equals, numpad_left_paren, numpad_right_paren, volume_mute, info, channel_up, channel_down, zoom_in, zoom_out, window, guide, bookmark, captions, settings, app_switch, language_switch, contacts, calendar, music, calculator, assist, brightness_down, brightness_up, media_audio_track, sleep, wakeup, pairing, media_top_menu, last_channel, tv_data_service, voice_assist, help, navigate_previous, navigate_next, navigate_in, navigate_out, dpad_up_left, dpad_down_left, dpad_up_right, dpad_down_right, media_skip_forward, media_skip_backward, media_step_forward, media_step_backward, soft_sleep, cut, copy, paste, all_apps, refresh, as well as the digits from 0 to 9 and English alphabets. Example: await aui.pressAndroidKey('notification').exec; @param {ANDROID_KEY} key - An Android key","keywords":"","version":"0.12.2"},{"title":"moveMouseTo","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/movemouseto","content":"moveMouseTo production Move mouse over the filtered element. Example: await aui.moveMouseTo().text('Grinning_Face').exec() ","keywords":"","version":"0.12.2"},{"title":"pressAndroidThirdKey","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/pressandroidthirdkey","content":"pressAndroidThirdKey production Press three Android keys like CTRL+ALT+DEL @param {ANDROID_KEY} first_key - A Android key@param {ANDROID_KEY} second_key - A Android key@param {ANDROID_KEY} third_key - A Android key","keywords":"","version":"0.12.2"},{"title":"pressKey","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/presskey","content":"pressKey production Press one keys like del Operating system specific mappings: Windows: command-key maps to windows-key Example: await aui.pressKey('tab').exec(); @param {PC_AND_MODIFIER_KEY} key - A key","keywords":"","version":"0.12.2"},{"title":"pressThreeKeys","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/pressthreekeys","content":"pressThreeKeys production Press three keys like CTRL+ALT+DEL Operating system specific mappings: Windows: command-key maps to windows-key Example: await aui.pressThreeKeys('control', 'command' 'space').exec(); @param {MODIFIER_KEY} first_key - A modifier key@param {MODIFIER_KEY} second_key - A modifier key@param {PC_KEY} third_key - A key","keywords":"","version":"0.12.2"},{"title":"scroll","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/scroll","content":"scroll production Scrolls based on the current mouse position in the x and y direction. Important: Mouse must be positioned in a scrollable area. macOS: May not work as expected! Example: // Scroll 500 pixels down in y direction await aui.scroll(0, -500).exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction.","keywords":"","version":"0.12.2"},{"title":"pressTwoKeys","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/presstwokeys","content":"pressTwoKeys production Press two keys like ALT+F4 Operating system specific mappings: Windows: command-key maps to windows-key @param {MODIFIER_KEY} first_key - A modifier key@param {PC_KEY} second_key - A key","keywords":"","version":"0.12.2"},{"title":"pressAndroidTwoKey","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/pressandroidtwokey","content":"pressAndroidTwoKey production Press two Android keys like volume_down+power. Details Available keyshome, back, call, endcall, star, pound, dpad_up, dpad_down, dpad_left, dpad_right, dpad_center, volume_up, volume_down, power, camera, clear, comma, period, alt_left, alt_right, shift_left, shift_right, tab, space, sym, explorer, envelope, enter, del, grave, minus, equals, left_bracket, right_bracket, backslash, semicolon, apostrophe, slash, at, num, headsethook, focus, plus, menu, notification, search, media_play_pause, media_stop, media_next, media_previous, media_rewind, media_fast_forward, mute, page_up, page_down, switch_charset, escape, forward_del, ctrl_left, ctrl_right, caps_lock, scroll_lock, function, break, move_home, move_end, insert, forward, media_play, media_pause, media_close, media_eject, media_record, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, num_lock, numpad_0, numpad_1, numpad_2, numpad_3, numpad_4, numpad_5, numpad_6, numpad_7, numpad_8, numpad_9, numpad_divide, numpad_multiply, numpad_subtract, numpad_add, numpad_dot, numpad_comma, numpad_enter, numpad_equals, numpad_left_paren, numpad_right_paren, volume_mute, info, channel_up, channel_down, zoom_in, zoom_out, window, guide, bookmark, captions, settings, app_switch, language_switch, contacts, calendar, music, calculator, assist, brightness_down, brightness_up, media_audio_track, sleep, wakeup, pairing, media_top_menu, last_channel, tv_data_service, voice_assist, help, navigate_previous, navigate_next, navigate_in, navigate_out, dpad_up_left, dpad_down_left, dpad_up_right, dpad_down_right, media_skip_forward, media_skip_backward, media_step_forward, media_step_backward, soft_sleep, cut, copy, paste, all_apps, refresh, as well as the digits from 0 to 9 and English alphabets. Example: await aui.pressAndroidTwoKey('volume_down', 'power').exec() @param {ANDROID_KEY} first_key - An Android key@param {ANDROID_KEY} second_key - An Android key","keywords":"","version":"0.12.2"},{"title":"scrollInside","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/scrollinside","content":"scrollInside production Moves mouse to the filtered element and scrolls in the x and y direction. macOS: May not work as expected! Example: await aui.scrollInside(0,-500).text('Bottom sheet').exec(); @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction.","keywords":"","version":"0.12.2"},{"title":"swipe","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/swipe","content":"swipe production Swipe an element in the x and y direction. Holds the left mouse button down on Windows, Linux and macOS and drags the element. On touch devices it taps the element and then drags it. Example: // Swipe the element 500 to the right await aui.swipe(500, 0).image().exec() @param {number} x_offset - A x direction. positive and negative values are accepted@param {number} y_offset - A y direction. positive and negative values are accepted","keywords":"","version":"0.12.2"},{"title":"type","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/type","content":"type production Types a text at the current position. If you need to focus the element first, use typeIn() Note: In the current version it copies the text and pastes it. By default, the text is included in the logs and sent over to the askui Inference server to predict in which context the typing has to occur. You can exclude the text from the logs and the request to the askui Inference server setting options.isSecret to true. This should not change the quality of the prediction of the askui Inference server. In this case, options.secretMask is included in logs and sent over instead of the text. Examples: await aui.type('askui@askui.com').exec() // mask the text so it is not send to the askui-inference server await aui.type('Type some text', { isSecret: true, secretMask: '**' }).exec() @param {string} text - A text to type@param {Object} [options]@param {boolean} [options.isSecret = false] - If set to true, text is neither included in logs of askui nor sent over to askui Inference for prediction.@param {string} [options.secretMask = '****'] - If options.isSecret is set to true, this is included in logs and sent over to askui Inference for prediction instead of the text.","keywords":"","version":"0.12.2"},{"title":"typeIn","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/typein","content":"typeIn production Puts the focus on the filtered element and types in the text. Note: In the current version it copies the text and pastes it. By default, the text is included in the logs and sent over to the askui Inference server to predict in which context the typing has to occur. You can exclude the text from the logs and the request to the askui Inference server setting options.isSecret to true. This should not change the quality of the prediction of the askui Inference server. In this case, options.secretMask is included in logs and sent over instead of the text. Examples: await aui.typeIn('Type some text').textfield().exec() // mask the text so it is not send to the askui-inference server await aui.typeIn('Type some text', { isSecret: true, secretMask: '**' }).textfield().exec() @param {string} text - A text to type@param {Object} [options]@param {boolean} [options.isSecret = false] - If set to true, text is neither included in logs of askui nor sent over to askui Inference for prediction.@param {string} [options.secretMask = '****'] - If options.isSecret is set to true, this is included in logs and sent over to askui Inference for prediction instead of the text.","keywords":"","version":"0.12.2"},{"title":"waitFor","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Actions/waitfor","content":"waitFor production Waits for &lt;delayInMs&gt; ms, e.g., 1000 ms. The exact delay may be a little longer than &lt;delayInMs&gt; but never shorter than that. Examples: await aui.waitFor(500).exec(); @param {number} delayInMs - The delay in ms to wait for.","keywords":"","version":"0.12.2"},{"title":"annotateInteractively","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Annotation/annotateInteractively","content":"annotateInteractively production caution There is a known bug that can cause a crash when calling annotateInteractively() on Windows. Please use annotate() as a workaround. Creates an annotated version of your screen and shows it to you so you can explore the annotated image. Recognized elements are annotated with a red bounding box. You can copy the filter needed to select the element by left-clicking on the bounding box. See also the detailed explanation to see how you can use it to create instructions. Examples: await aui.annotateInteractively(); ","keywords":"","version":"0.12.2"},{"title":"annotate","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Annotation/annotate","content":"annotate production Creates an annotated HTML file of the given image and saves it into the given path. If no image is given, then it captures the specified screen and annotates the captured image. The annotated image is saved to &lt;project_root&gt;/report. See also the detailed explanation. Examples: // The annoted image is saved to `&lt;project_root&gt;/report`. await aui.annotate(); // or UiControlClient.annotate({ imagePath: '&lt;your-image-path&gt;', outputPath: '&lt;path-of-the-generated-html&gt;', fileNamePrefix: '&lt;prefix-of-the-output-file&gt;', customElements: CustomElementJson[] // A list of custom elements. The AI model will use them to detect elements similar to them. }); ","keywords":"","version":"0.12.2"},{"title":"notExists","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Checks/notexists","content":"notExists production Expects that filtered element not exists. Always use together with expect(). Note Throws an error and stops the execution when the element is found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does exist. await aui.expect().text('Login').notExists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').notExists().exec() } catch (error) { console.log('Too bad we could find the element!'); } ","keywords":"","version":"0.12.2"},{"title":"exists","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Checks/exists","content":"exists production Expects that filtered element exists. Always use together with expect(). Note Throws an error and stops the execution when the element is not found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does not exist. await aui.expect().text('Login').exists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').exists().exec() } catch (error) { console.log('Too bad we could not find the element!'); } ","keywords":"","version":"0.12.2"},{"title":"button","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/button","content":"button production Filters for a UI element 'button'. Examples: await aui.click().button().contains().text('Google Search').exec() ","keywords":"","version":"0.12.2"},{"title":"askui UI Control Client","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Configuration/askui-ui-control-client","content":"","keywords":"","version":"0.12.2"},{"title":"Log Level​","type":1,"pageTitle":"askui UI Control Client","url":"/docs/0.12.2/api/Configuration/askui-ui-control-client#log-level","content":" Set the log level of the askui UI Control Client using the LOG_LEVEL environment variable. The following log levels are available:  &quot;fatal&quot;&quot;error&quot;&quot;warn&quot;&quot;info&quot;&quot;debug&quot;&quot;trace&quot;&quot;silent&quot;&quot;verbose&quot;.  The log level defaults to &quot;info&quot;. and it can be changed with the following command:  Bash or similar:  export LOG_LEVEL=verbose   Powershell  $env:LOG_LEVEL=&quot;verbose&quot;   ","version":"0.12.2","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"askui UI Control Client","url":"/docs/0.12.2/api/Configuration/askui-ui-control-client#properties","content":" ","version":"0.12.2","tagName":"h2"},{"title":"uiControllerUrl​","type":1,"pageTitle":"askui UI Control Client","url":"/docs/0.12.2/api/Configuration/askui-ui-control-client#uicontrollerurl","content":" uiControllerUrl: string - Default: http://127.0.0.1:6769  The url of the askui UI Controller controlling the OS.    ","version":"0.12.2","tagName":"h3"},{"title":"inferenceServerUrl​","type":1,"pageTitle":"askui UI Control Client","url":"/docs/0.12.2/api/Configuration/askui-ui-control-client#inferenceserverurl","content":" inferenceServerUrl: string - Default: https://inference.askui.com  The address of the askui Inference server.    ","version":"0.12.2","tagName":"h3"},{"title":"resize​","type":1,"pageTitle":"askui UI Control Client","url":"/docs/0.12.2/api/Configuration/askui-ui-control-client#resize","content":" resize: number? - Default: undefinedThe side length of the target image to resize to in px. Your screenshot image will be resized with the original aspect ratio, and the lengths image side will be equal to this number. This can be used to reduce the inference time by reducing the request size in case of a bad internet connection. But it can cause a decrease in the prediction quality. The resizing will be skipped if it's undefined.    ","version":"0.12.2","tagName":"h3"},{"title":"credentials​","type":1,"pageTitle":"askui UI Control Client","url":"/docs/0.12.2/api/Configuration/askui-ui-control-client#credentials","content":" credentials: Credentials Your user credentials - Optional. workspaceId: string Your workspace idtoken: string An access token for authentication with the askui Inference Server  Provide credentials for authentication with the askui Inference Server if you would like to use dedicated, more powerful and stable resources instead of public resources. Credentials can also be provided using the environment variables ASKUI_WORKSPACE_ID and ASKUI_TOKEN but in-code configuration takes precedence over these environment variables. Independent of how you configure the credentials, make sure to use one way to configure all the credentials, i.e., if you set the workspace id via setting the ASKUI_WORKSPACE_ID environment variable, you need to set token with environment variables as well.  Setting credentials in code:   let aui = await UiControlClient.build({ credentials: { workspaceId: '&lt;your workspace id&gt;', token: '&lt;your access token&gt;', } });   Setting credentials using environment variables (Powershell):  $env:ASKUI_WORKSPACE_ID = &lt;your workspace id&gt; $env:ASKUI_TOKEN = &lt;your access token&gt;   Setting credentials using environment variables (Bash or similar):  export ASKUI_WORKSPACE_ID=&lt;your workspace id&gt; export ASKUI_TOKEN=&lt;your access token&gt;    ","version":"0.12.2","tagName":"h3"},{"title":"askui UI Controller","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Configuration/askui-ui-controller","content":"","keywords":"","version":"0.12.2"},{"title":"Properties​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.12.2/api/Configuration/askui-ui-controller#properties","content":" ","version":"0.12.2","tagName":"h2"},{"title":"binaryVersion​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.12.2/api/Configuration/askui-ui-controller#binaryversion","content":" binaryVersion: string - Default: latest  There are different versions of the askui UI Controller. Not all versions are supported for all operating systems. You can specify which binary version of server you want to download and use. The default value is latest which will You can specify which binary version of server you want to download and use. The default value is latest which will download the newest version.    ","version":"0.12.2","tagName":"h3"},{"title":"display​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.12.2/api/Configuration/askui-ui-controller#display","content":" display: number - Default: 0  You can choose on which display you want to excecute all tests. You can only perform all tests on one display. The application which you want to automate should be open and selected on your chosen display.  The default value of display is 0 which is your main monitor. If you want to use your second monitor you can change the value to 1 (2 for your third monitor etc.).  There is also a possibility to detect the value of your monitors. After the start of the askui UI Controller you should see an askui icon. After clicking on this icon you can choose the option Show. You will see the same window as the following image.    Now you can identify the order of your monitors and you can also select the monitor in this configuration.    ","version":"0.12.2","tagName":"h3"},{"title":"host​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.12.2/api/Configuration/askui-ui-controller#host","content":" host: string - Default: 127.0.0.1  The host the askui UI Controller is running on.  ","version":"0.12.2","tagName":"h3"},{"title":"logFilePath​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.12.2/api/Configuration/askui-ui-controller#logfilepath","content":" logFilePath: string - Default: &lt;temp-dir&gt;/askui/askui-server.log  It is possible to specify a path for your log files. Per default we create the askui-server.log file and askui folder in your temp folder.    ","version":"0.12.2","tagName":"h3"},{"title":"logLevel​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.12.2/api/Configuration/askui-ui-controller#loglevel","content":" logLevel: LogLevels - Default: debug  You can set the log level using the LogLevels. The following values are available: &quot;fatal&quot;, &quot;error&quot;, &quot;warn&quot;, &quot;info&quot;, &quot;debug&quot;, &quot;trace&quot;, &quot;silent&quot;, &quot;verbose&quot;. All log levels are defined in an LogLevels enum.    ","version":"0.12.2","tagName":"h3"},{"title":"minimize​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.12.2/api/Configuration/askui-ui-controller#minimize","content":" minimize: boolean - Default: true  The default value of this property is true. This means that askui UI Controller will be started as minimized window.    ","version":"0.12.2","tagName":"h3"},{"title":"overWriteBinary​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.12.2/api/Configuration/askui-ui-controller#overwritebinary","content":" overWriteBinary: boolean - Default: false  Download the provided Version of askui UI Controller. If a version is already downloaded. This version will be overwritten.    ","version":"0.12.2","tagName":"h3"},{"title":"port​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.12.2/api/Configuration/askui-ui-controller#port","content":" port: number - Default: 6769  The port the askui UI Controller is running on.    ","version":"0.12.2","tagName":"h3"},{"title":"actionDelayInMs​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.12.2/api/Configuration/askui-ui-controller#actiondelayinms","content":" actionDelayInMs: number - Default: 1000  actionDelayInMs is the time that the askui UI controller waits between actions. This can be used to slow down or speed up the execution.  Let's say, you want to click on the login button and then navigate to the home page by clicking on the home button but you have to wait 2s before clicking it because it takes some time logging in. You can increase the actionDelayInMs to 2000 in this case. But be careful, as it is going to slow down all your instructions. It may be better to use waitFor() between the two clicking actions.  ","version":"0.12.2","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"askui UI Controller","url":"/docs/0.12.2/api/Configuration/askui-ui-controller#example","content":" import { UiControlClient, UiController, LogLevels } from 'askui'; describe('jest with askui', () =&gt; { // Server for controlling the operating system let uiController: UiController; beforeAll(async () =&gt; { uiController = new UiController({ // choosing the second monitor display: 1, // download the latest version of the server binaryVersion: 'latest', // start askui UI Controller as minimized application minimize: true, // using error loglevel logLevel: LogLevels.ERROR, // Set the action delay lower than the default actionDelayInMs: 500, }); }) })  ","version":"0.12.2","tagName":"h2"},{"title":"checkbox","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/checkbox","content":"checkbox production Filters for a UI element 'checkbox'. Example: await aui.moveMouseTo().checkbox().leftOf().text('Save the world').exec(); ","keywords":"","version":"0.12.2"},{"title":"container","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/container","content":"container production Filters for a UI element 'container'. Example: await aui.moveMouseTo().container().contains().text('typography').exec(); ","keywords":"","version":"0.12.2"},{"title":"containsText","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/containstext","content":"containsText production Filters for text containing the text provided as an argument. Examples: 'This is a text' === containsText('text') =&gt; true 'This is a text' === containsText('other text') =&gt; false 'This is a text' === containsText('other') =&gt; false @param {string} text - A text to be matched.","keywords":"","version":"0.12.2"},{"title":"customElement","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/customelement","content":"customElement production Filters for a 'custom element', that is a UI element which is defined by providing an image and other parameters such as degree of rotation. It allows filtering for a UI element that is not recognized by our machine learning models by default. It can also be used for pixel assertions of elements using classical template matching. See the tutorial - Custom Element for more detail. Example await aui .click() .customElement({ customImage: './logo.png', // required name: 'myLogo', // optional threshold: 0.9, // optional, defaults to 0.9 rotationDegreePerStep: 0, // optional, defaults to 0 imageCompareFormat: 'grayscale', // optional, defaults to 'grayscale' // mask:{x:0, y:0}[] // optional, a polygon to match only a certain area of the custom element }) .exec(); Arguments customImage (string, required): A cropped image in the form of a base64 string or file path. name (string, optional): A unique name that can be used for filtering for the custom element. If not given, any text inside the custom image will be detected via OCR. threshold (number, optional): A threshold for how much a UI element needs to be similar to the custom element as defined. Takes values between 0.0 (== all elements are recognized as the custom element which is probably not what you want) and 1.0 (== elements need to look exactly like the customImage which is unlikely to be achieved as even minor differences count). Defaults to 0.9. rotationDegreePerStep (number, optional): Step size in rotation degree. Rotates the custom image by this step size until 360° is exceeded. The range is from 0 to 360. Defaults to 0. imageCompareFormat ('RGB' | 'grayscale', optional): The color compare style. 'greyscale' compares the brightness of each pixel whereas 'RGB' compares all three color. Defaults to 'grayscale'. @param {CustomElementJson} customElement - The custom element to filter for.","keywords":"","version":"0.12.2"},{"title":"element","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/element","content":"element production Filters for any UI element on the screen. Since the element() itself doesn't describe any particular property of the element, in most cases, it must be used in combination with relational descriptions such as above(), below() or nearestTo() etc. Examples: await aui.moveMouseTo().element().below().text('Layers').exec(); ","keywords":"","version":"0.12.2"},{"title":"icon","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/icon","content":"icon production Filters for a UI element 'icon'. You can combine it with the element-description 'withText()' to look for a specific icon. Examples: await aui.click().icon().withText('camera').exec(); Note: This is an alpha feature. The prediction of the icon name is sometimes unstable. Use custom elements as an alternative.","keywords":"","version":"0.12.2"},{"title":"image","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/image","content":"image production Filters for a UI element 'image'. Examples: // Works if there is only one image visible on the screen await aui.click().image().exec(); // Works if you have an image with // a text below await aui.click().image().above().text('Automating WebGL').exec(); ","keywords":"","version":"0.12.2"},{"title":"matching","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/matching","content":"","keywords":"","version":"0.12.2"},{"title":"What Should I Write as Matching Text​","type":1,"pageTitle":"matching","url":"/docs/0.12.2/api/Element-Descriptions/matching#what-should-i-write-as-matching-text","content":" The text description inside the matching() should describe the element visually. It understands color, some famous company/product names, general descriptions.  It sometimes requires a bit of playing to find a matching description: E.g., puzzle piece can fail here while an icon showing a puzzle piece might work. Generally, the more detail the better.  Examples:  await aui.click().matching('a mask on purple background and a firefox logo').exec()   @param {string} text - A description of the target element. ","version":"0.12.2","tagName":"h2"},{"title":"otherElement","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/otherelement","content":"otherElement production Filters for a UI element 'other element'.","keywords":"","version":"0.12.2"},{"title":"switch","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/switch","content":"switch production Filters for a UI element 'switch'. Example: await aui.click().switch().rightOf() .text('Allow notification snoozing').exec(); ","keywords":"","version":"0.12.2"},{"title":"special","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/special","content":"special production Filters special elements defined over a specifically trained custom element descriptor. Custom element descriptors are trained on your elements that were not detected with our default models. Please contact us for further details on how to do this. We are working on a solution to provide this in our User Portal. In the example below circle refers to a circle shaped icon with specific properties. Examples: await aui.moveMouseTo().element().special(&quot;circle&quot;).exec() @param {string} text - A text to be matched.","keywords":"","version":"0.12.2"},{"title":"table","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/table","content":"table production Filters for a UI element 'table'.","keywords":"","version":"0.12.2"},{"title":"textfield","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/textfield","content":"textfield production Filters for a UI element 'textfield'. Examples: // Works if there is only one textfield visible on the screen await aui.typeIn('Oh yeah').textfield().exec(); // Works if you have a labeled textfield // Label is above the textfield await aui.typeIn('Oh yeah').textfield().below().text('E-Mail Address').exec(); ","keywords":"","version":"0.12.2"},{"title":"text","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/text","content":"text production Filters for an UI element 'text'. Takes an optional parameter to filter for a specific text. See the examples below. See also the filters withTextRegex() and withExactText() Examples: await aui.click().text().exec(); await aui.click().text('Username').exec(); // Matching with an exact text await aui.click().text().withExactText('Username').exec(); // Matching with a regex await aui.click().text().withTextRegex('\\b[Ss]\\w+').exec(); @param {string} [text] - A text to be matched.","keywords":"","version":"0.12.2"},{"title":"withExactText","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/withexacttext","content":"withExactText production Filters for equal text. Note: This should be only used in cases where the similarity comparison of {@link FluentFilters.withText()} allows not for a specific enough filtering (too many similar elements). Examples: 'text' === withExactText('text') =&gt; true 'test' === withExactText('text') =&gt; false 'other' === withExactText('text') =&gt; false await aui.moveMouseTo().text().withExactText('Basketball').exec() @param {string} text - A text to be matched.","keywords":"","version":"0.12.2"},{"title":"withTextRegex","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/withtextregex","content":"withTextRegex production Filters for texts, which match the regex pattern. Examples: 'The rain in Spain' === withTextRegex('\\b[Ss]\\w+') =&gt; true 'The rain in Portugal' === withTextRegex('\\b[Ss]\\w+') =&gt; false 'The rain in switzerland' === withTextRegex('\\b[Ss]\\w+') =&gt; true // this filters any text that contains 'pie' or 'cake' or 'Pie' or 'Cake' await aui.get().text().withTextRegex('.*([Pp]ie|[Cc]ake).*').exec(); @param {string} regex_pattern - A regex pattern","keywords":"","version":"0.12.2"},{"title":"withText","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Element-Descriptions/withtext","content":"withText production Filters for similar (doesn't need to be a 100% equal) text. Examples: 'text' === withText('text') =&gt; true 'test' === withText('text') =&gt; true 'Test' === withText('text') =&gt; true 'Text' === withText('text') =&gt; true 'TEXT' === withText('text') =&gt; true 'texst' === withText('text') =&gt; true 'texts' === withText('text') =&gt; true // usually false 'atebxtc' === withText('text') =&gt; false 'other' === withText('text') =&gt; false @param {string} text - A text to be matched.","keywords":"","version":"0.12.2"},{"title":"get","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Getters/get","content":"get production Returns an array with all filtered elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const text = await aui.get().text('Sign').exec(); console.log(text); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 } } ] ","keywords":"","version":"0.12.2"},{"title":"getAll","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Getters/getall","content":"getAll production Returns an array with all detected elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const detectedElements = await aui.getAll().exec(); console.log(detectedElements); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 250.8204241071428, ymin: 300.21332310267857, xmax: 450.6304241071428, ymax: 950.47812834821428 }, ... 381 more items } ] ","keywords":"","version":"0.12.2"},{"title":"above","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Relations/above","content":"above production Filters for an element above another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text1 | -------------- -------------- | text0 | -------------- -------------- | button | -------------- // Returns text0 because text0 is the first element above button ...text().above().button() ...text().above(0).button() // Returns text1 because text1 is the second element above button ...text().above(1).button() // Returns no element because button is below text ...button().above().text() @param {number} [optionalIndex=0] - element index","keywords":"","version":"0.12.2"},{"title":"and","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Relations/and","content":"and production Logic and operator Examples: example scene: --------------- ---------------- | icon user | | icon search | --------------- ---------------- const icons = await aui.get().icon().exec(); console.log(icons); Using only the element-description icon, the get will return both icons console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 1000, ymin: 1010, xmax: 1020, ymax: 1030 } }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] You can combine element-descriptions with the and() relation and specify exactly which icon you want. const icons = await aui.get().icon().and().withText('user').exec() console.log(icons) The get returns only the user icon although both elements are icons. console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] ","keywords":"","version":"0.12.2"},{"title":"below","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Relations/below","content":"below production Filters for an element below another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text | -------------- -------------- | button0 | -------------- -------------- | button1 | -------------- // Returns button0 because button0 is the first button below text ...button().below().text() ...button().below(0).text() // Returns button1 because button1 is the second button below text ...button().below(1).text() // Returns no element because text is above button ...text().below().button() @param {number} [optionalIndex=0] - element index","keywords":"","version":"0.12.2"},{"title":"contains","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Relations/contains","content":"contains production Filters for an element containing another element. Example: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns outerEl because outerEl contains innerEl ...outerEl().contains().innerEl() // Returns no element because innerEl contains no outerEl ...innerEl().contains().outerEl() ","keywords":"","version":"0.12.2"},{"title":"leftOf","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Relations/leftof","content":"leftOf production Filters for an element left of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl1 | | leftEl0 | | rightEl | -------------- -------------- -------------- // Returns leftEl0 because leftEl0 is the first element left of rightEl ...leftEl().leftOf().rightEl() ...leftEl().leftOf(0).rightEl() // Returns leftEl1 because leftEl1 is the second element left of rightEl ...leftEl().leftOf(1).rightEl() // Returns no element because rightEl is left of leftEl ...rightEl().leftOf().leftEl() @param {number} [optionalIndex=0] - element index","keywords":"","version":"0.12.2"},{"title":"nearestTo","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Relations/nearestto","content":"nearestTo production Filters for an element nearest to another element. Examples: -------------- | button 1 | -------------- -------------- | text | -------------- -------------- | button 2 | -------------- // Returns button 1 because button 1 is nearer to the text than button 2 ...button().nearestTo().text() ","keywords":"","version":"0.12.2"},{"title":"in","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Relations/in","content":"in production Filters for an element inside another element. Examples: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns innerEl because innerEl is inside outerEl ...innerEl().in().outerEl() // Returns nothing because innerEl is not inside outerEl ...outerEl().in().innerEl() ","keywords":"","version":"0.12.2"},{"title":"rightOf","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Relations/rightof","content":"rightOf production Filters for an element right of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl | | rightEl0 | | rightEl1 | -------------- -------------- -------------- // Returns rightEl0 because rightEl0 is the first element right of leftEl ...rightEl().rightOf().leftEl() ...rightEl().rightOf(0).leftEl() // Returns rightEl1 because rightEl1 is the second element right of leftEl ...rightEl().rightOf(1).leftEl() // Returns no element because leftEl is left of rightEl ...leftEl().rightOf().rightEl() @param {number} [optionalIndex=0] - element index","keywords":"","version":"0.12.2"},{"title":"Remote Device Controller","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Remote-Device-Controller","content":"","keywords":"","version":"0.12.2"},{"title":"Introduction & Setup​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/0.12.2/api/Remote-Device-Controller#introduction--setup","content":" ","version":"0.12.2","tagName":"h2"},{"title":"Installer​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/0.12.2/api/Remote-Device-Controller#installer","content":" Download the installer from here. Start the installer and follow the installation process. Note: Installation requires administrator rights. Create a new AskUI project as described in our documentation. Open file test/helper/jest.setup.ts in the AskUI project. Remove await uiController.start(); in beforeAll function. Remove await uiController.stop(); in afterAll function. Start the installed Remote Device Controller manually and select the screen you want to use. Note: Either through the start menu, desktop shortcut or the executable in the install directory. You should be good to go now to run your workflows as described in documentation. Note: Ensure that the Remote Device Controller is running before you start a workflow.  ","version":"0.12.2","tagName":"h3"},{"title":"Manual Update of Remote Device Controller​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/0.12.2/api/Remote-Device-Controller#manual-update-of-remote-device-controller","content":" Make use of our preview build to use the latest features by following the mentioned steps below.  Go to function beforeAll there you must modify in file test/helper/jest.setup.ts. Ensure that you have the required import UiController. import { UiController } from 'askui'; Also add the global variable if it is missing: let uiController: UiController; Modify the creation of uiController in file test/helper/jest.setup.ts: uiController = new UiController({ /** Select the display you want to run your tests on, display 0 is your main display; ignore if you have only one display */ display: &lt;YOUR_DISPLAY_ID&gt;, binaryVersion: &quot;tdk-23.10.1-preview-release-1&quot; }); Note: The ui controller creation starts typically with uiController = await UiController({ ... but the instance name might be different. Replace \\&lt;YOUR_DISPLAY_ID&gt; with the display (starting with 0 for the first display) that you want to use: display: &lt;YOUR_DISPLAY_ID&gt;, Ensure that the controller gets started before the UI controller client tries (aui) to connect. Therefore the last two lines of the function should do: await uiController.start(); await aui.connect(); Note: The ui controller client creation starts typically with aui = await UiControlClient.build({ ... but the instance name might be different. Ensure that in function afterAll the controller gets stopped after the ui controller client closes the connection: aui.disconnect(); await uiController.stop(true); You should be good to go now to run your workflows as described in documentation.  Note: New features are only supported on Windows 10/11.  ","version":"0.12.2","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/0.12.2/api/Remote-Device-Controller#features","content":" ","version":"0.12.2","tagName":"h2"},{"title":"Type Like a Human​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/0.12.2/api/Remote-Device-Controller#type-like-a-human","content":" Together with the asynchronous execution of actions we also introduce natural typing. The first iteration of this feature uses the typical typing speed of a human.  ","version":"0.12.2","tagName":"h3"},{"title":"Android on Windows​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/0.12.2/api/Remote-Device-Controller#android-on-windows","content":" AskUI automation works on an Android device that is controlled from a Windows machine. It allows you to run a workflow on an Android device, including recording the session. Instructions how to setup the Android workflow can be found in our documentation.  Please also read the knows issues section since this is just a preview feature.  ","version":"0.12.2","tagName":"h3"},{"title":"Known Issues​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/0.12.2/api/Remote-Device-Controller#known-issues","content":" ","version":"0.12.2","tagName":"h2"},{"title":"Mouse Movement​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/0.12.2/api/Remote-Device-Controller#mouse-movement","content":" You may encounter issues when mouse pointer acceleration is enabled.  ","version":"0.12.2","tagName":"h3"},{"title":"Log Files​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/0.12.2/api/Remote-Device-Controller#log-files","content":" Log files are stored under &lt;YOUR_USER_FOLDER&gt;/.askui/.  ","version":"0.12.2","tagName":"h3"},{"title":"Android​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/0.12.2/api/Remote-Device-Controller#android","content":" Recording on an Android device is not stable.Recorded resolution might be lower than the device resolution.Recorded video might be empty or single frame in cases no screen updates occurred during recording.We don't support landscape mode on Android.Devices with high DPI screen might not work as expected. ","version":"0.12.2","tagName":"h3"},{"title":"or","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Relations/or","content":"or production Logic or operator Examples: scene 1 -------------- --------------- | button | | icon | -------------- --------------- scene 2 -------------- --------------- | button | | text | -------------- --------------- In case, that your reference element can have multiple values, in the following example, the element right of the button can be either icon or text. You can use the or() relation, so your instruction is valid for both scenes const button = await aui.get().button().rightOf().icon().or().text().exec(); console.log(button); Returns the same button for both cases console output: [ DetectedElement { name: 'BUTTON', text: 'button', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] ","keywords":"","version":"0.12.2"},{"title":"Assertions","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Element Selection/assertions","content":"","keywords":"","version":"0.12.2"},{"title":"Assert the (non) Existence of Elements​","type":1,"pageTitle":"Assertions","url":"/docs/0.12.2/general/Element Selection/assertions#assert-the-non-existence-of-elements","content":" To validate if an element exists or not we use expect() in combination with exists() or notExists.  // Expect that a button with text 'Go for it' exists await aui.expect().text('Login').exists().exec(); // Expect that a text 'Do not go for it' not exists await aui.expect().text('Login').notExists().exec();   ","version":"0.12.2","tagName":"h2"},{"title":"Assert the Correctness of Values​","type":1,"pageTitle":"Assertions","url":"/docs/0.12.2/general/Element Selection/assertions#assert-the-correctness-of-values","content":" Let's say you want to check if your automation actually wrote something into a textfield. You can do two things:  ","version":"0.12.2","tagName":"h2"},{"title":"1. Use expect() to check if the text in the textfield matches​","type":1,"pageTitle":"Assertions","url":"/docs/0.12.2/general/Element Selection/assertions#1-use-expect-to-check-if-the-text-in-the-textfield-matches","content":" This technique is useful if the text you entered is unique on the screen.  // Type something into a textfield await aui.typeIn(&quot;Please find me&quot;).textfield().contains().text(&quot;Enter email&quot;).exec(); // Assert if the textfield contains the value await aui.expect().textfield().contains().text('Please find me').exists().exec();   ","version":"0.12.2","tagName":"h3"},{"title":"2. Retrieve the element with get() and use an assertions library​","type":1,"pageTitle":"Assertions","url":"/docs/0.12.2/general/Element Selection/assertions#2-retrieve-the-element-with-get-and-use-an-assertions-library","content":" If your value is not unique on your screen you can retrieve the element with get() and a different selector. For example with a relational selector like below(). With an assertion library you can assert if the value is correct.  Jest comes with assertions. You only have to import them into your AskUI-file.  info Do not forget the import mentioned at the start of the snippet!  // Add this to the start of your AskUI-file containing your workflows/instructions import {expect, jest, test} from '@jest/globals'; // Type something into a textfield await aui.typeIn(&quot;Please find me&quot;).textfield().contains().text(&quot;Enter email&quot;).exec(); // You have to retrieve the text you wrote inside the textfield here // If you retrieve the textfield it does not contain the text inside of it const textfield = await aui.get().text().below().text(&quot;User email&quot;).exec(); // below() returns an array. We want the first element of that array! expect(textfield[0].text).toBe(&quot;Please find me&quot;);  ","version":"0.12.2","tagName":"h3"},{"title":"Annotations, Screenshots and Videos","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Element Selection/annotations-and-screenshots","content":"","keywords":"","version":"0.12.2"},{"title":"Interactive Annotation​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/0.12.2/general/Element Selection/annotations-and-screenshots#interactive-annotation","content":" info Windows Users Please use annotate() as explained in the section below. The interactive annotation aui.annotateInteractively() currently leads to an error on Windows.  An interactive annotation is in essence three components:  A screenshot of whatever the AskUI controller is told to see, as defined in the config file:    Annotations, marked by the red boxes you see, which are added by the machine learning model.    Element-Descriptions, which are labels applied to the annotations of the screenshot.  Clicking an element will copy this element-description, which we can then use in the step 3 of Write Your First Instruction, which is actually using that run instructions.    ","version":"0.12.2","tagName":"h2"},{"title":"Static Annotation​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/0.12.2/general/Element Selection/annotations-and-screenshots#static-annotation","content":" The helper function annotate() creates an annotated HTML file of the given image and saves it into the given path. If no image is given, then it captures the specified screen and annotates the captured image.  Synopsis and Arguments Synopsis UiControlClient.annotate(); // or UiControlClient.annotate({ imagePath: '&lt;your-image-path&gt;', outputPath: '&lt;path-of-the-generated-html&gt;', fileNamePrefix: '&lt;prefix-of-the-output-file&gt;', customElements: CustomElementJson[] // more details in the example below }); Arguments If no argument is given, A screenshot of your specified screen will be taken, and annotated. Thereafter, it will be saved as an interactive HTML file into the report/ folder. imagePath: If defined, the image at the path is loaded and annotated.If not defined, a screenshot of your specified screen is taken and annotated. outputPath: If defined, the generated HTML report will be saved in this path.If not defined, a folder report/ will be created in the project root. fileNamePrefix: The prefix for the resulting HTML report. customElements: A list of custom elements. The AI model will use them to detect elements similar to them.  Example  /* Takes a screenshot of your selected display, and produces an HTML report file inside the default output path &lt;project_root&gt;/report. */ await aui.annotate(); /* Loads the image 'my-screenshot.png' and produces an HTML report file inside the output path 'annotation-reports/' */ await aui.annotate( { imagePath: 'my-screenshot.png', outputPath: 'annotation-reports/' }); /* Loads the image 'my-screenshot.png' together with the custom elements and produces an HTML report file inside the output path 'annotation-reports/' */ await aui.annotate( { imagePath: 'my-screenshot.png', outputPath: 'annotaion-reports/', customElements: [ { customImage: '&lt;custom_image_path|base64Image&gt;', imageCompareFormat: 'grayscale', name: 'custom element 1' }, { /* for this custom element the OCR AI model will be used to extract text from the image, since no name was given. */ customImage: '&lt;custom_image2_path|base64Image&gt;', imageCompareFormat: 'RGB', } ] });   ","version":"0.12.2","tagName":"h2"},{"title":"Taking Screenshots​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/0.12.2/general/Element Selection/annotations-and-screenshots#taking-screenshots","content":" If you want to see what AskUI sees at a specific point in the execution you can use TypeScript to create a screenshot. Here is a code-snippet you can copy and paste into your code that saves an image with the name screenshot.png to the root-folder of your project.  info Do not forget the import mentioned at the start of the snippet!  // Add this to the start of your AskUI-file containing your workflows/instructions import * as fs from 'fs'; // First, get all the information from the annotation // This will also save an interactive HTML file to the 'report/' folder const annotation = await aui.annotate(); // The screenshot is contained as a string in 'base64' format // Create a buffer with the base64 image let buf = Buffer.from(annotation.image.split('base64,')[1], 'base64'); // Write the file fs.writeFileSync(&quot;./test.png&quot;, buf);   ","version":"0.12.2","tagName":"h2"},{"title":"Recording Videos​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/0.12.2/general/Element Selection/annotations-and-screenshots#recording-videos","content":" caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly. ","version":"0.12.2","tagName":"h2"},{"title":"Automation Recorder","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Element Selection/automation-recorder","content":"Automation Recorder caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.12.2"},{"title":"Table of Contents","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/API/table-of-contents","content":"","keywords":"","version":"0.12.2"},{"title":"Actions​","type":1,"pageTitle":"Table of Contents","url":"/docs/0.12.2/api/API/table-of-contents#actions","content":" Nameclick() production Mouse left-clicks/taps on the filtered element by moving the mouse cursor to the filtered element first. If you need a simple mouseleftclick/tap only, use mouseLeftClick. Example: await aui.click().button().withText('Submit').exec() execOnShell() production Executes a shell command on the device your UiController is connected to. Example: // Open the lastpass app await aui.execOnShell('monkey -p com.lastpass.authenticator 1').exec(); // Open Google Chrome on Windows await aui.execOnShell(&quot;start chrome&quot;).exec() ;// Open Google Chrome on macOS await aui.execOnShell(&quot;open -a 'Google Chrome'&quot;).exec(); // Open Google Chrome on Linux await aui.execOnShell(&quot;chrome&quot;).exec(); @param {string} shell_command - A shell command which is executed. expect() production Expects a condition, e.g., exists() or notExits(). Use the structure expect().&lt;your filter&gt;.(exists()|notExists()) as shown in the examples below. Examples: await aui.expect().text('Login').exists().exec() await aui.expect().text('Login').notExists().exec() mouseDoubleLeftClick() production Double-clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleLeftClick().exec(); mouseDoubleMiddleClick() production Double-clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleMiddleClick().exec(); mouseDoubleRightClick() production Double-clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleRightClick().exec(); mouseLeftClick() production Clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseLeftClick().exec(); mouseMiddleClick() production Clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseMiddleClick().exec(); mouseRightClick() production Clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseRightClick().exec(); mouseToggleDown() production Toggles mouse down (Left mouse key/tap). Example: await aui.mouseToggleDown().exec(); mouseToggleUp() production Toggles mouse up (Left mouse key/tap). Example: await aui.mouseToggleUp().exec(); moveMouse() production Moves the mouse to the absolute x and y coordinates. If you want to move your mouse cursor to an element, use moveMouseTo(). Example: await aui.moveMouse(500, 500).exec(); @param {number} x_coordinate - A (positive/negative) x coordinate.@param {number} y_coordinate - A (positive/negative) y coordinate. moveMouseRelatively() production Moves the mouse from the current position (relative) in x and y direction. Example: await aui.moveMouseRelatively(20, 20).exec(); @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. moveMouseRelativelyTo() production Moves the mouse relatively to an element in the direction. This can be used when the mouse should not hover over an element anymore. Examples: // Move mouse 30 pixels below button await aui.moveMouseRelativelyTo(0, 30).button().withText('Submit').exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. moveMouseTo() production Move mouse over the filtered element. Example: await aui.moveMouseTo().button().withText('Submit').exec() pressAndroidKey() production Press one Android key like DEL @param {ANDROID_KEY} key - A Android key pressAndroidThirdKey() production Press three Android keys like CTRL+ALT+DEL @param {ANDROID_KEY} first_key - A Android key@param {ANDROID_KEY} second_key - A Android key@param {ANDROID_KEY} third_key - A Android key pressAndroidTwoKey() production Press two Android keys like ALT+F4 @param {ANDROID_KEY} first_key - A Android key@param {ANDROID_KEY} second_key - A Android key pressKey() production Press one keys like DEL Operating system specific mappings: Windows: command-key maps to windows-key @param {PC_AND_MODIFIER_KEY} key - A key pressThreeKeys() production Press three keys like CTRL+ALT+DEL Operating system specific mappings: Windows: command-key maps to windows-key @param {MODIFIER_KEY} first_key - A modifier key@param {MODIFIER_KEY} second_key - A modifier key@param {PC_KEY} third_key - A key pressTwoKeys() production Press two keys like ALT+F4 Operating system specific mappings: Windows: command-key maps to windows-key @param {MODIFIER_KEY} first_key - A modifier key@param {PC_KEY} second_key - A key scroll() production Scrolls based on the current mouse position in the x and y direction. Important: Mouse must be positioned in a scrollable area. macOS: May not work as expected! Example: // Scroll 10 up in y direction await aui.scroll(0, 10).exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. scrollInside() production Moves mouse to the filtered element and scrolls in the x and y direction. macOS: May not work as expected! Example: await aui.scroll(0, 10).textarea().exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. swipe() production Swipe an element in the x and y direction. Holds the left mouse button down on Windows, Linux and macOS and drags the element. On touch devices it taps the element and then drags it. Example: // Swipe the element 500 to the right await aui.swipe(500, 0).image().exec() @param {number} x_offset - A x direction. positive and negative values are accepted@param {number} y_offset - A y direction. positive and negative values are accepted type() production Types a text at the current position. If you need to focus the element first, use typeIn() Note: In the current version it copies the text and pastes it. Examples: await aui.type('Type some text').exec() // mask the text so it is not send to the askui-inference server await aui.type('Type some text', { isSecret: true, secretMask: '**' }).exec() @param {string} text - A text to type typeIn() production Puts the focus on the filtered element and types in the text. Note: In the current version it copies the text and pastes it. Examples: await aui.typeIn('Type some text').textfield().exec() // mask the text so it is not send to the askui-inference server await aui.typeIn('Type some text', { isSecret: true, secretMask: '**' }).textfield().exec() @param {string} text - A text to type  ","version":"0.12.2","tagName":"h2"},{"title":"Element-descriptions​","type":1,"pageTitle":"Table of Contents","url":"/docs/0.12.2/api/API/table-of-contents#element-descriptions","content":" Namebutton() production Filters for a UI element 'button'. Examples: await aui.moveMouseTo().button().exec() checkbox() production Filters for a UI element 'checkbox'. container() production Filters for a UI element 'container'. containsText() production Filters for text containing the text provided as an argument. Examples: 'This is a text' === containsText('text') =&gt; true 'This is a text' === containsText('other text') =&gt; false 'This is a text' === containsText('other') =&gt; false @param {string} text - A text to be matched. customElement() production Filters for a 'custom element', that is a UI element which is defined by providing an image and other parameters such as degree of rotation. It allows filtering for a UI element that is not recognized by our machine learning models by default. It can also be used for pixel assertions of elements using classical template matching. Example await aui .click() .customElement({ customImage: './logo.png', // required name: 'myLogo', // optional threshold: 0.9, // optional, defaults to 0.9 rotationDegreePerStep: 0, // optional, defaults to 0 imageCompareFormat: 'grayscale', // optional, defaults to 'grayscale' // mask:{x:0, y:0}[] // optional, a polygon to match only a certain area of the custom element }) .exec(); Arguments customImage (string, required): A cropped image in the form of a base64 string or file path. name (string, optional): A unique name that can be used for filtering for the custom element. If not given, any text inside the custom image will be detected via OCR. threshold (number, optional): A threshold for how much a UI element needs to be similar to the custom element as defined. Takes values between 0.0 (== all elements are recognized as the custom element which is probably not what you want) and 1.0 (== elements need to look exactly like the customImage which is unlikely to be achieved as even minor differences count). Defaults to 0.9. rotationDegreePerStep (number, optional): Step size in rotation degree. Rotates the custom image by this step size until 360° is exceeded. The range is from 0 to 360. Defaults to 0. imageCompareFormat ('RGB' | 'grayscale', optional): The color compare style. 'greyscale' compares the brightness of each pixel whereas 'RGB' compares all three color. Defaults to 'grayscale'. of the given custom image. @param {CustomElementJson} customElement - The custom element to filter for. element() production Filters for any UI element on the screen. Examples: await aui.moveMouseTo().element().exec() icon() production Filters for a UI element 'icon'. You can combine it with the element-description 'withText()' to look for a specific icon. Examples: icon().withText('plus') Note: This is an alpha feature. The prediction of the icon name is sometimes unstable. Use custom elements as an alternative. image() production Filters for a UI element 'image'. Examples: // Works if there is only one image visible on the screen await aui.click().image().exec(); // Works if you have an image with // a caption text below await aui.click().image().above().text('The caption').exec(); matching() experimental Filters elements based on a textual description. What Should I Write as Matching Text​ The text description inside the matching() should describe the element visually. It understands color, some famous company/product names, general descriptions. It sometimes requires a bit of playing to find a matching description: E.g., puzzle piece can fail here while an icon showing a puzzle piece might work. Generally, the more detail the better. Examples: await aui.click().matching('a mask on purple background and a firefox logo').exec() @param {string} text - A description of the target element. otherElement() production Filters for a UI element 'other element'. special() production Filters special elements defined over a specifically trained custom element descriptor. Custom element descriptors are trained on your elements that were not detected with our default models. Please contact us for further details on how to do this. We are working on a solution to provide this in our User Portal. In the example below circle refers to a circle shaped icon with specific properties. Examples: await aui.moveMouseTo().element().special(&quot;circle&quot;).exec() @param {string} text - A text to be matched. switch() production Filters for a UI element 'switch'. table() production Filters for a UI element 'table'. text() production Filters for an UI element 'text'. Takes an optional parameter to filter for a specific text. See the examples below. See also the filters withTextRegex() and withExactText() Examples: await aui.click().text().exec(); await aui.click().text('Username').exec(); await aui.click().text().withTextRegex('\\b[Ss]\\w+').exec(); @param {string} [text] - A text to be matched. textfield() production Filters for a UI element 'textfield'. Examples: // Works if there is only one textfield visible on the screen await aui.typeIn('Oh yeah').textfield().exec(); // Works if you have a labeled textfield // Label is above the textfield await aui.typeIn('Oh yeah').textfield().below().text('E-Mail Address').exec(); withExactText() production Filters for equal text. Note: This should be only used in cases where the similarity comparison of {@link FluentFilters.withText()} allows not for specific enough filtering (too many elements). Examples: 'text' === withExactText('text') =&gt; true 'test' === withExactText('text') =&gt; false 'other' === withExactText('text') =&gt; false await aui.moveMouseTo().text().withExactText('Password').exec() @param {string} text - A text to be matched. withText() production Filters for similar (doesn't need to be a 100% equal) text. Examples: 'text' === withText('text') =&gt; true 'test' === withText('text') =&gt; true 'Test' === withText('text') =&gt; true 'Text' === withText('text') =&gt; true 'TEXT' === withText('text') =&gt; true 'texst' === withText('text') =&gt; true 'texts' === withText('text') =&gt; true // usually false 'atebxtc' === withText('text') =&gt; false 'other' === withText('text') =&gt; false @param {string} text - A text to be matched. withTextRegex() production Filters for texts, which match the regex pattern. Examples: 'The rain in Spain' === withTextRegex('\\b[Ss]\\w+') =&gt; true 'The rain in Portugal' === withTextRegex('\\b[Ss]\\w+') =&gt; false 'The rain in switzerland' === withTextRegex('\\b[Ss]\\w+') =&gt; true await aui.get().text().withTextRegex('\\b[Ss]\\w+').exec() @param {string} regex_pattern - A regex pattern  ","version":"0.12.2","tagName":"h2"},{"title":"Relations​","type":1,"pageTitle":"Table of Contents","url":"/docs/0.12.2/api/API/table-of-contents#relations","content":" Nameabove() production Filters for an element above another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text1 | -------------- -------------- | text0 | -------------- -------------- | button | -------------- // Returns text0 because text0 is the first element above button ...text().above().button() ...text().above(0).button() // Returns text1 because text1 is the second element above button ...text().above(1).button() // Returns no element because button is below text ...button().above().text() @param {number} [optionalIndex=0] - element index and() production Logic and operator Examples: example scene: --------------- ---------------- | icon user | | icon search | --------------- ---------------- const icons = await aui.get().icon().exec(); console.log(icons); Using only the element-description icon, the get will return both icons console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 1000, ymin: 1010, xmax: 1020, ymax: 1030 } }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] You can combine element-descriptions with the and() relation and specify exactly which icon you want. const icons = await aui.get().icon().and().withText('user').exec() console.log(icons) The get returns only the user icon although both elements are icons. console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] below() production Filters for an element below another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text | -------------- -------------- | button0 | -------------- -------------- | button1 | -------------- // Returns button0 because button0 is the first button below text ...button().below().text() ...button().below(0).text() // Returns button1 because button1 is the second button below text ...button().below(1).text() // Returns no element because text is above button ...text().below().button() @param {number} [optionalIndex=0] - element index contains() production Filters for an element containing another element. Example: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns outerEl because outerEl contains innerEl ...outerEl().contains().innerEl() // Returns no element because innerEl contains no outerEl ...innerEl().contains().outerEl() in() production Filters for an element inside another element. Examples: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns innerEl because innerEl is inside outerEl ...innerEl().in().outerEl() // Returns nothing because innerEl is not inside outerEl ...outerEl().in().innerEl() leftOf() production Filters for an element left of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl1 | | leftEl0 | | rightEl | -------------- -------------- -------------- // Returns leftEl0 because leftEl0 is the first element left of rightEl ...leftEl().leftOf().rightEl() ...leftEl().leftOf(0).rightEl() // Returns leftEl1 because leftEl1 is the second element left of rightEl ...leftEl().leftOf(1).rightEl() // Returns no element because rightEl is left of leftEl ...rightEl().leftOf().leftEl() @param {number} [optionalIndex=0] - element index nearestTo() production Filters for an element nearest to another element. Examples: -------------- | button 1 | -------------- -------------- | text | -------------- -------------- | button 2 | -------------- // Returns button 1 because button 1 is nearer to the text than button 2 ...button().nearestTo().text() or() production Logic or operator Examples: scene 1 -------------- --------------- | button | | icon | -------------- --------------- scene 2 -------------- --------------- | button | | text | -------------- --------------- In case, that your reference element can have multiple values, in the following example, the element right of the button can be either icon or text. You can use the or() relation, so your instruction is valid for both scenes const button = await aui.get().button().rightOf().icon().or().text().exec(); console.log(button); Returns the same button for both cases console output: [ DetectedElement { name: 'BUTTON', text: 'button', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] rightOf() production Filters for an element right of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl | | rightEl0 | | rightEl1 | -------------- -------------- -------------- // Returns rightEl0 because rightEl0 is the first element right of leftEl ...rightEl().rightOf().leftEl() ...rightEl().rightOf(0).leftEl() // Returns rightEl1 because rightEl1 is the second element right of leftEl ...rightEl().rightOf(1).leftEl() // Returns no element because leftEl is left of rightEl ...leftEl().rightOf().rightEl() @param {number} [optionalIndex=0] - element index  ","version":"0.12.2","tagName":"h2"},{"title":"Checks​","type":1,"pageTitle":"Table of Contents","url":"/docs/0.12.2/api/API/table-of-contents#checks","content":" Nameexists() production Expects that filtered element exists. Always use together with expect(). Note Throws an error and stops the execution when the element is not found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does not exist. await aui.expect().text('Login').exists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').exists().exec() } catch (error) { console.log('Too bad we could not find the element!'); } notExists() production Expects that filtered element not exists. Always use together with expect(). Note Throws an error and stops the execution when the element is found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does exist. await aui.expect().text('Login').notExists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').notExists().exec() } catch (error) { console.log('Too bad we could find the element!'); }   ","version":"0.12.2","tagName":"h2"},{"title":"Getters​","type":1,"pageTitle":"Table of Contents","url":"/docs/0.12.2/api/API/table-of-contents#getters","content":" Nameget() production Returns an array with all filtered elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const text = await aui.get().text('Sign').exec(); console.log(text); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 } } ] getAll() production Returns an array with all detected elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const detectedElements = await aui.getAll().exec(); console.log(detectedElements); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 250.8204241071428, ymin: 300.21332310267857, xmax: 450.6304241071428, ymax: 950.47812834821428 }, ... 381 more items } ]  ","version":"0.12.2","tagName":"h2"},{"title":"Supported Keys","type":0,"sectionRef":"#","url":"/docs/0.12.2/api/Supported-Keys","content":"Supported Keys Scroll the table to the right if the table is not shown completely 🙃. Names\tDescription\tPress\tRelease\tGroupalt\tALT key\tspecial case\tspecial case\t🪄 Modifier capslock\tCAPS LOCK key\tspecial case\tspecial case\t🪄 Modifier command\tRight Windows key (Natural keyboard)\tspecial case\tspecial case\t🪄 Modifier command\tLeft Windows key (Natural keyboard)\tspecial case\tspecial case\t🪄 Modifier control\tCTRL key\tspecial case\tspecial case\t🪄 Modifier left_control\tLeft CONTROL key\tspecial case\tspecial case\t🪄 Modifier numpad_lock\tNUM LOCK key\tspecial case\tspecial case\t🪄 Modifier right_alt\tRight ALT key\tspecial case\tspecial case\t🪄 Modifier right_control\tRight CONTROL key\tspecial case\tspecial case\t🪄 Modifier right_shift\tRight SHIFT key\tspecial case\tspecial case\t🪄 Modifier shift\tSHIFT key\tspecial case\tspecial case\t🪄 Modifier Left ALT key\tspecial case\tspecial case\t🪄 Modifier Left SHIFT key\tspecial case\tspecial case\t🪄 Modifier 0\t0 key\tworks\tworks\t🔠 Alphanumeric 1\t1 key\tworks\tworks\t🔠 Alphanumeric 2\t2 key\tworks\tworks\t🔠 Alphanumeric 3\t3 key\tworks\tworks\t🔠 Alphanumeric 4\t4 key\tworks\tworks\t🔠 Alphanumeric 5\t5 key\tworks\tworks\t🔠 Alphanumeric 6\t6 key\tworks\tworks\t🔠 Alphanumeric 7\t7 key\tworks\tworks\t🔠 Alphanumeric 8\t8 key\tworks\tworks\t🔠 Alphanumeric 9\t9 key\tworks\tworks\t🔠 Alphanumeric a\tA key\tworks\tworks\t🔠 Alphanumeric b\tB key\tworks\tworks\t🔠 Alphanumeric c\tC key\tworks\tworks\t🔠 Alphanumeric d\tD key\tworks\tworks\t🔠 Alphanumeric e\tE key\tworks\tworks\t🔠 Alphanumeric f\tF key\tworks\tworks\t🔠 Alphanumeric g\tG key\tworks\tworks\t🔠 Alphanumeric h\tH key\tworks\tworks\t🔠 Alphanumeric i\tI key\tworks\tworks\t🔠 Alphanumeric j\tJ key\tworks\tworks\t🔠 Alphanumeric k\tK key\tworks\tworks\t🔠 Alphanumeric l\tL key\tworks\tworks\t🔠 Alphanumeric m\tM key\tworks\tworks\t🔠 Alphanumeric n\tN key\tworks\tworks\t🔠 Alphanumeric o\tO key\tworks\tworks\t🔠 Alphanumeric p\tP key\tworks\tworks\t🔠 Alphanumeric q\tQ key\tworks\tworks\t🔠 Alphanumeric r\tR key\tworks\tworks\t🔠 Alphanumeric s\tS key\tworks\tworks\t🔠 Alphanumeric t\tT key\tworks\tworks\t🔠 Alphanumeric u\tU key\tworks\tworks\t🔠 Alphanumeric v\tV key\tworks\tworks\t🔠 Alphanumeric w\tW key\tworks\tworks\t🔠 Alphanumeric x\tX key\tworks\tworks\t🔠 Alphanumeric y\tY key\tworks\tworks\t🔠 Alphanumeric z\tZ key\tworks\tworks\t🔠 Alphanumeric backspace\tBACKSPACE key\tworks\tworks\t⚙️ Controls delete\tDEL key\tworks\tworks\t⚙️ Controls enter\tENTER key\tworks\tworks\t⚙️ Controls escape\tESC key\tworks\tworks\t⚙️ Controls space\tSPACEBAR key\tworks\tworks\t⚙️ Controls tab\tTAB key\tworks\tworks\t⚙️ Controls &quot;The &lt; &gt; keys on the US standard keyboard, or the \\\\| key on the non-US 102-key keyboard&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols Used for miscellaneous characters; it can vary by keyboard.\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the 'single-quote/double-quote' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the ']}' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '\\|' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '[' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '`~' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '/?' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;For any country/region, the '.' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;For any country/region, the '-' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;For any country/region, the ',' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;For any country/region, the '+' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the ';:' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols down\tDOWN ARROW key\tbroken\tbroken\t➡️ Arrows left\tLEFT ARROW key\tworks\tworks\t➡️ Arrows right\tRIGHT ARROW key\tworks\tworks\t➡️ Arrows up\tUP ARROW key\tworks\tworks\t➡️ Arrows f1\tF1 key\tworks\tworks\t⚡️ Function keys f10\tF10 key\tbroken\tbroken\t⚡️ Function keys f11\tF11 key\tworks\tworks\t⚡️ Function keys f12\tF12 key\tworks\tworks\t⚡️ Function keys f13\tF13 key\tworks\tworks\t⚡️ Function keys f14\tF14 key\tworks\tworks\t⚡️ Function keys f15\tF15 key\tworks\tworks\t⚡️ Function keys f16\tF16 key\tworks\tworks\t⚡️ Function keys f17\tF17 key\tworks\tworks\t⚡️ Function keys f18\tF18 key\tworks\tworks\t⚡️ Function keys f19\tF19 key\tworks\tworks\t⚡️ Function keys f2\tF2 key\tworks\tworks\t⚡️ Function keys f20\tF20 key\tworks\tworks\t⚡️ Function keys f21\tF21 key\tworks\tworks\t⚡️ Function keys f22\tF22 key\tworks\tworks\t⚡️ Function keys f23\tF23 key\tworks\tworks\t⚡️ Function keys f24\tF24 key\tworks\tworks\t⚡️ Function keys f3\tF3 key\tworks\tworks\t⚡️ Function keys f4\tF4 key\tworks\tworks\t⚡️ Function keys f5\tF5 key\tworks\tworks\t⚡️ Function keys f6\tF6 key\tworks\tworks\t⚡️ Function keys f7\tF7 key\tworks\tworks\t⚡️ Function keys f8\tF8 key\tworks\tworks\t⚡️ Function keys f9\tF9 key\tworks\tworks\t⚡️ Function keys audio_forward Unsupported\tUnsupported\t⏯️ Media controls audio_mute\tVolume Mute key\tworks\tworks\t⏯️ Media controls audio_next\tNext Track key\tworks\tworks\t⏯️ Media controls audio_pause Unsupported\tUnsupported\t⏯️ Media controls audio_play\tPlay/Pause Media key\tbroken\tbroken\t⏯️ Media controls audio_prev\tPrevious Track key\tworks\tworks\t⏯️ Media controls audio_random Unsupported\tUnsupported\t⏯️ Media controls audio_repeat Unsupported\tUnsupported\t⏯️ Media controls audio_rewind Unsupported\tUnsupported\t⏯️ Media controls audio_stop\tStop Media key\tworks\tworks\t⏯️ Media controls audio_vol_down\tVolume Down key\tworks\tworks\t⏯️ Media controls audio_vol_up\tVolume Up key\tworks\tworks\t⏯️ Media controls Play key\tUnsupported\tUnsupported\t⏯️ Media controls Select Media key\tUnsupported\tUnsupported\t⏯️ Media controls PAUSE key\tUnsupported\tUnsupported\t⏯️ Media controls numpad_*\tMultiply key\tworks\tworks\t🔢 Keypad keys numpad_+\tAdd key\tworks\tworks\t🔢 Keypad keys numpad_-\tSubtract key\tworks\tworks\t🔢 Keypad keys numpad_.\tDecimal key\tworks\tworks\t🔢 Keypad keys numpad_/\tDivide key\tbroken\tbroken\t🔢 Keypad keys numpad_0\tNumeric keypad 0 key\tworks\tworks\t🔢 Keypad keys numpad_1\tNumeric keypad 1 key\tworks\tworks\t🔢 Keypad keys numpad_2\tNumeric keypad 2 key\tworks\tworks\t🔢 Keypad keys numpad_3\tNumeric keypad 3 key\tworks\tworks\t🔢 Keypad keys numpad_4\tNumeric keypad 4 key\tworks\tworks\t🔢 Keypad keys numpad_5\tNumeric keypad 5 key\tbroken\tbroken\t🔢 Keypad keys numpad_6\tNumeric keypad 6 key\tworks\tworks\t🔢 Keypad keys numpad_7\tNumeric keypad 7 key\tworks\tworks\t🔢 Keypad keys numpad_8\tNumeric keypad 8 key\tworks\tworks\t🔢 Keypad keys numpad_9\tNumeric keypad 9 key\tworks\tworks\t🔢 Keypad keys IME PROCESS key\tUnsupported\tUnsupported\t🈯️ International IME mode change request\tUnsupported\tUnsupported\t🈯️ International IME accept\tUnsupported\tUnsupported\t🈯️ International IME nonconvert\tUnsupported\tUnsupported\t🈯️ International IME convert\tUnsupported\tUnsupported\t🈯️ International IME Off\tUnsupported\tUnsupported\t🈯️ International IME Kanji mode\tUnsupported\tUnsupported\t🈯️ International IME Hanja mode\tUnsupported\tUnsupported\t🈯️ International IME final mode\tUnsupported\tUnsupported\t🈯️ International IME Junja mode\tUnsupported\tUnsupported\t🈯️ International IME On\tUnsupported\tUnsupported\t🈯️ International IME Hangul mode\tUnsupported\tUnsupported\t🈯️ International IME Hanguel mode (maintained for compatibility; use VK_HANGUL)\tUnsupported\tUnsupported\t🈯️ International IME Kana mode\tUnsupported\tUnsupported\t🈯️ International X2 mouse button\tUnsupported\tUnsupported\t🖱️Mouse X1 mouse button\tUnsupported\tUnsupported\t🖱️Mouse Middle mouse button (three-button mouse)\tUnsupported\tUnsupported\t🖱️Mouse Left mouse button\tUnsupported\tUnsupported\t🖱️Mouse Right mouse button\tUnsupported\tUnsupported\t🖱️Mouse end\tEND key\tworks\tworks\t🦄 Special purpose home\tHOME key\tworks\tworks\t🦄 Special purpose insert\tINS key\tworks\tworks\t🦄 Special purpose lights_kbd_down Unsupported\tUnsupported\t🦄 Special purpose lights_kbd_toggle Unsupported\tUnsupported\t🦄 Special purpose lights_kbd_up Unsupported\tUnsupported\t🦄 Special purpose lights_mon_down Unsupported\tUnsupported\t🦄 Special purpose lights_mon_up Unsupported\tUnsupported\t🦄 Special purpose pagedown\tPAGE DOWN key\tworks\tworks\t🦄 Special purpose pageup\tPAGE UP key\tworks\tworks\t🦄 Special purpose printscreen\tPRINT SCREEN key\tbroken\tbroken\t🦄 Special purpose Clear key\tUnsupported\tUnsupported\t🦄 Special purpose PA1 key\tUnsupported\tUnsupported\t🦄 Special purpose Zoom key\tUnsupported\tUnsupported\t🦄 Special purpose Erase EOF key\tUnsupported\tUnsupported\t🦄 Special purpose ExSel key\tUnsupported\tUnsupported\t🦄 Special purpose CrSel key\tUnsupported\tUnsupported\t🦄 Special purpose Attn key\tUnsupported\tUnsupported\t🦄 Special purpose &quot;Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP&quot;\tUnsupported\tUnsupported\t🦄 Special purpose Start Application 2 key\tUnsupported\tUnsupported\t🦄 Special purpose Start Application 1 key\tUnsupported\tUnsupported\t🦄 Special purpose Start Mail key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Start and Home key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Favorites key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Search key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Stop key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Refresh key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Forward key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Back key\tUnsupported\tUnsupported\t🦄 Special purpose SCROLL LOCK key\tUnsupported\tUnsupported\t🦄 Special purpose Separator key\tUnsupported\tUnsupported\t🦄 Special purpose Computer Sleep key\tUnsupported\tUnsupported\t🦄 Special purpose Applications key (Natural keyboard)\tUnsupported\tUnsupported\t🦄 Special purpose HELP key\tUnsupported\tUnsupported\t🦄 Special purpose EXECUTE key\tUnsupported\tUnsupported\t🦄 Special purpose PRINT key\tUnsupported\tUnsupported\t🦄 Special purpose SELECT key\tUnsupported\tUnsupported\t🦄 Special purpose CLEAR key\tUnsupported\tUnsupported\t🦄 Special purpose Control-break processing\tUnsupported\tUnsupported\t🦄 Special purpose","keywords":"","version":"0.12.2"},{"title":"Prompt Selectors","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Element Selection/prompt-selectors","content":"Prompt Selectors caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.12.2"},{"title":"Multi Language Support","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Element Selection/multi-language-support","content":"Multi Language Support caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.12.2"},{"title":"Relational Selectors","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Element Selection/relational-selectors","content":"","keywords":"","version":"0.12.2"},{"title":"Selecting an Element by Visual Relation​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.12.2/general/Element Selection/relational-selectors#selecting-an-element-by-visual-relation","content":" After reading the next section you will know how to use the full power of all the relational element-descriptions. Additionally, you learn what pitfalls you can fall into and how to avoid them in the future.  We will use the Selectorshub practice page for the demonstration.  We’ll discuss the following relational element-descriptions:  above()below()contains()in()leftOf()rightOf()nearestTo()  ","version":"0.12.2","tagName":"h2"},{"title":"above()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.12.2/general/Element Selection/relational-selectors#above","content":" When you want to click on a textfield and it is above an element, like for example a button with the text Submit. You can do it with above(). The following code snippet moves the mouse to the textfield above the Submit-button:  await aui .click() .textfield() .above() .button() .withText('Submit') .exec();     ","version":"0.12.2","tagName":"h2"},{"title":"below()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.12.2/general/Element Selection/relational-selectors#below","content":" When you want to select a textfield you can do so by finding the correct label, which is often above the textfield. The following code snippet moves the mouse to the textfield below the text Mobile Number:  await aui .moveMouseTo() .textfield() .below() .text() .withText('Mobile Number') .exec();     ","version":"0.12.2","tagName":"h2"},{"title":"contains()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.12.2/general/Element Selection/relational-selectors#contains","content":" For selecting an element, that contains another element, contains() is the right candidate. It is especially useful if you want to select a textfield with a placeholder text inside it. The text inside the textfield is annotated as an element itself.  If you have problems with selecting a specific element, always run annotate() to create a screenshot of all the annotations or use annotateInteractively() to see if you need to use contains().  The following snippet moves the mouse to a textfield based on its placeholder text First Crush which is contained in the textfield:  await aui .moveMouseTo() .textfield() .contains() .text() .withText('First Crush') .exec();     ","version":"0.12.2","tagName":"h2"},{"title":"in()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.12.2/general/Element Selection/relational-selectors#in","content":" When you want to target an element that is inside another element you can use in().  -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | --------------------   The following code snippet moves the mouse pointer to the text of the first textfield AskUI found:  await aui .moveMouseTo() .text() .in() .textfield() .exec();     ","version":"0.12.2","tagName":"h2"},{"title":"leftOf() and rightOf()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.12.2/general/Element Selection/relational-selectors#leftof-and-rightof","content":" If you want to select an element based on its location left or right of another element you have to use leftOf() or rightOf() respectively.  💡 If you do not specify another element-description like withText() then you will get the nearest element. Otherwise, AskUI retrieves the nearest element that matches the element-description!  await aui .moveMouseTo() .text() .leftOf() .text() .withText('Denmark') .exec();     await aui .moveMouseTo() .text() .rightOf() .text() .withExactText('Joe Root') .exec();     ","version":"0.12.2","tagName":"h2"},{"title":"nearestTo()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.12.2/general/Element Selection/relational-selectors#nearestto","content":" Filtering with the nearestTo() will return the element nearest to another element. This is useful when the direction is not clear on where to search. Especially responsive designs are prone to wrap elements into a new line where leftOf() and rightOf() would fail.  await aui .moveMouseTo() .textfield() .nearestTo() .text() .withTextRegex('User Em*') .exec();     ","version":"0.12.2","tagName":"h2"},{"title":"Additional Considerations About the Distance Metric​","type":1,"pageTitle":"Relational Selectors","url":"/docs/0.12.2/general/Element Selection/relational-selectors#additional-considerations-about-the-distance-metric","content":" The distance is not entirely based on physical distance. If you use an additional element-description like withText() it optimizes to find the best match. It also considers special cases, for example, modal dialogs. Therefore the element selected by AskUI might sometimes be wrong from a user's point of view.  You can use moveMouseTo() like in the following example to see what element an instruction targets.  await aui .moveMouseTo() .textfield() .above() .button() .withText('Submit') .exec()  ","version":"0.12.2","tagName":"h2"},{"title":"Scraping and Storing Elements","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Element Selection/scraping-and-storing-lements","content":"","keywords":"","version":"0.12.2"},{"title":"Basic Usage​","type":1,"pageTitle":"Scraping and Storing Elements","url":"/docs/0.12.2/general/Element Selection/scraping-and-storing-lements#basic-usage","content":" The get()-Instruction returns an array of all the elements it found. It looks like this example:   console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 } }, ... ]   Usually you do not want every element from your UI returned. So you pair it with an element-selector:  const textFieldText = await aui .get() .text() .in() .textfield() .exec();   [ DetectedElement { name: 'text', text: 'Search', bndbox: BoundingBox { xmin: 488, ymin: 138, xmax: 548, ymax: 164 }, colors: [ '', '', '' ] } ]   ","version":"0.12.2","tagName":"h2"},{"title":"Extract the Value​","type":1,"pageTitle":"Scraping and Storing Elements","url":"/docs/0.12.2/general/Element Selection/scraping-and-storing-lements#extract-the-value","content":" You can extract the value by reading the text-property of the DetectedElement.  Notice: textFieldText is an array. You have to iterate over it or use an index to access the DetectedElement.  // Access by index // textFieldTextValue gets the value 'Search' const textFieldTextValue = textFieldText?.[0]?.text;   ","version":"0.12.2","tagName":"h2"},{"title":"Use Extracted Value as Input​","type":1,"pageTitle":"Scraping and Storing Elements","url":"/docs/0.12.2/general/Element Selection/scraping-and-storing-lements#use-extracted-value-as-input","content":" You can use the extracted value as input for another textfield for example:  await aui .typeIn(textFieldTextValue) .textfield() .contains() .text() .withText(&quot;AskUI&quot;) .exec();  ","version":"0.12.2","tagName":"h2"},{"title":"Tables","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Element Selection/tables","content":"Tables caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.12.2"},{"title":"Desktop Automation","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Executing Automations/desktop-automation","content":"Desktop Automation caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.12.2"},{"title":"Mobile Automation","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Executing Automations/mobile-automation","content":"","keywords":"","version":"0.12.2"},{"title":"Android​","type":1,"pageTitle":"Mobile Automation","url":"/docs/0.12.2/general/Executing Automations/mobile-automation#android","content":" In this tutorial, we will walk you through how to set up an Android device for automating mobile apps running on Android devices (physical or emulated).  ","version":"0.12.2","tagName":"h2"},{"title":"Requirements​","type":1,"pageTitle":"Mobile Automation","url":"/docs/0.12.2/general/Executing Automations/mobile-automation#requirements","content":" Android device: real or emulated.  Set up a Real Android Device​  This part is for setting up a real Android device. If you want to use an Android emulator instead, then you can skip it and go directly to the next step.  To use additional development features in an Android device, you need to enable the Developer Options within the device. To enable the Developer Options, tap the Build Number option 7 times. You can find this option in one of the following locations, depending on your Android version:  Android 9 (API level 28) and higher: Settings &gt; About Phone &gt; Build NumberAndroid 8.0.0 (API level 26) and Android 8.1.0 (API level 26): Settings &gt; System &gt; About Phone &gt; Build NumberAndroid 7.1 (API level 25) and lower: Settings &gt; About Phone &gt; Build Number  After enabling the Developer Options, you can enable the USB debugging option. This option will allow the Android Studio and other SDK tools to recognize your Android device via USB. To enable USB debugging, toggle the USB debugging option in the Developer Options menu. You can find this option in one of the following locations, depending on your Android version:  Android 9 (API level 28) and higher: Settings &gt; System &gt; Advanced &gt; Developer Options &gt; USB debuggingAndroid 8.0.0 (API level 26) and Android 8.1.0 (API level 26): Settings &gt; System &gt; Developer Options &gt; USB debuggingAndroid 7.1 (API level 25) and lower: Settings &gt; Developer Options &gt; USB debugging  ","version":"0.12.2","tagName":"h3"},{"title":"Install Android SDK Command-line Tools​","type":1,"pageTitle":"Mobile Automation","url":"/docs/0.12.2/general/Executing Automations/mobile-automation#install-android-sdk-command-line-tools","content":" Download the SDK Platform-Tools from the official site.  Unzip the .zip file. You can find the adb binary within the extracted directory.  cd platform-tools # Show every available Android devices ./adb devices   info The command adb is usually not added to your $PATH and will not be available globally. Please follow the official docs to set it up.  ","version":"0.12.2","tagName":"h3"},{"title":"3. Set Up the ADBKeyboard​","type":1,"pageTitle":"Mobile Automation","url":"/docs/0.12.2/general/Executing Automations/mobile-automation#3-set-up-the-adbkeyboard","content":" Until now, you have prepared your Android device and now you are ready to go for automating our Android app. But before you jump into this phase, you will set up one more utility that will make the procedure easier.  ADBKeyboard is a virtual keyboard that can be installed on Android devices. It enables us to type within the Android device by using command lines commands via adb.  One noticeable advantage of using ADBKeyboard is that it can also handle base64 encoding, which becomes handy if you want to type Unicode characters such as emojis🔥 For more details about this virtual keyboard, see here.  To install the ADBKeyboard on your device,  Download the ADBKeyboard package from this GitHub Repository (Important: Version 2.0) Unzip it. Find your device: # make sure that your Android device is connected. # in case of using the emulator, it should be running adb devices Install the ADBKeyboard on the device: # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; install ADBKeyboard.apk Configure the ADB Keyboard: adb -s &lt;your device id&gt; shell settings put secure default_input_method com.android.adbkeyboard/.AdbIME Enable the ADBKeyboard: adb -s &lt;your device id&gt; shell ime enable com.android.adbkeyboard/.AdbIME To check if it is enabled: Click on a textfield in an app and see if the ADB Keyboard {ON} notification is shown at the bottom of the screen.  ","version":"0.12.2","tagName":"h3"},{"title":"4. Done​","type":1,"pageTitle":"Mobile Automation","url":"/docs/0.12.2/general/Executing Automations/mobile-automation#4-done","content":" We are finally done with the preparation for automating apps running on Android devices.  You can now try your setup in our Automate Web Search on Android Devices Tutorial.  If you have a recurring or persisting issue while following this tutorial, don’t hesitate to ask the Outverse-Community for help!  ","version":"0.12.2","tagName":"h3"},{"title":"iOS Automation​","type":1,"pageTitle":"Mobile Automation","url":"/docs/0.12.2/general/Executing Automations/mobile-automation#ios-automation","content":" caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly. ","version":"0.12.2","tagName":"h2"},{"title":"Web Automation","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Executing Automations/web-automation","content":"Web Automation caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.12.2"},{"title":"Multi Device Automation","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Executing Automations/multi-device-automation","content":"","keywords":"","version":"0.12.2"},{"title":"1. Download and Prepare the askui-ui-controller Binary for Each Device​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.12.2/general/Executing Automations/multi-device-automation#1-download-and-prepare-the-askui-ui-controller-binary-for-each-device","content":" Download the binary/binaries for the respective platform(s): info macOS After installation to Applications remove the quarantine flag with the following command run from a terminal: xattr -d com.apple.quarantine /Applications/askui-ui-controller.app Windows | macOS(intel) | macOS(silicon) | Linux  macOS and Linux only: If you downloaded the askui-ui-controller manually from the link above, you have to make it executable.  macOS: Mount the downloaded askui-ui-controller.dmg by double-clicking it and copy the askui-ui-controller.app to wherever you want to store it. Then, the executable binary will be within the .app package: askui-ui-controller.app/Contents/MacOS/askui-ui-controller Linux: Run the command below to make it executable: chmod +x askui-ui-controller.AppImage   If the remote devices runs Android, see Android Only.  ","version":"0.12.2","tagName":"h2"},{"title":"Android Only:​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.12.2/general/Executing Automations/multi-device-automation#android-only","content":" Prepare your Android device with this tutorial.  Use the commands below, if you want to connect your Android device via adb wirelessly:  # Connect the Android device with a # USB cable, and run this command: # Run this command to confirm that your # Android device is discoverable adb devices # will print the &lt;device-id&gt; # replace &lt;device-id&gt; with your device-id adb -s &lt;device-id&gt; tcpip 9000 # replace the &lt;local-ip-address&gt; adb -s &lt;device-id&gt; connect &lt;local-ip-address&gt;:9000 # Run this command, if you want to check the local # ip address of the android device adb -s &lt;device-id&gt; shell ip -f inet addr show wlan0 # Now you can disconnect the USB cable from the Android device. # Confirm that the Android device is recognised by adb wirelessly. adb devices   ","version":"0.12.2","tagName":"h3"},{"title":"2. Configure the jest.setup.ts​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.12.2/general/Executing Automations/multi-device-automation#2-configure-the-jestsetupts","content":" Figure out the local IP address of the remote device, and then change the &lt;local-ip-address&gt; of the jest.setup.ts:  import { UiControlClient, UiController } from 'askui'; let localDevice: UiControlClient; let remoteDevice: UiControlClient; jest.setTimeout(60 * 1000 * 60); beforeAll(async () =&gt; { // Get your AskUI credentials from https://app.askui.com/workspaces const credentials = { workspaceId: '&lt;your-workspace-id&gt;', token: '&lt;your-token&gt;', } // This client will communicate with // the controller running on this local device. localDevice = await UiControlClient.build({ uiControllerUrl: &quot;ws://127.0.0.1:6769&quot;, credentials: credentials, }); await localDevice.connect(); // This client will communicate with // the controller running on the remote device. // Replace the &lt;local-ip-address&gt; // In case of Android device, replace it with 127.0.0.1 remoteDevice = await UiControlClient.build({ uiControllerUrl: &quot;ws://&lt;local-ip-address&gt;:6769&quot;, credentials: credentials, }); await remoteDevice.connect(); }); afterAll(async () =&gt; { localDevice.close(); remoteDevice.close(); }); export { localDevice, remoteDevice };   ","version":"0.12.2","tagName":"h2"},{"title":"3. Run the Controller on Each Device​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.12.2/general/Executing Automations/multi-device-automation#3-run-the-controller-on-each-device","content":" danger Change to the directory of the askui-ui-controller binary first: See Download and Prepare step.  Run the binary AskUI UI Controller on the local and remote devices with the following command:  # Windows powershell .\\askui-ui-controller.exe --host 0.0.0.0 -d 0 -m # Windows cmd start askui-ui-controller.exe --host 0.0.0.0 -d 0 -m # macOS ./askui-ui-controller --host 0.0.0.0 -d 0 -m # Linux ./askui-ui-controller.AppImage --host 0.0.0.0 -d 0 -m   If running successfully, you should see the logs printed on the terminal, e.g:  [2023-01-02 17:31:19.634 +0100] DEBUG (AskuiUiController): Window is minimized. [2023-01-02 17:31:19.639 +0100] INFO (AskuiUiController): Selecting display number 0. [2023-01-02 17:31:19.641 +0100] INFO (AskuiUiController): Successfully started.   ","version":"0.12.2","tagName":"h2"},{"title":"Android Only:​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.12.2/general/Executing Automations/multi-device-automation#android-only-1","content":" If your remote device is an Android device, run the AskUI UI Controller on the local device (desktop) with an extra option as shown below:  # Windows powershell .\\askui-ui-controller.exe --host 0.0.0.0 -d 0 -m -r android # Windows cmd start askui-ui-controller.exe --host 0.0.0.0 -d 0 -m -r android # macOS ./askui-ui-controller --host 0.0.0.0 -d 0 -m -r android # Linux ./askui-ui-controller.AppImage --host 0.0.0.0 -d 0 -m -r android   Make sure that your local device (desktop) is running TWO DIFFERENT askui-ui-controller, if you want to control the local device and the Android device at the same time.  ","version":"0.12.2","tagName":"h3"},{"title":"4. Write the AskUI Code​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.12.2/general/Executing Automations/multi-device-automation#4-write-the-askui-code","content":" Write the AskUI code in test/my-first-askui-test-suite.test.ts:  import { localDevice, remoteDevice } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should work with multiple devices', async () =&gt; { const everyElement_remote = await remoteDevice.getAll().exec(); console.log(everyElement_remote); await localDevice.moveMouse(500,500).exec(); const everyElement_local = await localDevice.getAll().exec(); console.log(everyElement_local); }); });   ","version":"0.12.2","tagName":"h2"},{"title":"5. Run the Code​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.12.2/general/Executing Automations/multi-device-automation#5-run-the-code","content":" Run the command below to run the AskUI code:  npm run askui   ","version":"0.12.2","tagName":"h2"},{"title":"6. Conclusion​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/0.12.2/general/Executing Automations/multi-device-automation#6-conclusion","content":" Now you should be able to automate multiple devices in the network. If you got any issues while following this tutorial, don't hesitate to ask our Outverse-Community! ","version":"0.12.2","tagName":"h2"},{"title":"Single Device Automation","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Executing Automations/single-device-automation","content":"Single Device Automation caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.12.2"},{"title":"Enterprise Checklist","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Getting Started/enterprise-checklist","content":"","keywords":"","version":"0.12.2"},{"title":"Network​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/0.12.2/general/Getting Started/enterprise-checklist#network","content":" This is often a tricky one. So if you experience problems installing AskUI that suggests the problem is missing internet access:  Please check our Troubleshooting - Proxy pageGet help from your IT-department  ","version":"0.12.2","tagName":"h2"},{"title":"Software Needed​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/0.12.2/general/Getting Started/enterprise-checklist#software-needed","content":" ","version":"0.12.2","tagName":"h2"},{"title":"Node.js​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/0.12.2/general/Getting Started/enterprise-checklist#nodejs","content":" Install Node.js from the official download page.  Open a terminal/Powershell and run the following commands to check if you have the correct versions of node and npm:  node --versionnpm --version  ","version":"0.12.2","tagName":"h3"},{"title":"Python​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/0.12.2/general/Getting Started/enterprise-checklist#python","content":" Python 3.10 or higher needs to be installed. Open a terminal/Powershell and run python --version to check if you have the correct version.  Official Download page for WindowsOfficial Download page for macOS  ","version":"0.12.2","tagName":"h3"},{"title":"Windows​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/0.12.2/general/Getting Started/enterprise-checklist#windows","content":" When you want to use the AskUI Runner you will create a virtual environment.  Follow these instruction. And consult your IT-department if you run into problems.  ","version":"0.12.2","tagName":"h3"},{"title":"Install Dependencies​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/0.12.2/general/Getting Started/enterprise-checklist#install-dependencies","content":" You will probably have to install dependencies like node-packages over a company internal repository management system like Artifactory.  Find out how to set up Node.js and Python for your internal repository management system. Consult your IT-department if necessary.Check our proxy troubleshooting page for AskUI specific guidance on how to setup the proxy for Node.js.  ","version":"0.12.2","tagName":"h3"},{"title":"Permissions​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/0.12.2/general/Getting Started/enterprise-checklist#permissions","content":" UiController/Remote Device Controller needs permissions for screen recording and accessibility features to control your machine like a human. Follow the instructions for your operating system.  ","version":"0.12.2","tagName":"h3"},{"title":"macOS​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/0.12.2/general/Getting Started/enterprise-checklist#macos","content":" Enable screen recording instructionsEnable accessibility instructions ","version":"0.12.2","tagName":"h3"},{"title":"Install AskUI Windows","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Getting Started/getting-started","content":"","keywords":"","version":"0.12.2"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/0.12.2/general/Getting Started/getting-started#requirements","content":" Node.js version 16 or abovenpm in version 7.10 or above (usually comes with the Node.js installation)A text editor/IDE like Visual Studio Code  ","version":"0.12.2","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/0.12.2/general/Getting Started/getting-started#installation","content":" Open a directory where you would like to place the AskUI setup. If you haven’t already, set up an NPM project by running:  npm init -y   This will create a package.json file inside your present working directory which contains the configuration of your project including a description of its dependencies.  Install askui and other dependencies for writing and executing tests:  npm i --save-dev askui @askui/askui-reporters @askui/jest-allure-circus typescript ts-node @types/jest ts-jest jest   Quick explanation of all the dependencies askui: Controlling a multitude of operating systems with commands based on automatically detected screen elements etc.@askui/askui-reporters: AskUI reporters for nice looking reports.typescript: Allowing you to write your tests in TypeScript instead of JavaScriptts-node: TypeScript execution and REPL for node.js, with source map and native ESM support.jest: Allowing you to write and run tests (describe, it, assertions, mocking etc.)ts-jest: A Jest transformer with source map support that lets you use Jest to test projects written in TypeScript@types/jest: Types for Jest  note To create and serve a static HTML-Report you have to install Allure and then call allure serve ./allure-results from your root-directory.  ","version":"0.12.2","tagName":"h2"},{"title":"Access Token​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/0.12.2/general/Getting Started/getting-started#access-token","content":" As we need to prevent misuse of our API, we need you to create some credentials through our AskUI Studio (for free).  Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio. ","version":"0.12.2","tagName":"h2"},{"title":"Framework Configuration","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Getting Started/configure_test_framework","content":"","keywords":"","version":"0.12.2"},{"title":"Jest​","type":1,"pageTitle":"Framework Configuration","url":"/docs/0.12.2/general/Getting Started/configure_test_framework#jest","content":" You can configure Jest with the jest.config.ts. It should look something like this:  export default { preset: 'ts-jest', testEnvironment: 'node', setupFilesAfterEnv: ['./helper/jest.setup.ts'], sandboxInjectedGlobals: ['Math'] };   In case your Jest tests are executed slowly, make sure you have added 'Math' to sandboxInjectedGlobals.  caution The option sandboxInjectedGlobals was named extraGlobals in Jest v27 and lower. ","version":"0.12.2","tagName":"h2"},{"title":"Install AskUI Android","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Getting Started/getting-started-android","content":"","keywords":"","version":"0.12.2"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI Android","url":"/docs/0.12.2/general/Getting Started/getting-started-android#requirements","content":" AskUI on own machine (See above)Prepared Android deviceAndroid SDK Command-line Tools ","version":"0.12.2","tagName":"h2"},{"title":"Install AskUI macOS","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Getting Started/getting-started-macos","content":"","keywords":"","version":"0.12.2"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI macOS","url":"/docs/0.12.2/general/Getting Started/getting-started-macos#requirements","content":" Node.js version 16 or abovenpm in version 7.10 or above (usually comes with the Node.js installation)A text editor/IDE like Visual Studio Code  danger Some users have reported instability running AskUI on macOS with external displays and/or virtual desktops (called Spaces). If you experience similar issues, please disconnect external displays and close virtual desktops, or see documentation on running AskUI in Docker.  ","version":"0.12.2","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Install AskUI macOS","url":"/docs/0.12.2/general/Getting Started/getting-started-macos#installation","content":" Open a directory where you would like to place the AskUI setup. If you haven’t already, set up an NPM project by running:  npm init -y   This will create a package.json file inside your present working directory which contains the configuration of your project including a description of its dependencies.  Install askui and other dependencies for writing and executing tests:  npm i --save-dev askui @askui/askui-reporters @askui/jest-allure-circus typescript ts-node @types/jest ts-jest jest   Quick explanation of all the dependencies askui: Controlling a multitude of operating systems with commands based on automatically detected screen elements etc.@askui/askui-reporters: AskUI reporters for nice looking reports.typescript: Allowing you to write your tests in TypeScript instead of JavaScriptts-node: TypeScript execution and REPL for node.js, with source map and native ESM support.jest: Allowing you to write and run tests (describe, it, assertions, mocking etc.)ts-jest: A Jest transformer with source map support that lets you use Jest to test projects written in TypeScript@types/jest: Types for Jest  note To create and serve a static HTML-Report you have to install Allure and then call allure serve ./allure-results from your root-directory.  ","version":"0.12.2","tagName":"h2"},{"title":"Access Token​","type":1,"pageTitle":"Install AskUI macOS","url":"/docs/0.12.2/general/Getting Started/getting-started-macos#access-token","content":" As we need to prevent misuse of our API, we need you to create some credentials through our AskUI Studio (while still free) and configure our library to use these credentials for authenticating and authorizing with our API.  Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio. ","version":"0.12.2","tagName":"h2"},{"title":"Install AskUI Linux","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Getting Started/getting-started-linux","content":"","keywords":"","version":"0.12.2"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI Linux","url":"/docs/0.12.2/general/Getting Started/getting-started-linux#requirements","content":" Node.js version 16 or abovenpm in version 7.10 or above (usually comes with the Node.js installation)A text editor/IDE like Visual Studio Code⚠️ Information for Wayland.  ","version":"0.12.2","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Install AskUI Linux","url":"/docs/0.12.2/general/Getting Started/getting-started-linux#installation","content":" Open a directory where you would like to place the AskUI setup. If you haven’t already, set up an NPM project by running:  npm init -y   This will create a package.json file inside your present working directory which contains the configuration of your project including a description of its dependencies.  Install askui and other dependencies for writing and executing tests:  npm i --save-dev askui @askui/askui-reporters @askui/jest-allure-circus typescript ts-node @types/jest ts-jest jest   Quick explanation of all the dependencies askui: Controlling a multitude of operating systems with commands based on automatically detected screen elements etc.@askui/askui-reporters: AskUI reporters for nice looking reports.typescript: Allowing you to write your tests in TypeScript instead of JavaScriptts-node: TypeScript execution and REPL for node.js, with source map and native ESM support.jest: Allowing you to write and run tests (describe, it, assertions, mocking etc.)ts-jest: A Jest transformer with source map support that lets you use Jest to test projects written in TypeScript@types/jest: Types for Jest  note To create and serve a static HTML-Report you have to install Allure and then call allure serve ./allure-results from your root-directory.  ","version":"0.12.2","tagName":"h2"},{"title":"Access Token​","type":1,"pageTitle":"Install AskUI Linux","url":"/docs/0.12.2/general/Getting Started/getting-started-linux#access-token","content":" As we need to prevent misuse of our API, we need you to create some credentials through our AskUI Studio (while still free) and configure our library to use these credentials for authenticating and authorizing with our API.  Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio. ","version":"0.12.2","tagName":"h2"},{"title":"Start","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Getting Started/start","content":"Start Choose what you want to automate. 📦 Quickstart Try AskUI without any hassle in Gitpod. Try it now! 🪟 Windows Learn how to automate on Windows. Get started! 🤖 Android Learn how to automate an Android device. Get started! 👩🏻‍💻 macOS Learn how to automate on macOS Get started! 💻 Linux Learn how to automate on Linux. Get started! 🏢 Enterprise Checklist Setup in an enterprise environment. Get started! 📱 iOS 🚧 Coming soon! 🚧 Get started!","keywords":"","version":"0.12.2"},{"title":"How AskUI Works","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Getting Started/guide-how-askui-works","content":"","keywords":"","version":"0.12.2"},{"title":"Overview​","type":1,"pageTitle":"How AskUI Works","url":"/docs/0.12.2/general/Getting Started/guide-how-askui-works#overview","content":" In this article, we will give a detailed overview of AskUI`s architecture and how it works under the hood.    AskUI is built on top of a number of components. We will cover what these components are and how they work together to provide a flexible and reliable way to automate interactions with UI elements of any operating system or platform.  By the end of this article, whether you're a software developer, QA engineer, or automation specialist, you'll have a solid understanding of how AskUI works, and be able to use this knowledge to build more efficient automation for your project.  AskUI consists of three building blocks:  AskUI Control ClientAskUI UI ControllerAskUI Inference Server  We will step through each of them and see how they work together to perform UI automation.    ","version":"0.12.2","tagName":"h2"},{"title":"Glossary​","type":1,"pageTitle":"How AskUI Works","url":"/docs/0.12.2/general/Getting Started/guide-how-askui-works#glossary","content":" Throughout this article, we will use some terms that describe certain parts of AskUI. Some of them are used only internally and not exposed by the AskUI Control Client API, but are important for understanding how AskUI works and what it can do. Please refer to this table while reading.  Term\tDescriptionElement-description\tA description for a UI element. In the AskUI Control Client API, for example, it is the coded description like button() or textfield().contains().text('Email'). Action\tA method in the AskUI Control Client API that describes an action to be taken against the operating system. For example click(), type(). InputEvent (internal)\tA specific type of action to be taken against the operating system. For example MouseInputEvent or KeyboardInputEvent. ControlCommand (internal)\tA command sent to the UI controller telling what to perform on the operating system. It consists of one or more InputEvents.    ","version":"0.12.2","tagName":"h2"},{"title":"AskUI Control Client​","type":1,"pageTitle":"How AskUI Works","url":"/docs/0.12.2/general/Getting Started/guide-how-askui-works#askui-control-client","content":"   The AskUI Control Client provides the API that tells AskUI what/how to automate. Once you start using AskUI, you will mostly interact with AskUI via the AskUI Control Client. In most of our tutorials and demonstrations, you will see let aui: UIControlClient is declared and combined with an Action and Element-descriptions which ends up forming an instruction, e.g:  await aui.click().button().withText('login').exec();   As shown above, you form an instruction by chaining an Action with Element-descriptions using the Fluent API of the AskUI Control Client. It is designed as a fluent interface to increase readability and make it more understandable. The AskUI Control Client sends a request to the AskUI UI Controller: to take a screenshot.with a ControlCommand that tells what InputEvent to perform on the operating system. The AskUI Control Client communicates with the AskUI Inference Server: to send a screenshot to be annotated with the instruction.to receive the annotation, e.g. detected elements.  To use the AskUI Control Client, user credentials are required. User credentials can be obtained via our AskUI Studio. Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio.  See our API documentation for more information on this component.    ","version":"0.12.2","tagName":"h2"},{"title":"AskUI UI Controller​","type":1,"pageTitle":"How AskUI Works","url":"/docs/0.12.2/general/Getting Started/guide-how-askui-works#askui-ui-controller","content":"   The AskUI UI Controller is a binary that controls the operating system. This binary gets automatically downloaded when the UiController is initialized by calling UiController.start(). Once executed, it stays in the background and communicates with the AskUI Control Client on a specific port to receive the ControlCommand. Based on the given ControlCommand, it triggers InputEvents respectively.  The AskUI UI Controller is responsible for: Taking a screenshot.Triggering the InputEvent, i.e MouseInputEvent, KeyboardInputEvent, or shell execution.Running the interactive annotation.  See our API documentation for more information on this component.    ","version":"0.12.2","tagName":"h2"},{"title":"AskUI Inference Server​","type":1,"pageTitle":"How AskUI Works","url":"/docs/0.12.2/general/Getting Started/guide-how-askui-works#askui-inference-server","content":"   The AskUI Inference Server is responsible for the prediction of UI elements within the given screenshot. As soon as it receives a request from the AskUI Control Client, it performs the prediction on the given image and returns the annotation to the AskUI Control Client.  For the inference, we use a machine-learning model that consists of several submodels:  Object Detector: Detects UI elements (e.g button, textfield).Icon Classifier: Predicts the class of an icon based on the detected objects (e.g. a user icon 👤).Optical Character Recognition (OCR): Converts the image of a text into text.Custom Element Detector: Searches for an area in the given screenshot that matches the image given by the Element-description .customElement().    ","version":"0.12.2","tagName":"h2"},{"title":"Them All in Action​","type":1,"pageTitle":"How AskUI Works","url":"/docs/0.12.2/general/Getting Started/guide-how-askui-works#them-all-in-action","content":" Assuming that we run AskUI on the same device we want to automate, the simplest synopsis can be described as such:    When running AskUI,  The AskUI Control Client checks whether it is needed to be processed by the Inference Server. If the code contains any of the Element-description or Getters, then the AskUI Control Client tells the AskUI UI Controller to take a screenshot of the given screen and sends it to the Inference Server. After the AskUI Control Client has retrieved the annotation back from the server, it sends a ControlCommand to the AskUI UI Controller. Afterwards, the AskUI UI Controller triggers the InputEvent on the operating system. // an example of AskUI code containing an element-identifier await aui.click().button().withText('Confirm').exec(); // Here, the element-description 'button()' is used together, // so the client will fire a request to the server. If the code contains an Action but no Element-description, then the AskUI Control Client sends the ControlCommand to the AskUI UI Controller to trigger the InputEvent directly. // an example of AskUI code containing only a command await aui.pressThreeKeys('control','alt','del').exec(); // It uses only a command 'pressThreeKeys()', // so it will be executed by the UI Controller directly.   An Element-description represents a specific type of UI element that can be recognized by inference. Most of the commonly used UI elements such as button, textfield are supported and can be used. An Action represents a specific type of action to be performed, i.e Mouse/Keyboard Input Event or Shell Command. This action can be performed on a specific element when combined with Element-descriptions or can be performed on its own as shown in the example right above.  Please visit our API Docs, if you want to learn more about different types of Element-description and Action.    ","version":"0.12.2","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"How AskUI Works","url":"/docs/0.12.2/general/Getting Started/guide-how-askui-works#conclusion","content":" Here we have seen the three core components of AskUI. If you aim to use AskUI in a more advanced way, e.g. integrating it into your CI/CD pipeline, it may be worthwhile to get an overview of how it is composed. For more practical examples, please refer to our Tutorials and API docs. And don't forget to come over to our Outverse-Community, if you have any questions about AskUI! ","version":"0.12.2","tagName":"h2"},{"title":"Write Your First Instruction","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Getting Started/write-your-first-instruction","content":"","keywords":"","version":"0.12.2"},{"title":"Initialization​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.12.2/general/Getting Started/write-your-first-instruction#initialization","content":" To create your first AskUI suite, enter into your terminal  npx askui init   This will create a tsconfig.json: a json file specifying the root files and the compiler options required to compile the project,a folder called test which includes: test/my-first-askui-test-suite.test.ts: an example workflow with AskUI,a folder called helper which contains the jest.setup.ts file for setting up the test environmenta jest.config.ts configuration file  ","version":"0.12.2","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.12.2/general/Getting Started/write-your-first-instruction#configuration","content":" Generate credentials through the AskUI Studio (usage is free!). Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio.  Then, go to your helper/jest.setup.ts and add the configuration for your workspace id and your access token to the UiControlClient.   aui = await UiControlClient.build({ credentials: { workspaceId: '&lt;your workspace id&gt;', token: '&lt;your access token&gt;', } });   ","version":"0.12.2","tagName":"h2"},{"title":"Run Your First Instruction​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.12.2/general/Getting Started/write-your-first-instruction#run-your-first-instruction","content":" Writing and executing an instruction in AskUI can be done in three steps:  Execute an (interactive) annotation.Extract from the (interactive) annotation the element-description which identifies target element.Execute an instruction to control the keyboard and mouse to take action on target element.  ","version":"0.12.2","tagName":"h2"},{"title":"Step 1: Execute an (Interactive) Annotation​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.12.2/general/Getting Started/write-your-first-instruction#step-1-execute-an-interactive-annotation","content":" info Before executing the instructions, open test/my-first-askui-test-suite.test.ts on your main display. The code in this file is shown below. Windows Users Please use annotate() as outlined in the code below. The interactive annotation aui.annotateInteractively() currently leads to an error on Windows. macOS Users Some users have reported instability running AskUI on macOS with external displays and/or virtual desktops (called Spaces). If you experience similar issues, please disconnect external displays and close virtual desktops, or see documentation on running AskUI in Docker.  test/my-first-askui-test-suite.test.ts import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should generate an (interactive) annotation', async () =&gt; { // For Windows users: // Use annotate() to create an annotated HTML file // of your screen that is saved under &lt;project_root&gt;/report await aui.annotate(); // Uncomment for macOS and Linux // Delete the lines above to not trigger annotate() // await aui.annotateInteractively(); }); });   To execute the instructions, enter into your terminal  npx jest test/my-first-askui-test-suite.test.ts --config ./test/jest.config.ts --runInBand   info We use the --runInBand CLI option here to run the workflows from the it-code blocks sequentially and not in parallel. This is usually what you want on your local machine without isolated environments like containers or VMs.  A few seconds later an (interactive) annotation will be generated.  If you’d like a longer explanation as to what an (interactive) annotation is, read about it here. Explanation of (Interactive) Annotations  ","version":"0.12.2","tagName":"h3"},{"title":"Step 2: Extract the Element-Description​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.12.2/general/Getting Started/write-your-first-instruction#step-2-extract-the-element-description","content":" Extract from the (interactive) annotation the element-description which identifies target element. Locate any element you’d like the mouse to move to and copy the element-description by clicking on it: Clicking an element will copy this element-description, which we can then use in the step 3.  To close out the interactive annotation, use CMD/CTRL + W or ESC.  ","version":"0.12.2","tagName":"h3"},{"title":"Step 3: Execute an Instruction​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.12.2/general/Getting Started/write-your-first-instruction#step-3-execute-an-instruction","content":" Add this instruction code block to the describe block in your test file just under your (interactive) annotation instruction, taking note to also add your copied element-description from the annotation:  test/my-first-askui-test-suite.test.ts it('should click on my element', async () =&gt; { await aui .click() // &lt;INSERT YOUR COPIED ELEMENT-DESCRIPTION HERE AND UNCOMMENT THIS AND THE NEXT LINE&gt; // .exec(); });   Be sure to xit out the (interactive) annotation, as that is no longer needed. The final version should look like this, taking exception of course to whatever element-description text you chose:  test/my-first-askui-test-suite.test.ts describe('jest with askui', () =&gt; { xit('should generate an (interactive) annotation', async () =&gt; { // For Windows users: // Use annotate() to create an annotated HTML file // of your screen that is saved under &lt;project_root&gt;/report await aui.annotate(); // Uncomment for macOS and Linux // Delete the lines above to not trigger annotate() // await aui.annotateInteractively(); }); it('should click on my element', async () =&gt; { await aui .click() .text(&quot;node_nodu&quot;) .exec(); }); });   As before, run your code with npx jest test/my-first-askui-test-suite.test.ts --config ./test/jest.config.ts --runInBand  You should see AskUI take over your mouse, mouse over the element you chose and click.  Congratulations! You’ve just built your first instruction using AskUI. 🎉  ","version":"0.12.2","tagName":"h3"},{"title":"What other instructions are available?​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.12.2/general/Getting Started/write-your-first-instruction#what-other-instructions-are-available","content":" Actions APIElement-Descriptions APIRelations APIChecks APIGetters API  ","version":"0.12.2","tagName":"h3"},{"title":"Troubleshooting​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.12.2/general/Getting Started/write-your-first-instruction#troubleshooting","content":" ","version":"0.12.2","tagName":"h2"},{"title":"AskUI moves to the wrong element?​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.12.2/general/Getting Started/write-your-first-instruction#askui-moves-to-the-wrong-element","content":" Have a look at Relational Selectors to select elements via a visual relation instead.  ","version":"0.12.2","tagName":"h3"},{"title":"Technical​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.12.2/general/Getting Started/write-your-first-instruction#technical","content":" For technical problems with the execution, take a look at our Troubleshooting page  ","version":"0.12.2","tagName":"h3"},{"title":"Where to Go Next?​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.12.2/general/Getting Started/write-your-first-instruction#where-to-go-next","content":" Our Outverse-Community is there to help you out!  ","version":"0.12.2","tagName":"h2"},{"title":"Tutorials​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.12.2/general/Getting Started/write-your-first-instruction#tutorials","content":" If you are unsure on how/what to do yet, try to follow our tutorials. They cover some of use cases of AskUI in depth:  Search Image in GoogleLogin at an Online ShopAutomate Spotify on DesktopAutomate an Android App  ","version":"0.12.2","tagName":"h3"},{"title":"Annotation​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/0.12.2/general/Getting Started/write-your-first-instruction#annotation","content":" Read Debug with Annotation to learn how to use the Image Annotation Feature. ","version":"0.12.2","tagName":"h3"},{"title":"Text and Element Selectors","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors","content":"","keywords":"","version":"0.12.2"},{"title":"Text Selectors​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#text-selectors","content":" When using AskUI for automated tests, text elements are playing a big role, since they typically appear more distinctively than other elements such as icons or text fields. Hence, knowing the benefits of using different text element-description can become critical in scaffolding a robust set of instructions.  AskUI provides four different element-descriptions to handle text elements:  containsText()withExactText()withText()withTextRegex()  For a convenient demonstration, we will use a Flutter web demo provided by Flutter.    ","version":"0.12.2","tagName":"h2"},{"title":"Basic Text Matching​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#basic-text-matching","content":" The simplest way to interact with a text element is to use withText(). Go to the demo app page and run the code below:  await aui.moveMouseTo().text('matrial').exec(); await aui.mouseLeftClick().exec();     withText() tries to find a text that matches the whole sequence. In most cases, you will want to stick to this method, as it supports Fuzzy Matching and tolerates misspelled text. Note that the above example code has two typos. matrial doesn't match the text in the demo app, which is Material, although AskUI will find the text element that roughly matches the text on the screen.    ","version":"0.12.2","tagName":"h3"},{"title":"Match a Sub-string within a Text​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#match-a-sub-string-within-a-text","content":" Even though the withText() is handy and quite reliable, you might face a case where you know only a fraction of the text element that you want to interact with. In such a case, containsText() is the element-description you might want to use:  await aui.moveMouseTo().text().containsText('Bottom').exec(); await aui.mouseLeftClick().exec();     Be aware that even if the containsText() also supports Fuzzy Matching, it won't match the whole sequence by just a few characters. Try to use this code with the given demo app:  // this will fail await aui.moveMouseTo().text().containsText('Bottm').exec();   You will notice that AskUI fails to match the given text Bottm, whereas this code will work:  // this will succeed await aui.moveMouseTo().text().containsText('Bottm appbar').exec(); // this will also succeed await aui.moveMouseTo().text().containsText('Bottom').exec();   The biggest difference between withText() and containsText() is whether it matches the text as a whole sequence or not. Matching many texts with a repeating affix could be a practical use case for the containsText().  It is recommended to experiment enough with these element-descriptions to find a better option that suits your specific case, since it's not easy to predict if the given text can be fuzzy-matched with target texts.    ","version":"0.12.2","tagName":"h3"},{"title":"Match the Exact Text​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#match-the-exact-text","content":" If you already know what text you are looking for, or if there are too many similar text elements, you can use the element-description withExactText().  From the main page of the demo app, go to Material-&gt;Data tables. You will see a table with different foods given with nutrition factors for each of them.  Let's say that we want to click on the items that has exactly 25.0 gm of Fat. In our demo app, only the Doughnut is the matching item. Run this code and see how withText() matches the text:   // Use this helper function to calculate the centroid of the detected elements. function getCentroid(element: any): any { let x = (element.bndbox.xmax - element.bndbox.xmin) / 2.0 + element.bndbox.xmin; let y = (element.bndbox.ymax - element.bndbox.ymin) / 2.0 + element.bndbox.ymin; return { x: x, y: y }; } // Find all the text elements that matches '25.0' const elts = await aui.get().text('25.0').exec(); // Then, iterate through the found elements and click on them for(let i=0; i&lt;elts.length; ++i){ const centroid = getCentroid(elts[i]); await aui.moveMouse(Math.round(centroid.x), Math.round(centroid.y)).exec(); await aui.mouseLeftClick().exec(); }     You will see that AskUI clicks not only the 25.0 but also the 26.0, which is the fat of the Apple pie. The result of this test code may differ in your case, because of the different screen resolution and the rendered-size of the demo app.  It will give you a clear idea where you will need to use the element-description withExactText() instead of withText(). Try to run the same code after replacing the withText() to withExactText():  // Find all the text elements that matches '25.0' exactly const elts = await aui.get().text().withExactText('25.0').exec(); // Then, iterate through the found elements and click on them for(let i=0; i&lt;elts.length; ++i){ const centroid = getCentroid(elts[i]); await aui.moveMouse(Math.round(centroid.x), Math.round(centroid.y)).exec(); await aui.mouseLeftClick().exec(); }     ","version":"0.12.2","tagName":"h3"},{"title":"Match Text with Regular Expression​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#match-text-with-regular-expression","content":" The element-description withTextRegex() supports Regular Expression to match any text in the most flexible way. Although it might be tricky to use regex due to its esoteric appearance, it is maybe one of the most versatile solutions when it comes to character matching.  On the same page of the demo app, let's say that we want to click on the items whose Calorie is between 300 and 500 (cal&gt;=300 &amp;&amp; cal&lt;500). Since regex doesn't support numeric comparison, we will try to match the digits in a sequence:  // Find all the text that matches the expression const cals = await aui.get().text().withTextRegex('[3-4][0-9]{2}').exec(); // Then, iterate through the found elements and click on them for(let i=0; i&lt;cals.length; ++i){ const coord = getCentroid(cals[i]); console.log(cals[i].text, coord); await aui.moveMouse(Math.round(coord.x), Math.round(coord.y)).exec(); await aui.mouseLeftClick().exec(); }     The regular expression [3-4][0-9]{2} means,  [3-4]: Match one character between 3 and 4.[0-9]: Match one character between 0 and 9.2: Repeat the previous expression ([0-9]) two times.  As the result, it will try to match every text that has a sequence starting with the digit 3 or 4, and then has any two digits in a row.  ","version":"0.12.2","tagName":"h3"},{"title":"Element Selectors​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#element-selectors","content":" caution This page is currently under construction. If you have any questions, please feel free to reach out to info@AskUI.com or book a meeting with Jonas over Calendly.  ","version":"0.12.2","tagName":"h2"},{"title":"Custom Elements​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#custom-elements","content":" caution Important: This increases the runtime quite a bit. So use it only if absolutely necessary.  ","version":"0.12.2","tagName":"h2"},{"title":"Overview​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#overview","content":" Custom Element Selection is a feature in AskUI that enables you to create custom element-descriptions for elements on the screen, instead of relying on the standard element-descriptions provided such as Button, Textfield, etc.  With this feature, you can define a custom element-description based on how the element is displayed on the screen. This can be particularly useful in situations where standard element-descriptions are unreliable due to the non-standard properties of the element. It provides greater flexibility and control, allowing you to tailor the automation to meet the specific needs of your application.  Here we will demonstrate how to use a custom element to explore Google Street View.  ","version":"0.12.2","tagName":"h3"},{"title":"Demonstration​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#demonstration","content":"   ","version":"0.12.2","tagName":"h3"},{"title":"Requirements​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#requirements","content":" AskUI - Follow this tutorial if you haven't installed it yet.Web Browser - We use Safari in this demonstration, but you can use any web browser you have.  ","version":"0.12.2","tagName":"h3"},{"title":"Understanding the customElement() in AskUI​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#understanding-the-customelement-in-askui","content":" customElement() is an element to look for on the screen that is defined by the user with a given image.  // Example of customElement() await aui .click() .customElement({ customImage: './logo.png', // required name: 'myLogo', // optional threshold: 0.9, // optional, defaults to 0.9 rotationDegreePerStep: 0, // optional, defaults to 0 imageCompareFormat: 'grayscale', // optional, defaults to 'grayscale' }) .exec();   Arguments​  customImage (string, required): A cropped image in the form of a base64 string or file path. name (string, optional): A unique name that can be used for filtering for the custom element. If not given, any text inside the custom image will be detected via OCR. threshold (number, optional): A threshold for how much a UI element needs to be similar to the custom element as defined. Takes values between 0.0 (== all elements are recognized as the custom element which is probably not what you want) and 1.0 (== elements need to look exactly like the customImage which is unlikely to be achieved as even minor differences count). Defaults to 0.9. rotationDegreePerStep (number, optional): Step size in rotation degree. Rotates the custom image by this step size until 360° is exceeded. The range is from 0 to 360. Defaults to 0. imageCompareFormat ('RGB' | 'grayscale', optional): The color compare style. grayscale compares the brightness of each pixel whereas RGB compares all three color. Defaults to grayscale.  Two Things to be Aware of When Using customElement()​  1) Create the Custom Image by Cropping it From The Actual Screen  To find a matching element from the screen, the custom image must be the same as it is displayed on the screen. By saying same in this sense, includes the size, rotation as well as the overlapping object, if there is any.    Note the left-bottom case of the illustration. A rotated element can be also matched, but only if everything else except the rotation are staying the same as it is displayed on the screen. If you can assure that your custom image is exactly the same as it is displayed on the screen + if you know the degree of the rotation, then you could consider using the rotationDegreePerStep parameter. And because AskUI will try to rotate the custom element for the whole revolution, a divisor of the rotated degree could be also used, e.g in the illustrated case, we can use not only 90 but also 45, 30, 15, etc. But since smaller degrees will require more iteration steps, it will increase the runtime by a notable amount. The simplest way to accomplish it might be to screen capture and crop the desired image from your screen directly. In Windows and macOS, you can use the built-in screen capture tool: Windows: Press windows + shift + s (Windows 10 or higher)macOS: Press cmd + shift + 4 In both cases, you will be asked to select a certain portion of the screen. On Windows, the captured image will be stored in the clipboard, so you will need to save it to an image file. On macOS, the image will be saved in the ~/Desktop by default.  tip The quality of the crop-out determines how good the element will be recognized. Make sure to: Save it as a PNG to avoid artifacts from compressionCrop it out as tight as possible. At best with no pixel space on the borders.  2) The Time of the Execution will Increase by a Notable Amount  To examine whether the custom image matches the given screen, AskUI iterates through the whole pixels of the given screen as well as the custom image. So it is likely to increase the runtime by a notable amount. Therefore, if the task could be accomplished with other element-descriptions such as icon(), button(), or text(), then it's maybe better to avoid using the customElement().  ","version":"0.12.2","tagName":"h3"},{"title":"Capture the Custom Element​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#capture-the-custom-element","content":" In this demonstration, we will search for a certain area in Google Street View. This can be enabled by pressing a button at the right corner of the Google Maps:    Can you see the yellow tiny human in the corner? We need an image of this human figure to interact with it. Let's make a screen capture of it. It shall look like this: Then save the image in your project's root directory with the name human-figure.png. The file tree of your project's root directory will be like this:  project_root/ ├─ node_modules/ ├─ test/ ├─ package.json ├─ tsconfig.json ├─ human-figure.png   ","version":"0.12.2","tagName":"h3"},{"title":"Write the AskUI Code​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#write-the-askui-code","content":" If you are prepared with the image above, let's jump into our code:  import { aui } from './helper/jest.setup'; describe('Explore the world in google maps', ()=&gt;{ it('open web browser and go to google maps', async ()=&gt;{ // open the start menu/spotlight to search for the web browser await aui.pressTwoKeys('command', 'space').exec(); // for macOS // await aui.pressKey('command').exec(); // for Windows await aui.waitFor(250).exec(); // wait for the start menu to open await aui.type('safari').exec(); // type the name of the web browser // await aui.type('chrome').exec(); // if you are using another web browser, replace the name to it await aui.pressKey('enter').exec(); // open the web browser await aui.waitFor(1000).exec(); // wait for the web browser to open await aui.type('https://maps.google.com').exec(); // type the url of the website await aui.pressKey('enter').exec(); // open the website await aui.waitFor(1000).exec(); // wait for the website to load }); it('search for a location', async ()=&gt;{ await aui.type('machu picchu').exec(); // type the name of the location await aui.pressKey('enter').exec(); // search for the location await aui.waitFor(2000).exec(); // wait for the map to load await aui.pressKey(',').exec(); // hide the side panel }); it('enable street view', async ()=&gt;{ // now we look for our custom element on the map // move the mouse to the custom element await aui.moveMouseTo() .customElement({ customImage: &quot;./human-figure.png&quot;, name: &quot;street-view-icon&quot;, threshold: 0.9, }) .exec(); // click and hold on the custom element await aui.mouseToggleDown().exec(); // drag the custom element(our human) to the location we want to explore // note the offset of -50 pixels along the y axis // we drag the human 10 pixels higher than the location Aguas Calientes await aui.moveMouseRelativelyTo(0, -10).text('Aguas Calientes').exec(); // release the mouse button await aui.mouseToggleUp().exec(); }); });   After successfully running the code, you will be able to see the landscape of Machu Picchu, the most iconic citadel of the lost empire Inca. It is possible that you end up with a plain Google Map without having the Street View enabled. It might be caused by various reasons, but the most likely scenario is due to the different resolutions of the screen (your display can have a different resolution than mine). You could try to adjust the amount of the pixel offset that is given to the moveMouseRelativelyTo(), for example, try with moveMouseRelativelyTo(-5, -15).  ","version":"0.12.2","tagName":"h3"},{"title":"Breaking Down the Code​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#breaking-down-the-code","content":" 1) Open the Web Browser and Go To the Desired Website​  One notable part of this step is the waitFor() after each execution. We have used it in three different lines of this code block. Check out the respective parts and adjust the amount of time to wait until the process is finished. It may take more or less time depending on the condition of your device and internet connection:  it('open web browser and go to google maps', async ()=&gt;{ // open the start menu/spotlight to search for the web browser await aui.pressTwoKeys('command', 'space').exec(); // for macOS // await aui.pressKey('command').exec(); // for Windows await aui.waitFor(250).exec(); // wait for the start menu to open await aui.type('safari').exec(); // type the name of the web browser await aui.pressKey('enter').exec(); // open the web browser await aui.waitFor(1000).exec(); // wait for the web browser to open await aui.type('https://maps.google.com').exec(); // type the url of the website await aui.pressKey('enter').exec(); // open the website await aui.waitFor(1000).exec(); // wait for the website to load });   Also, don't forget to change the key to press and the name of the web browser based on your condition.  2) Search for the Location​  Here we type our desired keyword into the textfield of Google Maps. As the textfield gets focused automatically, we can directly type in the keyword to the textfield:  it('search for a location', async ()=&gt;{ await aui.type('machu picchu').exec(); // type the name of the location await aui.pressKey('enter').exec(); // search for the location await aui.waitFor(2000).exec(); // wait for the map to load await aui.pressKey(',').exec(); // hide the side panel });   Note that we also press the ,(comma) key to hide the side panel of Google Maps. This is for hiding unnecessary information from the screen.  ","version":"0.12.2","tagName":"h3"},{"title":"Drag the Human Icon to the Desired Location​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#drag-the-human-icon-to-the-desired-location","content":" Finally, we drag our human, which we defined as our Custom Element, to the desired location.Firstly, we move the mouse cursor to our custom element.For dragging the mouse, we use the mouseToggleDown() to press-and-hold the mouse left button.After that, we move the mouse to the desired location.Thereafter, we use mouseToggleUp() to release the mouse button.  it('enable street view', async ()=&gt;{ // now we look for our custom element on the map // move the mouse to the custom element await aui.moveMouseTo() .customElement({ customImage: &quot;./human-figure.png&quot;, name: &quot;maps&quot;, threshold: 0.9, }) .exec(); // click and hold on the custom element await aui.mouseToggleDown().exec(); // drag the custom element(our human) to the location we want to explore // note the offset of -10 pixels in the y axis // we drag the human to 10 pixels higher than the location Aguas Calientes await aui.moveMouseRelativelyTo(0,-10).text('Aguas Calientes').exec(); // release the mouse button await aui.mouseToggleUp().exec(); });   Note the optional parameters for the customElement(), especially the threshold that is set to 0.9.This parameter can be set from 0.0 up to 1.0. 0.0 will consider every element on the screen as matched with the given image.1.0 will examine the given elements as strict as possible, so you might end up without any matching element found. So, the best scenario to set the threshold might be: Make the custom image to be as precise as possible (cropping from the screen). Keep the threshold relatively higher, but below 1.0  ","version":"0.12.2","tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#conclusion","content":" If you plan to program an automation where you have elements with non-standard properties, you might want to consider using the custom element feature of AskUI. But as mentioned above, keep in mind that, as a trade-off, it consumes more time than other features. Taking it into account, using a custom element to interact with the given UI can be a huge help, especially if the element lacks standard properties such as tag or appearance.  If you got any issues while following this article, don't hesitate to ask for help in our Outverse-Community. We are more than glad to hear about your experience and help!  ","version":"0.12.2","tagName":"h3"},{"title":"Recommended Practices​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#recommended-practices","content":" This page will give you examples of how to use AskUI efficiently and effectively.  ","version":"0.12.2","tagName":"h2"},{"title":"General Considerations on Speed of Inference for Different Element-Descriptions​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#general-considerations-on-speed-of-inference-for-different-element-descriptions","content":" Submodel\tTasks\tSpeedObject Detector\tCommon elements, e.g. a button or textfield\tfast 🚀 Icon Classifier\tPredict the class of an icon, e.g., a user icon\tfast 🚀 Optical Character Recognition (OCR)\tRecognize text\tfast 🚀 Custom Element Detector\tSearch via an image inside the screen\tslow 🐌  Avoid Optical Character Recognition (OCR) on Too Many Element​  If you use containsText(), withText(), withExactText() or withTextRegex() OCR is applied to all elements detected on your screen. This can slow down AskUI. It is more efficient to narrow down the elements first. For example, if you want to click a button with a specific text you should select all buttons first.  // Do this await aui.click().button('See here').exec(); await aui.click().text('Sign in').exec(); // And NOT this await aui.click('See here').exec(); await aui.click('Sign in').exec();   Avoid Custom Element Detection if Possible​  If you use customElement() you are doing an image-in-image search. Use this sparingly only for specific custom elements as the execution time is slow!  // Do this await aui.click().button().withText('Login').exec(); await aui.click().text('Overview').exec(); // And NOT this await aui.click().customElement({ customImage: '.../login_button.png', name: 'login button', }).exec(); await aui.click().customElement({ customImage: '.../text_overview.png', name: 'overview button', }).exec();   ","version":"0.12.2","tagName":"h3"},{"title":"Scrolling​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#scrolling","content":" When you use AskUI you can only interact with elements that you can see on your screen. Therefore you have to scroll down/sideways to interact with currently invisible elements.  Scrolling on Touch Displays​  On touch displays you have to recreate the swipe gesture:  // Touch the display with your finger, move finger to the left, release await aui.mouseToggleDown().exec() await aui.moveMouseRelatively(-1500, 0).exec() await aui.mouseToggleUp().exec()   Scrolling With Mouse Wheel​  If you want to scroll with your mouse wheel you can use the scroll() action:  // Scroll 10 down in y direction&lt;&gt; await aui.scroll(0, -10).exec()   Scrolling With Key Press​  If you want to scroll with a key press you could use your arrow keys (up, down, left, right ) or the pagedown-key.  // Press down arrow key await aui.pressKey('down').exec() // Press up arrow key await aui.pressKey('up').exec() // Scroll down a page await aui.pressKey('pagedown').exec() // Scroll up a page await aui.pressKey('pageup').exec()   ","version":"0.12.2","tagName":"h3"},{"title":"Wait for an Element to Appear​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/0.12.2/general/Element Selection/text-and-element-selectors#wait-for-an-element-to-appear","content":" AskUI implements a conservative retry strategy to wait for an element to appear. But sometimes this is not long enough. You can wait for an element to appear with the following helper function:  // Retry the command 5 times with a // wait time of 2 seconds between each try async function waitUntil(AskUICommand: () =&gt; Promise&lt;void&gt;, maxTry = 5) { try { await AskUICommand(); } catch (error) { if (maxTry == 0) { throw error } console.log(`Retry predicting command, ${maxTry} tries left`) await aui.waitFor(2000).exec(); await waitUntil(AskUICommand, maxTry - 1) } } // Wait for the text 'Github' to be displayed await waitUntil( async () =&gt; aui.expect().text('Github').exists().exec() );  ","version":"0.12.2","tagName":"h3"},{"title":"Custom Web Hooks","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Integrations/custom-web-hooks","content":"Custom Web Hooks caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.12.2"},{"title":"Docker","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Integrations/containers","content":"","keywords":"","version":"0.12.2"},{"title":"AskUI Device Controller Docker Images​","type":1,"pageTitle":"Docker","url":"/docs/0.12.2/general/Integrations/containers#askui-device-controller-docker-images","content":" We maintain Docker Images for running instructions with askui inside a Docker Container, e.g., locally or in a CI/CD pipeline. The images are based on Ubuntu (amd64) images and contain the askui UI Controller (also known as the UiController) and a browser. Currently, we offer some of the latest versions of Chrome and Firefox. The askui library connects to the askui UI Controller inside the Docker container to execute the instructions inside it. You can find our images on DockerHub.  caution If you are on an ARM architecture such as Apple Silicon, you have to install an Emulator like Rosetta.  ","version":"0.12.2","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Docker","url":"/docs/0.12.2/general/Integrations/containers#configuration","content":" The following environment variables can be used for configuring the Docker Container started from one of our Docker Images:  Variable\tDefault Value\tDescriptionENABLE_VNC\tfalse\ttrue to enable VNC so that you can connect and observe whats happening inside the container. The VNC server is bound to port 5900 of the container. SCREEN_RESOLUTION\t1920x1080\tThe screen resolution used inside the container in the format &lt;width&gt;x&lt;height&gt;.  ","version":"0.12.2","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Docker","url":"/docs/0.12.2/general/Integrations/containers#usage","content":" The AskUI UI Controller is bound to port 6769 of the container so this needs to be exposed.  ","version":"0.12.2","tagName":"h3"},{"title":"Starting Container Manually​","type":1,"pageTitle":"Docker","url":"/docs/0.12.2/general/Integrations/containers#starting-container-manually","content":" You can pull an image using docker pull, e.g.,  docker pull askuigmbh/askui-ui-controller:v0.11.2-chrome-100.0.4896.60-amd64   and, then, start the corresponding container using:  docker run -e ENABLE_VNC=true -p 6769:6769 -p 5900:5900 askuigmbh/askui-ui-controller:v0.11.2-chrome-100.0.4896.60-amd64   ","version":"0.12.2","tagName":"h3"},{"title":"Starting Container from Within beforeAll() Using Testcontainers​","type":1,"pageTitle":"Docker","url":"/docs/0.12.2/general/Integrations/containers#starting-container-from-within-beforeall-using-testcontainers","content":" Testcontainers is a Node.js library that supports starting Docker Containers from within tests and throwing them away afterwards.  To use it, first install it:  npm i -D testcontainers   After that, you can adjust the jest.setup.ts that is created when running npx askui init like in the following example starting the AskUI UI Controller container just before all instructions are run and connecting to it:  import { UiControlClient } from 'askui'; import { GenericContainer, StartedTestContainer } from 'testcontainers'; jest.setTimeout(60 * 1000 * 60); function getDockerImageName(): string { const askuiUiControllerVersion = 'v0.10.0'; const browser = 'firefox'; const browserVersion = '82.0.3'; const osArch = 'amd64'; return `askuigmbh/askui-ui-controller:${askuiUiControllerVersion}-${browser}-${browserVersion}-${osArch}`; } async function startTestContainer(): Promise&lt;StartedTestContainer&gt; { const container = await new GenericContainer(getDockerImageName()) .withEnv('ENABLE_VNC', 'true') .withEnv('SCREEN_RESOLUTION', '1920x1080') .withExposedPorts(6769, 5900) .start(); console.log(`VNC link: ${container.getHost()}:${container.getMappedPort(5900)}`); return container; } let testContainer: StartedTestContainer; // eslint-disable-next-line import/no-mutable-exports let aui: UiControlClient; beforeAll(async () =&gt; { testContainer = await startTestContainer(); aui = await UiControlClient.build({ uiControllerUrl: `http://127.0.0.1:${testContainer.getMappedPort(6769)}`, }); await aui.connect(); }); afterAll(async () =&gt; { aui.disconnect(); await testContainer.stop(); }); export { aui };   ","version":"0.12.2","tagName":"h3"},{"title":"Connect via VNC​","type":1,"pageTitle":"Docker","url":"/docs/0.12.2/general/Integrations/containers#connect-via-vnc","content":" To check what is happening inside a running container, you can connect via VNC. For this, you need a VNC client like Remmina. When starting the Docker Container manually, you have to map the internal port 5900 to a free port on your machine that you, then, can connect to. When using the testcontainers example code, the VNC port to connect to is logged to the console.  When connecting, enter the password askui when asked.  Example of a VNC connection with a Chrome browser running inside a container:   ","version":"0.12.2","tagName":"h2"},{"title":"Continuous Integration","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Integrations/continuous-integration","content":"","keywords":"","version":"0.12.2"},{"title":"Github Actions​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.12.2/general/Integrations/continuous-integration#github-actions","content":" ","version":"0.12.2","tagName":"h2"},{"title":"AskUI-Runner Container: Get Workflows from AskUI Studio​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.12.2/general/Integrations/continuous-integration#askui-runner-container-get-workflows-from-askui-studio","content":" When you want to get the latest version of your workflows from AskUI Studio, the AskUI-Runner container needs a configuration file config.yaml to know where to pull them from.  The AskUI-Runner container downloads the workflows and runs them inside a docker container. You do not have to take care of any installation of tools on your side 🥳.  Set these environment variables for your pipeline:  ASKUI_WORKSPACE_ID=&lt;Your workspace id from AskUI Studio&gt; ASKUI_TOKEN=&lt;An access token from your AskUI Studio workspace&gt; ASKUI_INFERENCE_SERVER_URL=&lt;Use https://inference.askui.com if your are not on-premise&gt; ASKUI_WORKFLOW_ENDPOINT_URL=https://app-gateway-api.askui.com/prod/api/v1 DOCKER_USERNAME=&lt;Your Docker Hub username&gt; DOCKER_PASSWORD=&lt;Your Docker Hub password&gt;   Create a config.yaml inside your pipeline like this:  cat &lt;&lt; EOF &gt; config.yaml access_token: ${{ secrets.ASKUI_TOKEN }} inference_server_url: ${{ secrets.ASKUI_INFERENCE_SERVER_URL }} workspace_id: ${{ secrets.ASKUI_WORKSPACE_ID }} workflow_endpoint: prefixes: - workspaces/${{ secrets.ASKUI_WORKSPACE_ID }}/test-cases url: ${{ secrets.ASKUI_WORKFLOW_ENDPOINT_URL }}/workspaces/${{ secrets.ASKUI_WORKSPACE_ID }}/objects EOF   Execute your workflows with our AskUI-Runner container. Do not forget to login into Docker Hub 😉.  docker run --shm-size=&quot;2g&quot; --rm -v ${{ github.workspace }}/config.yaml:/home/askui/config.yaml -v ${{ github.workspace }}/allure-results:/home/askui/test_project/allure-results askuigmbh/askui-runner:v0.13.1-github   Generate Allure report: The run results are placed in allure-results where you can render your report from. Check the detailed examples for your pipeline technology.  Please check the full example file on GitHub.  ","version":"0.12.2","tagName":"h3"},{"title":"Without AskUI-Runner Container​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.12.2/general/Integrations/continuous-integration#without-askui-runner-container","content":" Download the workflows from AskUI Studio and place the folder test in the root of your repository.  Then implement the following steps in your pipeline:  Optional: Set up AskUI Controller as serviceSetup node in version 16.xInstall all dependencies: npm installRun tests with npm run test Set the environment variables: ASKUI_WORKSPACE_IDASKUI_TOKENASKUI_INFERENCE_SERVER_URLOptional: UI_CONTROLLER_URL if the UiController is running on a remote machine and not localhost or as a service inside your pipeline. For reports: Generate reportsDeploy/Send reports  Please check the full example file on GitHub.  ","version":"0.12.2","tagName":"h3"},{"title":"Gitlab CI​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.12.2/general/Integrations/continuous-integration#gitlab-ci","content":" ","version":"0.12.2","tagName":"h2"},{"title":"AskUI-Runner Container: Get Workflows from AskUI Studio​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.12.2/general/Integrations/continuous-integration#askui-runner-container-get-workflows-from-askui-studio-1","content":" When you want to get the latest version of your workflows from AskUI Studio, the AskUI-Runner container needs a configuration file config.yaml to know where to pull them from.  The AskUI-Runner container downloads the workflows and runs them inside a docker container. You do not have to take care of any installation of tools on your side 🥳.  Set these Gitlab variables for your pipeline:  ASKUI_WORKSPACE_ID=&lt;Your workspace id from AskUI Studio&gt; ASKUI_TOKEN=&lt;An access token from your AskUI Studio workspace&gt; ASKUI_INFERENCE_SERVER_URL=&lt;Use https://inference.askui.com if your are not on-premise&gt; ASKUI_WORKFLOW_ENDPOINT_URL=https://app-gateway-api.askui.com/prod/api/v1 DOCKER_USERNAME=&lt;Your Docker Hub username&gt; DOCKER_PASSWORD=&lt;Your Docker Hub password&gt;   Create a config.yaml inside your pipeline like this:  cat &lt;&lt; EOF &gt; config.yaml access_token: $ASKUI_TOKEN inference_server_url: $ASKUI_INFERENCE_SERVER_URL workspace_id: $ASKUI_WORKSPACE_ID workflow_endpoint: prefixes: - workspaces/${ASKUI_WORKSPACE_ID}/test-cases url: ${ASKUI_WORKFLOW_ENDPOINT_URL}/workspaces/${ASKUI_WORKSPACE_ID}/objects EOF   Do not forget to login into Docker Hub and enable Docker-In-Docker like this 😉:  services: - docker:dind before_script: - docker info - echo &quot;$DOCKER_PASSWORD&quot; | docker login --username $DOCKER_USERNAME --password-stdin   Execute your workflows with our AskUI-Runner container.  docker run --shm-size=&quot;2g&quot; --rm -v ./config.yaml:/home/askui/config.yaml -v ./allure-results:/home/askui/test_project/allure-results askuigmbh/askui-runner:v0.13.1-github   Generate Allure report: The run results are placed in allure-results where you can render your report from.  Check the detailed examples for your pipeline technology.  Please check the full example file on Gitlab.com.  ","version":"0.12.2","tagName":"h3"},{"title":"Without AskUI-Runner Container​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.12.2/general/Integrations/continuous-integration#without-askui-runner-container-1","content":" Download the workflows from AskUI Studio and place the folder test in the root of your repository.  Then implement the following steps in your pipeline:  Optional: Set up AskUI Controller as serviceSetup node in version 16.xInstall all dependencies: npm installRun tests with npm run test Set the environment variables: ASKUI_WORKSPACE_IDASKUI_TOKENASKUI_INFERENCE_SERVER_URLOptional: UI_CONTROLLER_URL if the UiController is running on a remote machine and not localhost or as a service inside your pipeline. For reports: Generate reportsDeploy/Send reports  Please check the full example file on Gitlab.com.  ","version":"0.12.2","tagName":"h3"},{"title":"Azure DevOps​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.12.2/general/Integrations/continuous-integration#azure-devops","content":" ","version":"0.12.2","tagName":"h2"},{"title":"AskUI-Runner Container: Get Workflows from AskUI Studio​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.12.2/general/Integrations/continuous-integration#askui-runner-container-get-workflows-from-askui-studio-2","content":" When you want to get the latest version of your workflows from AskUI Studio, the AskUI-Runner container needs a configuration file config.yaml to know where to pull them from.  The AskUI-Runner downloads the workflows and runs them inside a docker container. You do not have to take care of any installation of tools on your side 🥳.  Set these variables for your pipeline:  ASKUI_WORKSPACE_ID=&lt;Your workspace id from AskUI Studio&gt; ASKUI_TOKEN=&lt;An access token from your AskUI Studio workspace&gt; ASKUI_INFERENCE_SERVER_URL=&lt;Use https://inference.askui.com if your are not on-premise&gt; ASKUI_WORKFLOW_ENDPOINT_URL=https://app-gateway-api.askui.com/prod/api/v1 DOCKER_USERNAME=&lt;Your Docker Hub username&gt; DOCKER_PASSWORD=&lt;Your Docker Hub password&gt;   Create a config.yaml inside your pipeline like this:  cat &lt;&lt; EOF &gt; config.yaml access_token: $(ASKUI_TOKEN) inference_server_url: $(ASKUI_INFERENCE_SERVER_URL) workspace_id: $(ASKUI_WORKSPACE_ID) workflow_endpoint: prefixes: - workspaces/$(ASKUI_WORKSPACE_ID)/test-cases url: $(ASKUI_WORKFLOW_ENDPOINT_URL)/workspaces/$(ASKUI_WORKSPACE_ID)/objects EOF   Execute your workflows with our AskUI-Runner container. Do not forget to login into Docker Hub 😉.  echo &quot;$(DOCKER_PASSWORD)&quot; | docker login --username $(DOCKER_USERNAME) --password-stdin docker run --shm-size=&quot;2g&quot; --rm -v &quot;/$(pwd)/config.yaml:/home/askui/config.yaml&quot; -v &quot;/$(pwd)/allure-results:/home/askui/test_project/allure-results&quot; askuigmbh/askui-runner:v0.13.1-github   Generate Allure report: The run results are placed in allure-results where you can render your report from. Check the detailed examples for your pipeline technology.  - bash: | curl -o allure-commandline-2.10.0.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.10.0/allure-commandline-2.10.0.tgz sudo tar -zxf allure-commandline-2.10.0.tgz -C . echo &quot;Creating allure-report&quot; ./allure-2.10.0/bin/allure generate allure-results -o allure-report echo &quot;allure-report created&quot; # Install https://github.com/mclay/azure-pipeline-allure-report first - task: PublishAllureReport@1 displayName: 'Publish Allure Report' inputs: reportDir: 'allure-report'   Please check the full example file on GitHub.  ","version":"0.12.2","tagName":"h3"},{"title":"Without AskUI-Runner Container​","type":1,"pageTitle":"Continuous Integration","url":"/docs/0.12.2/general/Integrations/continuous-integration#without-askui-runner-container-2","content":" Download the workflows from AskUI Studio and place the folder test in the root of your repository.  Then implement the following steps in your pipeline:  Set the pipeline variables: ASKUI_WORKSPACE_IDASKUI_TOKENASKUI_INFERENCE_SERVER_URLOptional: UI_CONTROLLER_URL if the UiController is running on a remote machine and not localhost or as a service inside your pipeline. Setup docker and node in version 16.x  - task: DockerInstaller@0 inputs: dockerVersion: '17.09.0-ce' - task: NodeTool@0 inputs: versionSpec: '16.x' displayName: 'Install Node.js'   Start the UiController from our Docker image  - bash: | sudo ufw disable echo 'Start UIController' docker run -d -p 6769:6769 --cidfile container.cid askuigmbh/askui-ui-controller:v0.11.2-chrome-100.0.4896.60-amd64   Install all dependencies and run the workflow:  echo 'Run npm install' npm install echo 'Run AskUI' export ASKUI_TOKEN=$(ASKUI_TOKEN) export ASKUI_WORKSPACE_ID=$(ASKUI_WORKSPACE_ID) npm run test   For reports: Generate reportsDeploy/Send reports  - bash: | curl -o allure-commandline-2.10.0.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.10.0/allure-commandline-2.10.0.tgz sudo tar -zxf allure-commandline-2.10.0.tgz -C . echo &quot;Creating allure-report&quot; ./allure-2.10.0/bin/allure generate allure-results -o allure-report echo &quot;allure-report created&quot; # Install https://github.com/mclay/azure-pipeline-allure-report first - task: PublishAllureReport@1 displayName: 'Publish Allure Report' inputs: reportDir: 'allure-report'   Please check the full example file on GitHub. ","version":"0.12.2","tagName":"h3"},{"title":"Databases","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Integrations/databases","content":"Databases caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.12.2"},{"title":"Device Farms","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Integrations/device-farms","content":"Device Farms caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.12.2"},{"title":"Terminology","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Terminology","content":"Terminology Term\tMeaningaccess token\tGives you access to the AskUI inference in combination with your workspace id. Every access token has an expiry date and is assigned to exactly one workspace. action\tA method in the AskUI Control Client API that describes an action to be taken against the operating system. For example click(), type(). annotation\tMarked area around an element with metadata name, text, and bounding box coordinates. automation\tA system of multiple connected workflows. bounding box\tRectangle described by coordinates that describe an element's location. Displayed visually as red rectangle. credentials\tCombination of workspace id and access token living in the same workspace. element\tA user interface component which websites and blocks are build from. element-description\tA description for a UI element. In the AskUI Control Client API, for example, it is the coded description like button() or textfield().contains().text('Email'). inference\tThe process of annotating a user interface. inference server\tBackend which performs the inference. instruction\tSingle AskUI directive which usually has following parts: action + (optional)element-description. interactive annotation\tExploring the annotations of a user interface through an annotated screenshot. UI Controller\tService to control inputs and observe the visuals on the operating system. UI Control Client\tRetrieves the annotations from the inference server and uses the given instructions to execute inputs on the operating system through the UI Controller. User Portal\tIn the AskUI User Portal you can create access tokens for your workspace. workflow\tA set of instructions to complete a single task workspace\tEvery registered user has exactly one workspace. Every workspace can contain multiple access tokens. workspace id\tThe id of your workspace. Gives you access to the AskUI inference in combination with your access token.","keywords":"","version":"0.12.2"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Troubleshooting","content":"","keywords":"","version":"0.12.2"},{"title":"Pages​","type":1,"pageTitle":"Troubleshooting","url":"/docs/0.12.2/general/Troubleshooting#pages","content":" Cannot find Element ErrorJestLinuxWindowsmacOSproxyipv6Deprecated Endpoints  Support  Join our Outverse-Community to get help from fellow users and AskUI staff. ","version":"0.12.2","tagName":"h2"},{"title":"Visual Regression","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Integrations/visual-regression","content":"","keywords":"","version":"0.12.2"},{"title":"Install jest-image-snapshot​","type":1,"pageTitle":"Visual Regression","url":"/docs/0.12.2/general/Integrations/visual-regression#install-jest-image-snapshot","content":" In your terminal, navigate into the folder where you initialized AskUI while following our Getting Started (Linux, macOS)  Install jest-image-snapshot as a dev-dependency  npm install --save-dev jest-image-snapshot   ","version":"0.12.2","tagName":"h2"},{"title":"Integration​","type":1,"pageTitle":"Visual Regression","url":"/docs/0.12.2/general/Integrations/visual-regression#integration","content":" The package provides a function toMatchImageSnapshot which implements Jest's Matchers&lt;R&gt; interface making it a Jest matcher that can be used with Jest's expect().  You have to add this matcher to Jest with expect.extend like this in your workflow file (See the docs):  const { toMatchImageSnapshot } = require('jest-image-snapshot'); expect.extend({ toMatchImageSnapshot });   Now the only thing you have to provide for a regression test in your workflows is an image to the function expect() as Buffer:  expect(imageBuffer).toMatchImageSnapshot();   You can use AskUI to get the screenshot as a base64 encoded string. The string is in the format of a data URL. So you have to strip the scheme data:[&lt;mediatype&gt;][;base64], away because it is not a valid image with the scheme. Here is the full code:  const annotate = await aui.annotate(); const imageBase64 = annotate.image; // Strip away this: data:image/png;base64, // Not valid png -&gt; Only if used as a data URL let imageBuffer = Buffer.from( imageBase64.split('base64,')[1], 'base64'); expect(imageBuffer).toMatchImageSnapshot();   ","version":"0.12.2","tagName":"h2"},{"title":"Get It to Work with TypeScript​","type":1,"pageTitle":"Visual Regression","url":"/docs/0.12.2/general/Integrations/visual-regression#get-it-to-work-with-typescript","content":" When you run this as it is you will get an error.  This is because Jest's typings in jest.d.ts do not include toMatchImageSnapshot.  Luckily TypeScript has a mechanism called Declaration Merging. When we create a file jest.d.ts in our project and declare our matcher there, TypeScript will pick it up.  declare namespace jest { interface Matchers { toMatchImageSnapshot(): CustomMatcherResult; } }   ","version":"0.12.2","tagName":"h2"},{"title":"How Jest-Image-Snapshot Works​","type":1,"pageTitle":"Visual Regression","url":"/docs/0.12.2/general/Integrations/visual-regression#how-jest-image-snapshot-works","content":" Explanation from the repository:  Given an image (Buffer instance with PNG image data) the toMatchImageSnapshot() matcher will create an image_snapshots directory in the directory the test is in and will store the baseline snapshot image there on the first run. Note that if customSnapshotsDir option is given then it will store baseline snapshot there instead. On subsequent test runs the matcher will compare the image being passed against the stored snapshot. To update the stored image snapshot run Jest with --updateSnapshot or -u argument. All this works the same way as Jest snapshots.  You also want to check out the options you can provide to toMatchImageSnapshot() to fine-tune the behavior. For example you might want to set a threshold for a mismatch so that minimal differences do not fail a run:  expect(image).toMatchImageSnapshot({ failureThreshold: 0.01, failureThresholdType: 'percent' });  ","version":"0.12.2","tagName":"h2"},{"title":"Deprecated Endpoints","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Troubleshooting/deprecated-endpoints","content":"Deprecated Endpoints If you are using the AskUI library you may see this warning: This endpoint will deprecate. Please upgrade your AskUI version This means that you are using an AskUI version, which will stop working in the near future. You can upgrade your AskUI version with the following command: npm install askui@latest If this does not work, try the following steps: Delete your node_modules folderCheck the latest version of askui in your package.json3 Run npm install to reinstall AskUI","keywords":"","version":"0.12.2"},{"title":"IPv6","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Troubleshooting/ipv6","content":"IPv6 By default, the UI Controller which the AskUI lib starts and interacts with (you can also start it manually) is started at IP address 127.0.0.1 (IPv4 IP address that localhost normally resolves to). To use IPv6, e.g., because you disabled IPv4, you need to start the UI Controller manually from the command line providing --host ::1 (assuming you want to use IP address ::1, otherwise provide a different address) and provide the uiControllerUrl when constructing the UiControlClient (by default, in the &lt;project_dir&gt;/test/helper/jest.setup.ts): aui = await UiControlClient.build({ uiControllerUrl: 'http://[::1]:6769', // other client args... }); For example, starting the UI Controller (version latest, for other versions replace the respective part of the path) on macOS from your project's root directory is done like this: ./node_modules/askui/dist/release/latest/darwin/askui-ui-controller.app --args --host ::1 On other operating systems the path is different: # Windows start ./node_modules/askui/dist/release/latest/win32/askui-ui-controller.exe --args --host ::1 # Linux ./node_modules/askui/dist/release/latest/linux/askui-ui-controller --args --host ::1 ","keywords":"","version":"0.12.2"},{"title":"Cannot Find Element Error","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Troubleshooting/cannot_find_element_error","content":"","keywords":"","version":"0.12.2"},{"title":"Use Interactive Annotation to Debug​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.12.2/general/Troubleshooting/cannot_find_element_error#use-interactive-annotation-to-debug","content":" When you develop an automation you can use interactive annotation to extract filters as described on our interactive annotation page.  This gif illustrates the process:  If an element-description derived through this method does not work you may run the interactive annotation again and check if AskUI gives you the same element-description. Sometimes elements are hard to identify correctly, like icons or specific fonts. Read the next sections on how to tackle this 🙂  ","version":"0.12.2","tagName":"h2"},{"title":"Selecting Icons​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.12.2/general/Troubleshooting/cannot_find_element_error#selecting-icons","content":" There are millions of different icon sets out there. Detecting them all reliable is nearly impossible.  You can use three strategies to make your instructions more stable.  ","version":"0.12.2","tagName":"h2"},{"title":"1. Use Relative Element-Descriptors​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.12.2/general/Troubleshooting/cannot_find_element_error#1-use-relative-element-descriptors","content":" Often there is text near a specific icon. You can use this to your advantage, like in the following example, where the icon below a specific text is clicked. See our guide about relational element-descriptors to understand how those work:  await aui .click() .icon() .below() .text() .withText('Please Enter your Name').exec();   ","version":"0.12.2","tagName":"h3"},{"title":"2. Use Generic Element-Descriptor​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.12.2/general/Troubleshooting/cannot_find_element_error#2-use-generic-element-descriptor","content":" It could be the case that the target element is not detected correctly, e.g, an icon could possibly be detected as a toggle or checkbox and vice versa. In such cases, the generic element-descriptor element() could be a good option.  Be aware that element() alone specifies no particular property. It is recommended to be used in conjunction with a relational element descriptor:  await aui .click() .element() .below() .text() .withText('Please Enter your Name').exec();   This method is not restricted to icon elements, but can also be used for a wide range of elements.  ","version":"0.12.2","tagName":"h3"},{"title":"3. Use Custom Element Selection​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.12.2/general/Troubleshooting/cannot_find_element_error#3-use-custom-element-selection","content":" Custom element selection is your last resort because it is slow as it uses image-in-image search. Check out our Google Street View Tutorial to see how you can make use of it.  ","version":"0.12.2","tagName":"h3"},{"title":"Selecting Image​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.12.2/general/Troubleshooting/cannot_find_element_error#selecting-image","content":" Images are supposed to have a very certain visual property.  An image is expected to have a color contrasting against the background.An image is expected to have a rectangular shape. (rounded corner in a certain degree can be accepted)  Generally speaking, everything on the screen can be an image. For example, icons on a website are actually images. But in terms of visual semantics, we don't deal with the notion of image in general. So it is worth knowing that the above two conditions are critical when using the image() descriptor.  ","version":"0.12.2","tagName":"h2"},{"title":"Selecting Text​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.12.2/general/Troubleshooting/cannot_find_element_error#selecting-text","content":" OCR is tricky and we are working hard to improve it. But you will encounter cases where some text may not be recognized reliably depending on the font size, style or typeface:  ","version":"0.12.2","tagName":"h2"},{"title":"1. Missing Whitespaces Between Words​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.12.2/general/Troubleshooting/cannot_find_element_error#1-missing-whitespaces-between-words","content":" You can guard against missing whitespaces with withTextRegex():  // Use [\\\\s]{0,1} as a replacement for whitespace await aui .click() .text() .withTextRegex('your[\\\\s]{0,1}name').exec();   ","version":"0.12.2","tagName":"h3"},{"title":"2. Cut off characters at the start/end​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.12.2/general/Troubleshooting/cannot_find_element_error#2-cut-off-characters-at-the-startend","content":" For cut-off characters you can omit the first/last character:  // Omit first and last character of 'your name' await aui .click() .text() .withText('your name').exec();   ","version":"0.12.2","tagName":"h3"},{"title":"Missing Permissions for UiController on macOS​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/0.12.2/general/Troubleshooting/cannot_find_element_error#missing-permissions-for-uicontroller-on-macos","content":" AskUI controls your operating system and macOS is very restrictive in giving access to third-party applications (which is a good thing actually!). The AskUI UiController needs to be given access for Screen Recording and Accessibility. See our troubleshooting macOS page. ","version":"0.12.2","tagName":"h2"},{"title":"Jest","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Troubleshooting/jest","content":"","keywords":"","version":"0.12.2"},{"title":"Termination Error​","type":1,"pageTitle":"Jest","url":"/docs/0.12.2/general/Troubleshooting/jest#termination-error","content":" Jest sometimes has problems terminating correctly. If this happens, you can see the following error message:  Jest did not exit one second after the test run has completed. This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.   As described in the error message Jest has problems stopping because of some processes which are still running. This can cause problems in your CI/CD pipeline because your pipeline can't continue after getting this error.  A solution is to force Jest to stop. For this case Jest provides the --forceExit flag:  npx jest --config ./test/jest.config.ts --forceExit  ","version":"0.12.2","tagName":"h2"},{"title":"Linux","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Troubleshooting/linux","content":"","keywords":"","version":"0.12.2"},{"title":"Wayland​","type":1,"pageTitle":"Linux","url":"/docs/0.12.2/general/Troubleshooting/linux#wayland","content":" We do not yet support the windowing system Wayland for any Linux distribution. So you are going to see multiple errors when trying to run AskUI instructions or may not even be able to start the UI Controller.  You can check if you are running on Wayland with  echo $XDG_SESSION_TYPE   If it says &quot;wayland&quot;, you guessed it, you are running on Wayland.  As a solution, you can switch to Xorg instead of Wayland (how to switch to Xorg).  ","version":"0.12.2","tagName":"h2"},{"title":"libfuse2​","type":1,"pageTitle":"Linux","url":"/docs/0.12.2/general/Troubleshooting/linux#libfuse2","content":" If you are using Ubuntu 22.04 or later, you need to install libfuse before using AskUI lib since it's no longer installed by default.  libfuse2 can be installed with:  sudo apt-get update sudo apt-get install libfuse2  ","version":"0.12.2","tagName":"h2"},{"title":"Reporting","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Integrations/reporting","content":"","keywords":"","version":"0.12.2"},{"title":"Installation​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#installation","content":" Install @askui/askui-reporters as a dev-dependency:  npm install --save-dev @askui/askui-reporters   ","version":"0.12.2","tagName":"h2"},{"title":"AskUIAllureStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#askuiallurestepreporter","content":" Add the reporter to the UiControlClient in jest.setup.ts:  import { AskUIAllureStepReporter } from &quot;@askui/askui-reporters&quot;; ... const reporterConfig: ReporterConfig = { withScreenshots: 'always', // See below for possible values withDetectedElements: 'always', // See below for possible values } aui = await UiControlClient.build({ reporter: new AskUIAllureStepReporter( reporterConfig ) }); ...   You can pass a ReporterConfig object to the reporter to configure the level of detail for screenshots and detected elements.  There are four possible values (See the @askui/askui-reporters README for a detailed explanation):  onFailure (Default for both)requiredbeginalways  ","version":"0.12.2","tagName":"h2"},{"title":"Configure beforeEach() and afterEach() in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#configure-beforeeach-and-aftereach-in-jestsetupts","content":" The UiControlClient retrieves the videos and images from your UiController. You have to implement beforeEach() and afterEach() in jest.setup.ts to start the recording and then add it to your report:  Allure Reporter  beforeEach(async () =&gt; { await aui.startVideoRecording(); }); afterEach(async () =&gt; { await aui.stopVideoRecording(); const video = await aui.readVideoRecording(); await AskUIAllureStepReporter.attachVideo(video); });   ","version":"0.12.2","tagName":"h3"},{"title":"Enable the Test Environment @askui/jest-allure-circus in jest.config.ts​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#enable-the-test-environment-askuijest-allure-circus-in-jestconfigts","content":" Install @askui/jest-allure-circus environment:  npm install --save-dev @askui/jest-allure-circus   import type { Config } from '@jest/types'; const config: Config.InitialOptions = { preset: 'ts-jest', setupFilesAfterEnv: ['./helper/jest.setup.ts'], sandboxInjectedGlobals: [ 'Math', ], // Enables the test environment for Allure testEnvironment: '@askui/jest-allure-circus', }; // eslint-disable-next-line import/no-default-export export default config;   ","version":"0.12.2","tagName":"h3"},{"title":"AskUIJestHtmlStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#askuijesthtmlstepreporter","content":" info Due to restrictions of jest-html-reporters you can either have screenshots or video with this reporter but not both at the same time. For screenshots omit the beforeEach() and afterEach() hooks in jest.setup.ts. For video do not configure a reporter in your UiControlClient.  ","version":"0.12.2","tagName":"h2"},{"title":"Install ffmpeg On Your System​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#install-ffmpeg-on-your-system","content":" To use this reporter you have to have ffmpeg installed on your system (including all necessary encoding libraries like libmp3lame or libx264).  Please follow the installation instructions for your system.  ","version":"0.12.2","tagName":"h3"},{"title":"Enable Reporter in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#enable-reporter-in-jestsetupts","content":" Add the reporter to the UiControlClient in jest.setup.ts:  // Do not forget this import at the start of the file! import { AskUIJestHtmlStepReporter } from &quot;@askui/askui-reporters&quot;; ... aui = await UiControlClient.build({ reporter: new AskUIJestHtmlStepReporter({ withScreenshots: 'always' as const, // See below for possible values withDetectedElements: 'always' as const, // See below for possible values }) }); ...   You can pass a ReporterConfig object to the reporter to configure the level of detail for screenshots and detected elements:  onFailure (Default for both)requiredbeginalways  ","version":"0.12.2","tagName":"h3"},{"title":"Configure beforeEach() and afterEach() in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#configure-beforeeach-and-aftereach-in-jestsetupts-1","content":" import path from &quot;path&quot;; import { AskUIJestHtmlStepReporter } from &quot;@askui/askui-reporters&quot;; beforeEach(async () =&gt; { await aui.startVideoRecording(); }); afterEach(async () =&gt; { await aui.stopVideoRecording(); const video = await aui.readVideoRecording(); await AskUIJestHtmlStepReporter.attachVideo(video); });   ","version":"0.12.2","tagName":"h3"},{"title":"Enable the Jest-Html-Reporters in jest.config.ts​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#enable-the-jest-html-reporters-in-jestconfigts","content":" Install jest-html-reporters environment:  npm install --save-dev jest-html-reporters   import type { Config } from &quot;@jest/types&quot;; const config: Config.InitialOptions = { preset: &quot;ts-jest&quot;, testEnvironment: &quot;node&quot;, setupFilesAfterEnv: [&quot;./helper/jest.setup.ts&quot;], sandboxInjectedGlobals: [&quot;Math&quot;], reporters: [&quot;default&quot;, &quot;jest-html-reporters&quot;], }; // eslint-disable-next-line import/no-default-export export default config;   ","version":"0.12.2","tagName":"h3"},{"title":"AskUIXRayStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#askuixraystepreporter","content":" info Due to restrictions this reporter only works when you run your workflows one after another (default for AskUI)!  ","version":"0.12.2","tagName":"h2"},{"title":"Enable and Configure the AskUIXRayStepReporter in askui-helper.ts (former jest.setup.ts)​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#enable-and-configure-the-askuixraystepreporter-in-askui-helperts-former-jestsetupts","content":" You have to do a few things in your askui-helper.ts (former jest.setup.ts) to enable the AskUIXRayStepReporter:  info We will try to move this into the custom testEnvironment we provide.  Import the reporterInitialize the reporterAdd it to the UiControlClientModify before beforeEach() and afterEach() hook to create/finish TestEntriesAdd writing the report to afterAll() hook  import { UiControlClient, UiController } from 'askui'; /* 1 Import the reporter */ import { AskUIXRayStepReporter } from '@askui/askui-reporters'; ... /* 2 Initialize the reporter */ let xRayReporter = new AskUIXRayStepReporter({ withScreenshots: 'always', }); beforeAll(async () =&gt; { ... aui = await UiControlClient.build({ credentials: { workspaceId: '&lt;your workspace id&gt;', token: '&lt;your access token&gt;', }, /* 3 Enable reporter */ reporter: xRayReporter, }); await aui.connect(); }); /* 4 Create TestEntry with name of test from it-block */ beforeEach(async () =&gt; { xRayReporter.createNewTestEntry(global.testName); }); /* 4 Finish TestEntry with the test status */ afterEach(async () =&gt; { xRayReporter.finishTestEntry(global.testStatus); }); afterAll(async () =&gt; { /* 5 Writing the report */ await xRayReporter.writeReport(); aui.disconnect(); await uiController.stop(); }); export { aui };   ","version":"0.12.2","tagName":"h3"},{"title":"Configure jest-xray-environment in jest.config.ts​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#configure-jest-xray-environment-in-jestconfigts","content":" For the AskUIXRayStepReporter step reporter to work properly you need a special testEnvironment that provides the names from the it-blocks used to create the JSON-Objects for each test. Configure the testEnvironment in your jest.config.ts as shown in the code below:  import type { Config } from '@jest/types'; const config: Config.InitialOptions = { preset: 'ts-jest', // This uses cjs module system // Replace cjs with esm if your project uses esm testEnvironment: '@askui/askui-reporters/dist/cjs/xray/jest-xray-environment.js', setupFilesAfterEnv: ['./helpers/askui-helper.ts'], sandboxInjectedGlobals: [ 'Math', ], reporters: [ &quot;default&quot;, &quot;jest-junit&quot; ] }; // eslint-disable-next-line import/no-default-export export default config;   ","version":"0.12.2","tagName":"h3"},{"title":"AskUIAnnotationStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#askuiannotationstepreporter","content":" ","version":"0.12.2","tagName":"h2"},{"title":"Enable and Configure the AskUIAnnotationStepReporter in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#enable-and-configure-the-askuiannotationstepreporter-in-jestsetupts","content":" import { AskUIAnnotationStepReporter, AnnotationLevel } from '@askui/askui-reporters'; ... aui = await UiControlClient.build({ ... reporter: new AskUIAnnotationStepReporter( // AnnotationLevel.ON_FAILURE, /* Uncomment and change to AnnotationLevel.ALL for reporting at every step */ // folderPath: &quot;report&quot;, /* Uncomment and change property for different folder */ // fileNameSuffix: &quot;_testStep_annotation&quot; /* Uncomment and change property for different file name suffix */ ), }); ...   AnnotationLevel is implemented as an enum. You have two options:  ON_FAILURE (Default Value): After a step failedALL: After every step  folderPath is the folder name, relative to the root of your project, the report-files will be saved to.  Default value: report  fileNameSuffix: The suffix for every report-file.  The generated report-filename has the following name convention: ** {YYYYYYMMDDTHHmmsssss}_{passed|failed}{fileNameSuffix}.html** Example: 20230922072153421_failed_testStep_annotation.html  ","version":"0.12.2","tagName":"h3"},{"title":"Enable Multiple Reporters​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#enable-multiple-reporters","content":" You can enable multiple reporters simultaneously by passing an array of reporters in the reporter property like this:  aui = await UiControlClient.build({ reporter: [ new AskUIAnnotationStepReporter( AnnotationLevel.ALL, &quot;annotation_report&quot;, &quot;_annotation&quot; ), new AskUIJestHtmlStepReporter({ withScreenshots: 'always' as const, // See below for possible values withDetectedElements: 'always' as const, // See below for possible values }) ], });   caution The testEnvironment setting has to be the SAME for all reporters in the array! The following table shows which reporters can be enabled together.  \tAskUIAllureStepReporter\tAskUIJestHtmlStepReporter\tAskUIAnnotationStepReporter\tAskUIXRayStepReporterAskUIAllureStepReporter ❌\t❌\t❌ AskUIJestHtmlStepReporter\t❌ ✅\t✅ AskUIAnnotationStepReporter\t❌\t✅ ✅ AskUIXRayStepReporter\t❌\t✅\t✅\t  ","version":"0.12.2","tagName":"h2"},{"title":"Implement Your Own Reporter​","type":1,"pageTitle":"Reporting","url":"/docs/0.12.2/general/Integrations/reporting#implement-your-own-reporter","content":" To write your own reporter you have to implement AskUI's Reporter interface. It offers three optional methods you can overwrite to adapt to your specific reporter framework:  export interface Reporter { config?: ReporterConfig; onStepBegin?(step: Step): Promise&lt;void&gt;; onStepRetry?(step: Step): Promise&lt;void&gt;; onStepEnd?(step: Step): Promise&lt;void&gt;; }   See the Example implementation for Allure on how that is used to extract the screenshot before/after each step and how to record a video of each step. ","version":"0.12.2","tagName":"h2"},{"title":"Windows","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Troubleshooting/windows","content":"","keywords":"","version":"0.12.2"},{"title":"AskUI UI Controller​","type":1,"pageTitle":"Windows","url":"/docs/0.12.2/general/Troubleshooting/windows#askui-ui-controller","content":" On Windows, the AskUI UI Controller may not terminate after each execution. This may lead to problems when using the AskUI UI Controller in a pipeline like a pipeline's run not coming to an end.  In this case you can force termination of the AskUI UI Controller. The UiController.stop() takes an optional boolean argument which is set to false by default. If we pass true to the UiController.stop() method, e.g., uiController.stop(true), we kill the AskUI UI Controller process.  await uiController.stop(true);   If you are using the Jest framework to execute your instructions, you can also force Jest to exit as described on our Jest-Troubleshooting page. This option terminates all processes which were set up and didn't close properly. The first option explicitly stops the AskUI UI Controller. ","version":"0.12.2","tagName":"h2"},{"title":"macOS","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Troubleshooting/mac-os","content":"","keywords":"","version":"0.12.2"},{"title":"Elements Can't Be Found / Annotated Screen Empty / UI Controller not starting​","type":1,"pageTitle":"macOS","url":"/docs/0.12.2/general/Troubleshooting/mac-os#elements-cant-be-found--annotated-screen-empty--ui-controller-not-starting","content":"   macOS sometimes does not recognize an installation of an AskUI UI Controller and, therefore, does not give it proper permissions although it looks like it.  You can fix this, by heading over to System Preferences &gt; Security &amp; Privacy. Open the Privacy tab and check if you can find the askui-ui-controller under Screen Recording and Accessibility.  If yes, revoke its permissions by unchecking the corresponding checkboxes and removing the application from each list by clicking the minus (-) button.    Head over to the installation of the AskUI UI Controller. If you did not install it manually, you can find it under node_modules/askui/dist/release/&lt;version&gt;/darwin.&lt;version&gt; may be latest or a semantic version like v0.8.0. In there, you should find corresponding .app directory which is your installation of the AskUI UI Controller. Start it by double-clicking it in the Finder.  The application should ask forScreen Recording permissions which you have to grant for it to work. You should remove every reference to UiController in your helper/jest.setup.ts so that the AskUI lib does not override the installation or tries to start it automatically.  Now, you can run your instructions starting the AskUI UI Controller manually each time. On the first run, you are going to be asked for Accessibility permissions which you also have to grant. After that, your instructions should run flawlessly as and you should be able to capture what is shown on the screen as well as execute instructions.  We are actively searching for a solution to improve the current state of affairs but Apple does not make it easy (which is good for your privacy but not so much for automation frameworks). But be sure that we keep trying ;)  ","version":"0.12.2","tagName":"h2"},{"title":"Mouse Cursor Not Moving as Expected​","type":1,"pageTitle":"macOS","url":"/docs/0.12.2/general/Troubleshooting/mac-os#mouse-cursor-not-moving-as-expected","content":" Apple devices that have a display manufactured by Apple, i.e., Macbook, iMac have a so-called Retina Display, and they have a higher pixel density.  To use the actions such as moveMouse() or moveMouseRelatively(), the coordinates should be doubled in order to move the mouse cursor as expected.  For example, let's say that your screen resolution is of 1920x1080. If you want to move the mouse cursor to the middle of the screen, the correct numeric arguments are as such:  await aui.moveMouse(1920,1080).exec();   The coordinate of the middle of the screen is (960,540). But if you use these numbers, it will move the cursor only half of the expected distance. ","version":"0.12.2","tagName":"h2"},{"title":"Tutorials","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Tutorials","content":"","keywords":"","version":"0.12.2"},{"title":"🤖 Android​","type":1,"pageTitle":"Tutorials","url":"/docs/0.12.2/general/Tutorials#-android","content":" Web Search on Android Go to Tutorial Flutter Android App Go to Tutorial  ","version":"0.12.2","tagName":"h2"},{"title":"🕸️ Browser​","type":1,"pageTitle":"Tutorials","url":"/docs/0.12.2/general/Tutorials#️-browser","content":" Google Cat Search Go to Tutorial Online Shop Go to Tutorial  ","version":"0.12.2","tagName":"h2"},{"title":"💻 Desktop​","type":1,"pageTitle":"Tutorials","url":"/docs/0.12.2/general/Tutorials#-desktop","content":" Spotify Like Go to Tutorial ","version":"0.12.2","tagName":"h2"},{"title":"Proxy","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Troubleshooting/proxy","content":"","keywords":"","version":"0.12.2"},{"title":"Installing AskUI Through NTLM or Kerberos Proxy Server​","type":1,"pageTitle":"Proxy","url":"/docs/0.12.2/general/Troubleshooting/proxy#installing-askui-through-ntlm-or-kerberos-proxy-server","content":" A Windows New Technology LAN Manager (NTLM) or Kerberos proxy requires you to authenticate yourself. This is done via your currently logged in Windows user or the username/password combination (Linux, macOS). The easiest way to do this is to install a local proxy that handles the handshake with the proxy for you.  ","version":"0.12.2","tagName":"h2"},{"title":"Install Local Proxy​","type":1,"pageTitle":"Proxy","url":"/docs/0.12.2/general/Troubleshooting/proxy#install-local-proxy","content":" We recommend Px as a local proxy. Install it in your preferred way and start it. The default port it runs on is 3128.  tip Choose the binary option if a package manager is not feasible in your environment.  ","version":"0.12.2","tagName":"h3"},{"title":"Windows Startup​","type":1,"pageTitle":"Proxy","url":"/docs/0.12.2/general/Troubleshooting/proxy#windows-startup","content":" You can add Px to the startup for the binary zipped option in Windows like this:  Create a px-start.bat file within the unzipped folder, e.g., c:\\tools\\px with the content: cd c:\\tools\\px (or whatever path you unzipped the archive to) px.exe Double-Click on the px-start.bat file to start Px Optional: Set up Px to autostart on system startup so you don’t have to start it manually each time you want to use it Create a link to px-start.batOpen the startup folder with Windows logo key + R, enter shell:startupMove the link to px-start.bat into this folder  ","version":"0.12.2","tagName":"h3"},{"title":"Create .npmrc file for npm​","type":1,"pageTitle":"Proxy","url":"/docs/0.12.2/general/Troubleshooting/proxy#create-npmrc-file-for-npm","content":" Create a .npmrc file in your AskUI project. You want to make sure that:  registry and noproxy point to your companies registry (i.e. Artifactory)proxy and https-proxy point to the local Px proxy  registry=&lt;company-registry-url&gt; proxy=http://127.0.0.1:3128 https-proxy=http://127.0.0.1:3128 noproxy=&lt;company-registry-url&gt;   ","version":"0.12.2","tagName":"h3"},{"title":"Set Environment Variables​","type":1,"pageTitle":"Proxy","url":"/docs/0.12.2/general/Troubleshooting/proxy#set-environment-variables","content":" Setting the proxy inside .npmrc does not cover all cases. Sometimes a separate node command spawns a new process which does not inherit the proxy settings. Therefore you need to set the environment variable HTTPS_PROXY like this:  Windows instructions  # Linux and macOS # Add it to your favourite shell # at startup if necessary export HTTPS_PROXY=http://127.0.0.1:3128   ","version":"0.12.2","tagName":"h3"},{"title":"UiController Connection to AskUI Inference​","type":1,"pageTitle":"Proxy","url":"/docs/0.12.2/general/Troubleshooting/proxy#uicontroller-connection-to-askui-inference","content":" We describe two ways to connect to our backend AskUI Inference.  ","version":"0.12.2","tagName":"h2"},{"title":"Using Default Configuration with hpagent​","type":1,"pageTitle":"Proxy","url":"/docs/0.12.2/general/Troubleshooting/proxy#using-default-configuration-with-hpagent","content":" Per default, our library uses hpagent to support the use of HTTP and HTTPS proxies. hpagent is an open source package which provides HTTP(S) proxies that keeps connections alive. To use it, you need to  install hpagent  npm install --save-dev hpagent   configure which proxies to use by setting the proxies' URLs using the environment variables HTTP_PROXY or HTTPS_PROXY  export HTTP_PROXY=http://&lt;your-proxy-url&gt; export HTTPS_PROXY=https://&lt;your-proxy-url&gt;   ","version":"0.12.2","tagName":"h3"},{"title":"Manually Configuring the HTTP and HTTPS Agent​","type":1,"pageTitle":"Proxy","url":"/docs/0.12.2/general/Troubleshooting/proxy#manually-configuring-the-http-and-https-agent","content":" If you need even more control, you can also configure an HTTP agent and HTTPS agent supporting your proxy manually for either one or both,  the UI Controller (configuring the UiController) running on the OS you would like to control andthe Inference API (configuring the UiControlClient) running on our servers and providing the vision to run your tests.  In the following example we are going to use hpagent again but you can use any HTTP and HTTPS agents that support proxies, e.g., the http.Agent or the https.Agent provided by the http and https module of Node.js, respectively.  Install hpagent  npm install --save-dev hpagent   Import hpagent (or the agent(s) you would like to use) and configure the UiController and/or the UiControlClient inside the test/helper/jest.setup.ts file.  import { HttpProxyAgent, HttpsProxyAgent } from 'hpagent'; // &lt;-- Add imports // other code beforeAll(async () =&gt; { // Add this block const httpProxyUrl = &quot;http://&lt;your-proxy-url&gt;&quot; // &lt;-- Adapt http proxy url const httpsProxyUrl = &quot;https://&lt;your-proxy-url&gt;&quot; // &lt;-- Adapt https proxy url const proxyAgents = { http: new HttpProxyAgent({ proxy: httpProxyUrl, }), https: new HttpsProxyAgent({ proxy: httpsProxyUrl, }), } // other code uiController = new UiController({ proxyAgents // &lt;-- Set proxy agents }); // other code aui = await UiControlClient.build({ proxyAgents // &lt;-- Set proxy agents }); // other code })   Here are some example for the httpProxyUrl (for more details see docs from hpagent)  Proxy Type\tURL\tDescriptionHTTP\te.g. http://proxy.company.com:8293\tA HTTP proxy without authentication HTTP + Basic Auth\te.g. http://username:password@proxy.company.com:8293\tA HTTP proxy with authentication SOCKET Socket proxies are not supported by hpagent  Here are some example for the httpsProxyUrl (for more details see docs from hpagent)  Proxy Type\tURL\tDescriptionHTTPS\te.g. https://proxy.company.com:8293\tA HTTPS proxy without authentication HTTPS + Basic Auth\te.g. https://username:password@proxy.company.com:8293\tA HTTP proxy with authentication. SOCKET Socket proxies are not supported by hpagent  ","version":"0.12.2","tagName":"h3"},{"title":"Deep Package Inspection​","type":1,"pageTitle":"Proxy","url":"/docs/0.12.2/general/Troubleshooting/proxy#deep-package-inspection","content":" Company proxies, like Zscalar, use deep package inspection to analyze the network traffic. Such proxies are adding self-signed certificates to the HTTPS request to break up the TLS connection.  This can result in the following error messages:   RequestError: self signed certificate   or   RequestError: unable to verify the first certificate   There are multiple options to deal with this:  Deactivate TLS certificate validation (NOT RECOMMENDED)​  This option deactivates the TLS validation (see here) and is not recommended. Only for testing!  Windows:  set NODE_TLS_REJECT_UNAUTHORIZED 0   macOS/Unix:  export NODE_TLS_REJECT_UNAUTHORIZED=0   Add Self-Signed Certificate as Extra CA Certs (RECOMMENDED)​  The other option is to add the self-signed certificate as extra certificates for Node.js.  Get the certificate and convert it to a .pem file, e.g., by exporting it with Chrome.Set the NODE_EXTRA_CA_CERTS with the following commands:  Windows:  set NODE_EXTRA_CA_CERTS '&lt;path&gt;\\&lt;cert&gt;.pem'   macOS/Unix:  export NODE_EXTRA_CA_CERTS='&lt;path&gt;/&lt;cert&gt;.pem'   Additional information:  Get Zscalar custom certificate ","version":"0.12.2","tagName":"h3"},{"title":"Google Cat Image Search","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Tutorials/google-cat-search","content":"","keywords":"","version":"0.12.2"},{"title":"Setup​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/0.12.2/general/Tutorials/google-cat-search#setup","content":" Follow one of the two options under Start to install AskUIOpen a Chrome browser window on your screen If you have multiple screens, configure the used display by setting the display variable in test/helper/jest.setup.js  ","version":"0.12.2","tagName":"h2"},{"title":"Setting Up AskUI​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/0.12.2/general/Tutorials/google-cat-search#setting-up-askui","content":" 💭 Let’s say we’re on google.com and we want to search for an image of a cat and then download it to our computer.  First, we break this task down into steps that a user would take. Then we can recreate those steps with AskUI instructions in code.  Go to Google Search pageGo to google imagesType “cat” in the search barSelect imageRight-click + save the image  Let us first get an annotated screenshot, where all of the on-screen elements are enclosed within annotated bounding boxes. This will help us select the correct elements with our instructions.  Open the file test/my-first-askui-test-suite.test.ts and replace the it-code block starting in line 4 with the following code:  it('annotate', async () =&gt; { await aui.annotate() });   Run the code from your terminal to create an annotated screenshot. A folder report in your project folder will appear.  npm run askui   If you want to annotate interactively change it to the following:  it('annotate', async () =&gt; { // Hit 'Esc' to stop the annotation // when you are done await aui.annotateInteractively() });   📌 The annotations are basically the substitute for IDs in selector-based frameworks. You can click on them to copy them into your clipboard.  If you are having problems with the execution, have a look at our Troubleshooting page.  ","version":"0.12.2","tagName":"h2"},{"title":"Writing and Debugging an AskUI Workflow​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/0.12.2/general/Tutorials/google-cat-search#writing-and-debugging-an-askui-workflow","content":" Now we can start to write our workflow, by locating the elements and then executing an instruction on them. Remember the steps, that we wanted to recreate?  Go to Google Search pageGo to google imagesType “cat” in the search barSelect imageRight-click + save the image  tip Make sure to open your browser on the configured display before the execution and move your mouse over the browser window immediately after starting the execution!  In the end, your code for the workflow looks like this.  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should find a cat image and save it', async () =&gt; { // Make sure the browser window has focus await aui.mouseLeftClick().exec(); // Open a new tab with keyboard shortcut // MacOS: command + t // Windows: control + T // Linux: control + t await aui .pressTwoKeys('command', 't') .exec(); // type google.com into browser bar await aui .typeIn('google.com') .text() .withText('Search Google or type a URL') .exec(); // Hit enter key await aui .pressKey('enter') .exec(); // Click the Images-text to the right of Gmail await aui .click() .text().withTextRegex(&quot;Image*&quot;) .rightOf() .text(&quot;Gmail&quot;) .exec(); // Type in cat into search field // Notice: withText does not have to be 100% equal await aui .typeIn(&quot;cat&quot;) .textfield() .contains() .icon().withText('microphone') .exec(); await aui .pressKey('enter') .exec(); // HINT // withText might need to be changed depending // on your search results! await aui .moveMouseTo() .image() .above() .text() .withText(&quot;pet guru Yuki Hattori explaiinICats&quot;) .exec(); // Save the image with right click await aui .mouseRightClick() .exec() // Find the right dialog entry await aui .click() .text() .withText('save image as') .exec(); // Save it // If it does not work because the button is not found // Remove the '.button()' await aui .click() .button() .withText(&quot;Save&quot;) .exec(); }); });   ","version":"0.12.2","tagName":"h2"},{"title":"Debugging​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/0.12.2/general/Tutorials/google-cat-search#debugging","content":" It’s possible that you’ll run into problems with locating elements. For example, when creating the tutorial, we first tried to locate the image nearest to the image title, like this:  await aui .moveMouseTo() .image() .nearestTo() .text() .withText(&quot;pet guru Yuki Hattori explaiinICats&quot;) .exec()   But it turns out, that our model uses a different metric for measuring distance between elements, which is why our workflow failed the first time. Then we substituted this function for above(), which fixed the problem for us.  Another problem regarding font-size occurred with the Images button. The model recognized Image with an s missing at the end. That is why we switched from _withText('Images') to withTextRegex('Image*').  await aui .click() .text().withTextRegex(&quot;Image*&quot;) .rightOf() .text(&quot;Gmail&quot;) .exec();   It is always a good idea to try to play around with the functions and see if you can tackle the problem from a different angle.  If you have a recurring or persisting issue, don’t hesitate to ask the community for help. You can be sure that your questions will be answered there. We’re excited to hear about how you apply AskUI to your projects.  If you have any feature requests, please feel free to post them in our Featurebase board.  Best regards and happy automating! ","version":"0.12.2","tagName":"h2"},{"title":"Web Search on Android","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Tutorials/android-search-in-browser","content":"","keywords":"","version":"0.12.2"},{"title":"Requirements​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.12.2/general/Tutorials/android-search-in-browser#requirements","content":" Android Studio or Android SDK Command-line Tools installed (See Setup Android tutorial).(optional) Android device, if you want to run your app on a real device.    ","version":"0.12.2","tagName":"h2"},{"title":"1. Prepare the AskUI Development Environment​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.12.2/general/Tutorials/android-search-in-browser#1-prepare-the-askui-development-environment","content":" ","version":"0.12.2","tagName":"h2"},{"title":"Install and initialize AskUI​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.12.2/general/Tutorials/android-search-in-browser#install-and-initialize-askui","content":" Please follow the Getting Started tutorial.  Configure AskUI for Android  We need to run the UiController manually with an extra argument to specify the runtime mode, as the current version of AskUI doesn't provide the API for running it with the runtime option yet:  # first, go to the folder that contains the binary cd &lt;YOUR_PROJECT_DIRECTORY&gt;/node_modules/askui/dist/release/latest/&lt;YOUR_PLATFORM&gt; # for example, Mac OS cd node_modules/askui/dist/release/latest/darwin/askui-ui-controller.app/Contents/MacOS/ # then run it ./askui-ui-controller -r android # If you can't find the binary as described above, # then you might have AskUI freshly installed and haven't run it yet. # The binary gets downloaded as the AskUI code runs the first time. # Run the command below to run the AskUI code: npm run askui   If the UiController starts, it will display the log of it on the shell. We can leave it in the background, and prepare a new terminal window for the next step.  💡If you got any errors after running the binary, please check if your android device/emulator is properly connected and recognized by the Android Debug Bridge adb by using this command: adb devices. You should see a list of recognized devices.  Next, we have to change a few lines of the generated code, as the code ships with the part that creates another UiController instance.  Go to helper/jest.setup.ts and comment out every line that is using uiController:  import { UiControlClient, UiController } from 'askui'; // Server for controlling the operating system // let uiController: UiController; // Client is necessary to use the askui API // eslint-disable-next-line import/no-mutable-exports let aui: UiControlClient; jest.setTimeout(60 * 1000 * 60); beforeAll(async () =&gt; { // uiController = new UiController({ // /** // * Select the display you want to run your tests on, display 0 is your main display; // * ignore if you have only one display // */ // display: 0, // }); // await uiController.start(); aui = await UiControlClient.build({ credentials: { workspaceId: myworkspaceid, token: mytoken, } }); await aui.connect(); }); afterAll(async () =&gt; { // await uiController.stop(); aui.disconnect(); }); export { aui };     ","version":"0.12.2","tagName":"h3"},{"title":"2. Try Annotating​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.12.2/general/Tutorials/android-search-in-browser#2-try-annotating","content":" Make sure that your Android device is connected, or if you are using the Android Emulator, make sure that it is open and running on your local machine.  AskUI provides a feature where you can monitor how the visible elements are understood by AskUI. Try to change the code within test/my-first-askui-test-suite.test.ts to the following:  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should show the annotation', async () =&gt; { await aui.annotateInteractively(); }); });   and run,  npm run askui     💡 Annotation is InteractiveTry to hover your mouse on the red bounding box. It will let you know how to manipulate that element via AskUI  ","version":"0.12.2","tagName":"h2"},{"title":"3. Automate Web Searching​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.12.2/general/Tutorials/android-search-in-browser#3-automate-web-searching","content":" Now we are good to go for the actual automation process. The automation consist of three steps:  Open ChromeSelect the search bar and type 'spacecraft'Click on the desired search result  ","version":"0.12.2","tagName":"h2"},{"title":"1) Open Chrome​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.12.2/general/Tutorials/android-search-in-browser#1-open-chrome","content":" To open Chrome, we first have to figure out how we can let AskUI know where to click on.  As we can see in the annotated image above, the Chrome icon is recognized as an icon: undo. Indeed, we could also tell AskUI to select the icon: undo, but we will try to do it in a more precise way.  What we're gonna do is:  (1) Select the search bar  (2) Type 'chrome'  (3) Select the icon above the text 'chrome'  This approach will give us a more consistent result because typing &quot;chrome&quot; in the search bar will give us a more understandable visual element.  Try to change your code according to this:  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should open chrome', async () =&gt; { await aui.click().textfield().exec(); // Type the desired keyword into the search bar await aui.type('chrome').exec(); // We wait for 1500 milliseconds, to make sure that the search result // has been loaded before AskUI start to look for the search result. await aui.waitFor(1500).exec(); // Then click the icon that is above the text 'chrome' await aui.click().icon().above().text('chrome').exec(); }); });   and run,  npm run askui   Now you will be able to see that Chrome has been opened.  ","version":"0.12.2","tagName":"h3"},{"title":"2) Select the Search Bar and Type 'spacecraft'​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.12.2/general/Tutorials/android-search-in-browser#2-select-the-search-bar-and-type-spacecraft","content":" Let's select the search bar of chrome, and type our desired keyword in there.    Add this code block to the bottom of our code:  // We first look for the search bar. Depending on the system language of your device, the default text within the search bar may differ. await aui.click().text('search or type web address').exec(); // Type our desired keyword and hit enter await aui.type('spacecraft').exec(); await aui.pressAndroidKey('enter').exec();   In some cases, when searching in Google, you will be asked to give consent for the cookies. To avoid our execution from failing, we have to examine whether we got a pop-up for the cookie consent or not:  try { // The 'expect()' examines whether a specific element is detected or not. // An instruction starting with 'expect()' must always end with 'exists()' or 'notExists()' await aui.expect().text().containsText('cookies').notExists().exec(); } catch (error) { await aui.click().text('read more').exec(); await aui.waitFor(1000).exec(); // wait until the scrolling animation has been finished await aui.click().text('accept all').exec(); } // From here, we can write our next instructions   ","version":"0.12.2","tagName":"h3"},{"title":"3) Click on the Desired Search Result​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.12.2/general/Tutorials/android-search-in-browser#3-click-on-the-desired-search-result","content":"   After clearing the cookie consent pop-up, we can see and click our desired search result. In our case, we will look for the result from Wikipedia:  // We ask the AskUI to click the text that contains 'wikipedia', // which is the text that is nearest to the text containing 'wikipedia.org' await aui.click() .text() .containsText('wikipedia') .nearestTo() .text() .containsText('wikipedia.org') .exec();   Pay attention to the relational element-description nearestTo() that is interconnecting two different text elements.  AskUI offers several Relational Element-Descriptions, which enable you to select the desired element by their screen position:  above()below()contains()in()leftOf()rightOf()nearestTo()  💡 About withText() and containsText():  You might wonder how withText() and containsText() differ. withText() tries to match the given text as the whole sequence, whereas containsText() tries to match the given text as a sub-text within the elements. Generally speaking, containsText() can be handier to match the text roughly, but you might face a case where you want to find a specific text as a whole sequence.    ","version":"0.12.2","tagName":"h3"},{"title":"4. Complete AskUI Code​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.12.2/general/Tutorials/android-search-in-browser#4-complete-askui-code","content":" import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should search spacecraft in chrome', async () =&gt; { await aui.click().textfield().exec(); // Type the desired keyword into the search bar await aui.type('chrome').exec(); // We wait for 1500 miliseconds, to make sure that the search result has been loaded before AskUI start to look for the search result. await aui.waitFor(1500).exec(); // Then click the icon that is above the text 'chrome' await aui.click().icon().above().text('chrome').exec(); // We wait the Chrome app to be launched await aui.waitFor(1500).exec(); // We first look for the search bar. Depending on the system language of your device, the default text within the search bar may differ. await aui.click().text('search or type web address').exec(); // Type our desired keyword and hit enter await aui.type('spacecraft').exec(); await aui.pressAndroidKey('enter').exec(); // We wait for the search result to be loaded await aui.waitFor(3000).exec(); try { // The 'expect()' examines whether a specific element is detected or not. // An instruction starting with 'expect()' must always end with 'exists()' or 'notExists()' await aui.expect().text().containsText('cookies').notExists().exec(); } catch (error) { await aui.click().text('read more').exec(); await aui.waitFor(1000).exec(); // wait until the scrolling animation has been finished await aui.click().text('accept all').exec(); } // We ask the AskUI to click the text that contains 'wikipedia' which is the text that is nearest to the text containing 'wikipedia.org' await aui.click().text().containsText('wikipedia').nearestTo().text().containsText('wikipedia.org').exec(); }); });     ","version":"0.12.2","tagName":"h2"},{"title":"5. Conclusion​","type":1,"pageTitle":"Web Search on Android","url":"/docs/0.12.2/general/Tutorials/android-search-in-browser#5-conclusion","content":" We have covered a use case of AskUI to automate web searching in Android devices. If you got any issues while following the instruction, feel free to ask in our Outverse-Community! ","version":"0.12.2","tagName":"h2"},{"title":"Online Shop Login","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Tutorials/shop-demo","content":"","keywords":"","version":"0.12.2"},{"title":"Setup​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.12.2/general/Tutorials/shop-demo#setup","content":" Follow the AskUI installation guide and write your first instructionOpen a browser on your screen If you have multiple screens, configure the used display by setting the display variable at test/helper/jest.setup.js  ","version":"0.12.2","tagName":"h2"},{"title":"Code​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.12.2/general/Tutorials/shop-demo#code","content":" After running the npx askui init command as described in the setup you will have a file test/my-first-askui-test-suite.test.ts. In this file add a new workflow (it-code-block) inside the body of the callback passed to the describe function:  describe(/* a string identifying the test suite */, () =&gt; { ... (other workflows) it('Should log into account', async () =&gt; { }); });   ","version":"0.12.2","tagName":"h2"},{"title":"1. Open the Demo Shop​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.12.2/general/Tutorials/shop-demo#1-open-the-demo-shop","content":" First we need to open the demo shop in the browser. For that we open the browser and then type the URL into the search bar and hit enter.  it('Should log into account', async () =&gt; { // First open the browser. // If it is already open it should focus the current window // macOS: open -a 'Google Chrome' // Windows: start chrome await aui.execOnShell(&quot;start chrome&quot;).exec(); // Open a new tab // macOS: command + t // windows: control + t await aui.pressTwoKeys('control', 't').exec(); // Click the textfield or URL bar that contains // the text 'Search Google or type a URL' await aui.click() .text() .withText('Search Google or type a URL').exec(); // Type the text into the focused element await aui.type('https://askui-demo-shop-6e358.web.app/').exec(); // Navigate to the website await aui.pressKey('enter').exec(); });   When you run this code with npm run askui, you should see the demo online shop opening in the browser you opened.  ","version":"0.12.2","tagName":"h3"},{"title":"2. Navigate to the Login Dialog​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.12.2/general/Tutorials/shop-demo#2-navigate-to-the-login-dialog","content":" Next, to open the login dialog, we need to click the text login at the top of the page. We can do this with the following instruction:  it('Should log into account', async () =&gt; { ... await aui.click().text('Login').exec(); });   ","version":"0.12.2","tagName":"h3"},{"title":"3. Fill out Login Information​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.12.2/general/Tutorials/shop-demo#3-fill-out-login-information","content":" After opening the login dialog, we need to enter an email address and a password. For this we will use the typeIn action. After filling in an email address, depending on the browser used the textfield may open an auto-complete drop-down that overlaps with the password field:    To keep the password field visible, we have to hide the auto-complete drop-down. In order to do this, we have to blur the email input field. We do this by clicking on the headline of the page (&quot;Login&quot;). Afterwards, we can type into the password field.  it('Should log into account', async () =&gt; { ... await aui.typeIn('test@askui.com').textfield().contains().text('Email Address').exec(); await aui.click().text('Login').above().textfield().exec(); await aui.typeIn('passwort').textfield().contains().text('Password').exec(); });   ","version":"0.12.2","tagName":"h3"},{"title":"4. Click on Login Button​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.12.2/general/Tutorials/shop-demo#4-click-on-login-button","content":" After filling in email and password, we need to click the login button. The following instruction does that for us:  it('Should log into account', async () =&gt; { ... await aui.click().button().contains().text('Log in').exec(); });   ","version":"0.12.2","tagName":"h3"},{"title":"5. Check whether Login worked & Log out​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.12.2/general/Tutorials/shop-demo#5-check-whether-login-worked--log-out","content":" Finally, we need to check whether the login worked. We can do this by checking if the text &quot;Logout test@askui.com&quot; is displayed in the header as this is only displayed if we are logged in. We complete the workflow by logging out so that the workflow can easily be rerun without having to log out manually.  it('Should log into account', async () =&gt; { ... await aui.expect().text('Logout test@askui.com').exists().exec(); await aui.click().text('Logout test@askui.com').exec(); });   ","version":"0.12.2","tagName":"h3"},{"title":"Result​","type":1,"pageTitle":"Online Shop Login","url":"/docs/0.12.2/general/Tutorials/shop-demo#result","content":" The following code block shows the finished code for the login of the web shop:  it('Should log into account', async () =&gt; { // First open the browser. // If it is already open it should focus the current window // macOS: open -a 'Google Chrome' // Windows: start chrome await aui.execOnShell(&quot;start chrome&quot;).exec(); // Open a new tab // macOS: command + t // windows: control + t await aui.pressTwoKeys('control', 't').exec(); // Click the textfield or URL bar that contains // the text 'Search Google or type a URL' await aui.click() .text() .withText('Search Google or type a URL').exec(); // Type the text into the focused element await aui.type('https://askui-demo-shop-6e358.web.app/').exec(); // Navigate to the website await aui.pressKey('enter').exec(); await aui.click().text('Login').exec(); await aui.typeIn('test@askui.com').textfield().contains().text('Email Address').exec(); await aui.click().text('Login').above().textfield().exec(); await aui.typeIn('passwort').textfield().contains().text('Password').exec(); await aui.click().button().contains().text('Log in').exec(); await aui.expect().text('test@askui.com').exists().exec(); await aui.click().text('Logout test@askui.com').exec(); });   To run this code use the npm run askui command. ","version":"0.12.2","tagName":"h2"},{"title":"click","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/click","content":"click production Mouse left-clicks/taps on the filtered element by moving the mouse cursor to the filtered element first. If you need a simple mouseleftclick/tap only, use mouseLeftClick. Example: await aui.click().button().withText('Google Search').exec(); ","keywords":"","version":"Next"},{"title":"execOnShell","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/execonshell","content":"execOnShell production Executes a shell command on the device your UiController is connected to. Example: // Open the lastpass app await aui.execOnShell('monkey -p com.lastpass.authenticator 1').exec(); // Open Google Chrome on Windows await aui.execOnShell(&quot;start chrome&quot;).exec() ;// Open Google Chrome on macOS await aui.execOnShell(&quot;open -a 'Google Chrome'&quot;).exec(); // Open Google Chrome on Linux await aui.execOnShell(&quot;chrome&quot;).exec(); @param {string} shell_command - A shell command which is executed.","keywords":"","version":"Next"},{"title":"expect","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/expect","content":"expect production Expects a condition, e.g., exists() or notExits(). Use the structure expect().&lt;your filter&gt;.(exists()|notExists()) as shown in the examples below. Examples: await aui.expect().text('Login').exists().exec() await aui.expect().text('Login').notExists().exec() ","keywords":"","version":"Next"},{"title":"mouseDoubleLeftClick","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/mousedoubleleftclick","content":"mouseDoubleLeftClick production Double-clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouse(500,500).exec(); await aui.mouseDoubleLeftClick().exec(); ","keywords":"","version":"Next"},{"title":"mouseDoubleMiddleClick","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/mousedoublemiddleclick","content":"mouseDoubleMiddleClick production Double-clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleMiddleClick().exec(); ","keywords":"","version":"Next"},{"title":"Like on Spotify Desktop App","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Tutorials/spotify-tutorial","content":"","keywords":"","version":"0.12.2"},{"title":"Setup​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.12.2/general/Tutorials/spotify-tutorial#setup","content":" Follow the AskUI installation guide and write your first instructionOpen the Spotify desktop application on your screen If you have multiple screens, configure the used display by setting the display variable at test/helper/jest.setup.js  ","version":"0.12.2","tagName":"h2"},{"title":"Code​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.12.2/general/Tutorials/spotify-tutorial#code","content":" After running the npx askui init command as described in the setup you will have a file test/my-first-askui-test-suite.test.ts. In this file add a new workflow (it-code-block) inside the body of the callback passed to the describe function:  describe(/* a string identifying the test suite */, () =&gt; { ... (other tests) it('should like Spotify song', async () =&gt; { }); });   ","version":"0.12.2","tagName":"h2"},{"title":"1. Navigate to the Search Page​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.12.2/general/Tutorials/spotify-tutorial#1-navigate-to-the-search-page","content":" First, we need to open the search page where we can look for a song:  it('should like Spotify song', async () =&gt; { await aui.click().icon().withText('search').exec(); });   ","version":"0.12.2","tagName":"h3"},{"title":"2. Search for a Song​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.12.2/general/Tutorials/spotify-tutorial#2-search-for-a-song","content":" Then we can use the search field (a textfield) to search a song:  it('should like Spotify song', async () =&gt; { ... await aui.typeIn('Bohemian Rhapsody').textfield().exec(); await aui.pressKey('enter').exec(); });   ","version":"0.12.2","tagName":"h3"},{"title":"3. Open Menu for a Song​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.12.2/general/Tutorials/spotify-tutorial#3-open-menu-for-a-song","content":" On the search result page we need to right click a song to open the menu for the song:  it('should like Spotify song', async () =&gt; { ... await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Songs').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Save to your Liked Songs').exec(); });   As the text &quot;Bohemian Rhapsody&quot; is present on the page multiple times, we are specifying the position of the text we want to click further by saying that it is the one below the text &quot;Songs&quot;.  caution We expect that the song has not yet been liked (although we totally understand if this is the case - we like it, too 😉 - but just for the sake of this workflow, let's unlike it or use another song).  ","version":"0.12.2","tagName":"h3"},{"title":"4. Check Whether the Song was Added to Liked Songs​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.12.2/general/Tutorials/spotify-tutorial#4-check-whether-the-song-was-added-to-liked-songs","content":" Finally, we want to check whether the song was actually added to the liked songs:  it('should like Spotify song', async () =&gt; { ... await aui.click().text('Liked Songs').exec(); await aui.expect().text('Bohemian Rhapsody').exists().exec(); });   ","version":"0.12.2","tagName":"h3"},{"title":"5. Remove Song from Like Songs​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.12.2/general/Tutorials/spotify-tutorial#5-remove-song-from-like-songs","content":" To be able to run the workflow again, it is necessary to reset the state of Spotify, or more specifically, your liked songs. One option would be to add the following instructions to your code in order to remove the song from the liked songs.  it('should like Spotify song', async () =&gt; { ... await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Title').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Remove from your Liked Songs').exec(); });   ","version":"0.12.2","tagName":"h3"},{"title":"Result​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/0.12.2/general/Tutorials/spotify-tutorial#result","content":" The following code block shows the complete code for the Spotify automation:  it('should like Spotify song', async () =&gt; { await aui.click().icon().withText('search').exec(); await aui.typeIn('Bohemian Rhapsody').textfield().exec(); await aui.pressKey('enter').exec(); await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Songs').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Save to your Liked Songs').exec(); await aui.click().text('Liked Songs').exec(); await aui.expect().text('Bohemian Rhapsody').exists().exec(); await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Title').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Remove from your Liked Songs').exec(); });   To run this workflow use the npm run askui command. ","version":"0.12.2","tagName":"h2"},{"title":"mouseDoubleRightClick","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/mousedoublerightclick","content":"mouseDoubleRightClick production Double-clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleRightClick().exec(); ","keywords":"","version":"Next"},{"title":"Flutter Sample Android App","type":0,"sectionRef":"#","url":"/docs/0.12.2/general/Tutorials/flutter-android-sample-app","content":"","keywords":"","version":"0.12.2"},{"title":"Live Demo in Action (playback speed x3)​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.12.2/general/Tutorials/flutter-android-sample-app#live-demo-in-action-playback-speed-x3","content":"   ","version":"0.12.2","tagName":"h2"},{"title":"Setup​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.12.2/general/Tutorials/flutter-android-sample-app#setup","content":" The source code for the Flutter demo app used in this tutorial is provided in this repository.  ","version":"0.12.2","tagName":"h2"},{"title":"1. Build and Run Flutter Demo App​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.12.2/general/Tutorials/flutter-android-sample-app#1-build-and-run-flutter-demo-app","content":" Install Flutter Clone this repository and run flutter create demo_app within the directory:  git clone https://github.com/askui/flutter-example-automation cd flutter-example-automation flutter create demo_app cd demo_app   Install dependencies for the Flutter demo app:  # run this command inside the flutter project # directory `demo_app/` flutter pub add camera intl   To use the camera, we need to set the minSdkVersion in android/app/build.gradle:  // inside the 'android/app/build.gradle' // set the 'minSdkVersion' to 21 default config { ... minSdkVersion 21 ... }   (optional) The app is ready to be built but will throw deprecation warnings. If you want to clear the deprecation warnings, follow this step (See also this issue.).  # change the respective part inside the 'pubspec.yaml' dependencies: camera: git: url: https://github.com/flutter/plugins path: packages/camera/camera ref: 9e46048ad2e1f085c1e8f6c77391fa52025e681f   Run the Android Emulator. Run the demo app:  flutter run   Now you should see the demo app running on your Android device.  Setup ADBKeyboard In this example, we are going to automate the typing on the Android device. To let AskUI fluently type as desired, we will use a virtual keyboard that handles the keyboard input via adb: ADBKeyboard.apk  ‍  Download the ADBKeyboard package (Important: Version 2.0): Link to GitHub Repository Unzip it. Find your device:  # Make sure that your Android device is connected, and the USB debugging mode is enabled adb devices   Install the ADBKeyboard on the device:  # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; install ADBKeyboard.apk   Configure the ADB Keyboard:  # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; shell settings put secure default_input_method com.android.adbkeyboard/.AdbIME   Enable the ADB Keyboard:  # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; shell ime enable com.android.adbkeyboard/.AdbIME   To check if it is enabled:  Click on a textfield in an app and see if the ADB Keyboard {ON} notification is shown at the bottom of the screen.  ","version":"0.12.2","tagName":"h3"},{"title":"3. Setup AskUI​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.12.2/general/Tutorials/flutter-android-sample-app#3-setup-askui","content":" Setup AskUI by following the Getting Started Guide. We need to run the UiController directly with an extra argument to specify the runtime mode, as the current version of AskUI(version 0.7.2) doesn't provide the API for running it with the runtime argument yet. From within your npm project path, go to the directory that contains the askui-ui-controller binary:  cd &lt;YOUR_PROJECT_DIRECTORY&gt;/node_modules/askui/dist/release/latest/&lt;YOUR_PLATFORM&gt; ./askui-ui-controller -r android # for example, macOS: cd node_modules/askui/dist/release/latest/darwin/askui-ui-controller.app/Contents/MacOS/./askui-ui-controller -r android # If you can't find the binary as described above, # then you might have AskUI freshly installed and haven't run it yet. # The binary gets downloaded as the AskUI code runs. # Run the command below to run the AskUI code: npm run askui   If you got them both (emulator and UiController) running, then we are ready to go for the UI automation.  ‍ 3) You need to deactivate a few lines of the code in test/helper/jest.setup.ts that is running the UiController, because we are already running it manually in the previous step:  // file location: test/helper/jest.setup.ts // comment out every line that uses uiController import { UiControlClient, UiController } from 'askui'; // uiController: UiController; let aui: UiControlClient; jest.setTimeout(60 * 1000 * 60); beforeAll(async () =&gt; { // uiController = new UiController({ // /** // * Select the display you want to run your tests on, display 0 is your main display; // * ignore if you have only one display // */ // display: 0, // }); // await uiController.start(); aui = await UiControlClient.build({ credentials:{ workspaceId: 'YOUR_WORKSPACEID_FROM_ASKUI_STUDIO', token: 'YOUR_TOKEN_FROM_ASKUI_STUDIO', } }); await aui.connect(); }); afterAll(async () =&gt; { // await uiController.stop(); aui.disconnect(); }); export { aui };   ","version":"0.12.2","tagName":"h2"},{"title":"Breaking Down the AskUI Code​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.12.2/general/Tutorials/flutter-android-sample-app#breaking-down-the-askui-code","content":" This chapter will walk you through the provided askui-test/demo-automation.ts step by step. The code is divided into three parts, and each part automates a different tab within the demo app:  Outline tab: Find a textfield and type in characters.Datepicker tab: Select a desired date within the date picker widget.Camera tab: Open the camera and push the record button.  ","version":"0.12.2","tagName":"h2"},{"title":"0. General Tips for Using AskUI as a More Friendly Tool:​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.12.2/general/Tutorials/flutter-android-sample-app#0-general-tips-for-using-askui-as-a-more-friendly-tool","content":" Try to annotate : Use await aui.annotateInteractively() or await aui.annotate() in order to see how AskUI is understanding the visible elements on your screen. By using await aui.annotate(), the result of the annotation will be saved in the folder report/ as an HTML file. Be aware of the screen size of your device: AskUI understands your application based on the screen shown and captured. Therefore, on some occasions, you may want to know your screen size to e.g. properly scroll or swipe within your application. You may need to change the numbers for the input swipe command within the provided code so that it suits the screen size of your device. Try to select the elements by their text  tip: If you are using a device with a bigger screen e.g. Tablet, then the screen of your device (real Android device or emulator) might be big enough to see the whole page without scrolling.  ","version":"0.12.2","tagName":"h2"},{"title":"1. Click and Type​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.12.2/general/Tutorials/flutter-android-sample-app#1-click-and-type","content":" The code is within the file askui-test/demo-automation.ts. Copy and paste the code into your AskUI code.  We start the run from the very first tab of our demo app.    To type into a textfield, we first need to get focus on the desired textfield. We can achieve it by running the code below:  // click on the textfield and type characters // repeat this as many times as the textfields await aui.click().text('Enter your username').exec(); await aui.type('askui').exec();   As we have multiple of textfields in our demo app, we can iterate the same procedure for each of them:  // click on the textfield and type characters // repeat this as many times as the textfields await aui.click().text('Enter your username').exec(); await aui.type('askui').exec(); // click and type the email address await aui.click().text('Enter your email').exec(); await aui.type('askui@askui.com').exec(); // Click and type the address await aui.click().text('Enter your address').exec(); await aui.type('Haid-und-Neu-Straße 18').exec(); // Pressing enter is the equivalent of pressing the return button on the on-screen-keyboard // This gets rid of the focus from the textfield await aui.pressAndroidKey('enter').exec();   After filling up the textfields, we can push the buttons at the bottom of the page:  // Press the 'Submit' button await aui.click().text('Submit').exec(); // We will have a popup window that has two buttons. Press the 'Refuse' button await aui.click().text('Refuse').exec(); // Here we press multiple toggle buttons one by one await aui.click().text('Banana').exec(); await aui.click().text('Mango').exec(); await aui.click().text('Sunny').exec(); await aui.click().text('Rainy').exec(); await aui.click().text('Windy').exec(); // Attention for swiping! /* Swipe/scroll within the page - execOnShell() can run shell commands within the device via adb. - Note that, you have to adjust the four numeric parameters, in order to make it fit to your device's screen. - The syntax is: input swipe &lt;startX&gt; &lt;startY&gt; &lt;endX&gt; &lt;endY&gt; - Depending on the screen size of your device, the coordinates should stay within the scrollable/swipeable area of the app. i.e. the 'Tabbar' at the top of the demo app is not scrollable. */ // Here we swipe the page two times in a row await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); await aui.execOnShell('input swipe 1000 1000 100 1000').exec();   ","version":"0.12.2","tagName":"h3"},{"title":"Datepicker​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.12.2/general/Tutorials/flutter-android-sample-app#datepicker","content":" After running the code above, we should see the demo app swiped to the Datepicker tab.    First, we select and type characters into two different textfields:  // First, we type in the desired values into the textfields. await aui.click().text('Title').exec(); await aui.type('My vacation plan').exec(); await aui.click().text('Description').exec(); await aui.type('0. Drink a lot of water').exec(); await aui.pressAndroidKey('tab').exec();   Thereafter, we interact with two different date picker widgets that are represented with edit buttons:  // Second, we select a desired date from the Datepicker widget. // Notice how we select the icon 'chevron right/left' to shift the calendar month. await aui.click().text('edit').nearestTo().text('Depature').exec(); // this will open up the calendar await aui.click().icon().withText('chevron right').exec(); // within the calendar, we push the &gt; icon on the top right corner await aui.click().icon().withText('chevron right').exec(); await aui.click().text('7').exec(); // select 7 await aui.click().text('ok').exec(); // then, press OK // Repeat the step for the next Datepicker widget. await aui.click().text('edit').nearestTo().text('Return').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().text('5').exec(); await aui.click().text('ok').exec();   Let's go further below to the bottom of the page, and then interact with more interfaces:  // click and check the checkbox await aui.click().checkboxUnchecked().nearestTo().text('Brushed Teeth').exec(); // finally, we turn on the switch await aui.click().switchDisabled().nearestTo().text('Enable feature').exec(); // Swipe the page to the Camera tab await aui.execOnShell('input swipe 1000 1000 100 1000').exec();   ","version":"0.12.2","tagName":"h2"},{"title":"Take a Picture with the Camera​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.12.2/general/Tutorials/flutter-android-sample-app#take-a-picture-with-the-camera","content":" In the final tab Camera, we can launch the device's camera and take a picture by pressing the record button. ‍  // Click on the button 'Take a Picture', then it will launch the camera await aui.click().button().contains().text('Take a Picture').exec(); // Notice how we select the record button. // Our demo-app intends to have the record button in a circular shape. // So we can look for an icon which is a 'circle' // It might be different in other applications. await aui.click().icon().containsText('circle').exec();   ","version":"0.12.2","tagName":"h2"},{"title":"Complete AskUI Code​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.12.2/general/Tutorials/flutter-android-sample-app#complete-askui-code","content":" This is the complete code that runs AskUI to automate our workflow:  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { xit('annotate', async () =&gt; { await aui.annotateInteractively(); }); it('should fill up the textfields and push buttons', async () =&gt; { // click on the textfield and type characters // repeat this as many times as the textfields await aui.click().text('Enter your username').exec(); await aui.type('askui').exec(); // click on the textfield and type the email await aui.click().text('Enter your email').exec(); await aui.type('askui@askui.com').exec(); // Click and type the address await aui.click().text('Enter your address').exec(); await aui.type('Haid-und-Neu-Straße 18').exec(); // Pressing enter is the equivelant to pressing the return button on the on-screen-keyboard // This gets rid of the focus from the textfield await aui.pressAndroidKey('enter').exec(); // Press the 'Submit' button await aui.click().text('Submit').exec(); // We will have a popup window that has two buttons. Press the 'Refuse' button await aui.click().text('Refuse').exec(); // Here we press multiple of toggle buttons one by one await aui.click().text('Banana').exec(); await aui.click().text('Mango').exec(); await aui.click().text('Sunny').exec(); await aui.click().text('Rainy').exec(); await aui.click().text('Windy').exec(); // Attention for swiping! /* Swipe/scroll within the page - execOnShell() can run shell commands within the device via adb. - Note that, you have to adjust the four numeric parameters, in order to make it fit to your device's screen. - The syntax is: input swipe &lt;startX&gt; &lt;startY&gt; &lt;endX&gt; &lt;endY&gt; - Depending on the screen size of your device, the coordinates should stay within the scrollable/swipeable area of the app. i.e. the 'Tabbar' at the top of the demo app is not scrollable. */ // Here we swipe the page two times in a row await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); }); it('should pick the dates', async () =&gt; { // First, we type in the desired values into the textfields. await aui.click().text('Title').exec(); await aui.type('My vacation plan').exec(); await aui.click().text('Description').exec(); await aui.type('0. Drink a lot of water').exec(); await aui.pressAndroidKey('tab').exec(); // Second, we select a desired date from the Datepicker widget. // Notice how we select the icon 'chevron right/left' to shift the calendar month. await aui.click().text('edit').nearestTo().text('Depature').exec(); // this will open up the calendar await aui.click().icon().withText('chevron right').exec(); // within the calendar, we push the &gt; icon on the top right corner await aui.click().icon().withText('chevron right').exec(); await aui.click().text('7').exec(); // select 7 await aui.click().text('ok').exec(); // then, press OK // Repeat the step for the next Datepicker widget. await aui.click().text('edit').nearestTo().text('Return').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().text('5').exec(); await aui.click().text('ok').exec(); // click and check the checkbox await aui.click().checkboxUnchecked().nearestTo().text('Brushed Teeth').exec(); // finally, we turn on the switch await aui.click().switchDisabled().nearestTo().text('Enable feature').exec(); // Swipe the page to the Camera tab await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); }); it('should take a picture', async ()=&gt;{ // Click on the button 'Take a Picture', then it will launch the camera await aui.click().button().contains().text('Take a Picture').exec(); // Notice how we select the record button. // Our demo-app intends to have the record button in a circular shape. // So we can look for an icon which is a 'circle' // It might be different in other applications. await aui.click().icon().containsText('circle').exec(); }); });   ","version":"0.12.2","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/0.12.2/general/Tutorials/flutter-android-sample-app#conclusion","content":" After following through this tutorial, you should be able to automate the interaction with the provided demo app. Although this example specifically provides a demo app built with Flutter, the overall method of using AskUI should also work with any mobile app running on an Android device.  If you got an issue while following this example, or in case you would like to share your use case, don't hesitate to join our community on Outverse! ","version":"0.12.2","tagName":"h2"},{"title":"mouseRightClick","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/mouserightclick","content":"mouseRightClick production Clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseRightClick().exec(); ","keywords":"","version":"Next"},{"title":"mouseMiddleClick","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/mousemiddleclick","content":"mouseMiddleClick production Clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseMiddleClick().exec(); ","keywords":"","version":"Next"},{"title":"mouseLeftClick","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/mouseleftclick","content":"mouseLeftClick production Clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseLeftClick().exec(); ","keywords":"","version":"Next"},{"title":"mouseToggleDown","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/mousetoggledown","content":"mouseToggleDown production Toggles mouse down (Left mouse key/tap). This is equivalent to mouse-left-press-and-hold. It holds the mouse button until the mouseToggleUp() is called. Often combined with mouseToggleUp()to automate drag-and-drop. Example: await aui.mouseToggleDown().exec(); await aui.moveMouseRelatively(-400,0).exec(); await aui.mouseToggleUp().exec(); ","keywords":"","version":"Next"},{"title":"mouseToggleUp","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/mousetoggleup","content":"mouseToggleUp production Toggles mouse up (Left mouse key/tap).This is equivalent to releasing the pressing mouse left button. Often combined with mouseToggleDown()to automate drag-and-drop. Example: await aui.mouseToggleDown().exec(); await aui.moveMouseRelatively(-400,0).exec(); await aui.mouseToggleUp().exec(); ","keywords":"","version":"Next"},{"title":"moveMouse","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/movemouse","content":"moveMouse production Moves the mouse to an arbitrary absolute x and y coordinates. If you want to move your mouse cursor to an element, use moveMouseTo(). caution macOS only: Due to the higher pixel density of the retina display, the input coordinates must be doubled in order to move the mouse as expected. For example, if you want to move the mouse for 100 pixels, use 200. Example: await aui.moveMouse(500, 500).exec(); @param {number} x_coordinate - A (positive/negative) x coordinate.@param {number} y_coordinate - A (positive/negative) y coordinate.","keywords":"","version":"Next"},{"title":"moveMouseRelatively","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/movemouserelatively","content":"moveMouseRelatively production Moves the mouse from the current position (relative) in x and y direction. caution macOS only: Due to the higher pixel density of the retina display, the input coordinates must be doubled in order to move the mouse as expected. For example, if you want to move the mouse for 100 pixels, use 200. Example: await aui.moveMouseRelatively(0, 50).exec(); @param number x_offset - A (positive/negative) x direction.@param number y_offset - A (positive/negative) y direction.","keywords":"","version":"Next"},{"title":"moveMouseTo","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/movemouseto","content":"moveMouseTo production Move mouse over the filtered element. Example: await aui.moveMouseTo().text('Grinning_Face').exec() ","keywords":"","version":"Next"},{"title":"moveMouseRelativelyTo","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/movemouserelativelyto","content":"moveMouseRelativelyTo production Moves the mouse relatively to an element in the direction. This can be used when the mouse should not hover over an element anymore. caution macOS only: Due to the higher pixel density of the retina display, the input coordinates must be doubled in order to move the mouse as expected. For example, if you want to move the mouse for 100 pixels, use 200. Examples: // Move mouse 30 pixels below button await aui.moveMouseRelativelyTo(0, 30).button().withText('Submit').exec() @param number x_offset - A (positive/negative) x direction.@param number y_offset - A (positive/negative) y direction.","keywords":"","version":"Next"},{"title":"pressAndroidThirdKey","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/pressandroidthirdkey","content":"pressAndroidThirdKey production Press three Android keys like CTRL+ALT+DEL @param {ANDROID_KEY} first_key - A Android key@param {ANDROID_KEY} second_key - A Android key@param {ANDROID_KEY} third_key - A Android key","keywords":"","version":"Next"},{"title":"pressKey","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/presskey","content":"pressKey production Press one keys like del Operating system specific mappings: Windows: command-key maps to windows-key Example: await aui.pressKey('tab').exec(); @param {PC_AND_MODIFIER_KEY} key - A key","keywords":"","version":"Next"},{"title":"pressAndroidTwoKey","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/pressandroidtwokey","content":"pressAndroidTwoKey production Press two Android keys like volume_down+power. Details Available keyshome, back, call, endcall, star, pound, dpad_up, dpad_down, dpad_left, dpad_right, dpad_center, volume_up, volume_down, power, camera, clear, comma, period, alt_left, alt_right, shift_left, shift_right, tab, space, sym, explorer, envelope, enter, del, grave, minus, equals, left_bracket, right_bracket, backslash, semicolon, apostrophe, slash, at, num, headsethook, focus, plus, menu, notification, search, media_play_pause, media_stop, media_next, media_previous, media_rewind, media_fast_forward, mute, page_up, page_down, switch_charset, escape, forward_del, ctrl_left, ctrl_right, caps_lock, scroll_lock, function, break, move_home, move_end, insert, forward, media_play, media_pause, media_close, media_eject, media_record, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, num_lock, numpad_0, numpad_1, numpad_2, numpad_3, numpad_4, numpad_5, numpad_6, numpad_7, numpad_8, numpad_9, numpad_divide, numpad_multiply, numpad_subtract, numpad_add, numpad_dot, numpad_comma, numpad_enter, numpad_equals, numpad_left_paren, numpad_right_paren, volume_mute, info, channel_up, channel_down, zoom_in, zoom_out, window, guide, bookmark, captions, settings, app_switch, language_switch, contacts, calendar, music, calculator, assist, brightness_down, brightness_up, media_audio_track, sleep, wakeup, pairing, media_top_menu, last_channel, tv_data_service, voice_assist, help, navigate_previous, navigate_next, navigate_in, navigate_out, dpad_up_left, dpad_down_left, dpad_up_right, dpad_down_right, media_skip_forward, media_skip_backward, media_step_forward, media_step_backward, soft_sleep, cut, copy, paste, all_apps, refresh, as well as the digits from 0 to 9 and English alphabets. Example: await aui.pressAndroidTwoKey('volume_down', 'power').exec() @param {ANDROID_KEY} first_key - An Android key@param {ANDROID_KEY} second_key - An Android key","keywords":"","version":"Next"},{"title":"pressAndroidKey","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/pressandroidkey","content":"pressAndroidKey production Press one Android key like del. Details Available keyshome, back, call, endcall, star, pound, dpad_up, dpad_down, dpad_left, dpad_right, dpad_center, volume_up, volume_down, power, camera, clear, comma, period, alt_left, alt_right, shift_left, shift_right, tab, space, sym, explorer, envelope, enter, del, grave, minus, equals, left_bracket, right_bracket, backslash, semicolon, apostrophe, slash, at, num, headsethook, focus, plus, menu, notification, search, media_play_pause, media_stop, media_next, media_previous, media_rewind, media_fast_forward, mute, page_up, page_down, switch_charset, escape, forward_del, ctrl_left, ctrl_right, caps_lock, scroll_lock, function, break, move_home, move_end, insert, forward, media_play, media_pause, media_close, media_eject, media_record, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, num_lock, numpad_0, numpad_1, numpad_2, numpad_3, numpad_4, numpad_5, numpad_6, numpad_7, numpad_8, numpad_9, numpad_divide, numpad_multiply, numpad_subtract, numpad_add, numpad_dot, numpad_comma, numpad_enter, numpad_equals, numpad_left_paren, numpad_right_paren, volume_mute, info, channel_up, channel_down, zoom_in, zoom_out, window, guide, bookmark, captions, settings, app_switch, language_switch, contacts, calendar, music, calculator, assist, brightness_down, brightness_up, media_audio_track, sleep, wakeup, pairing, media_top_menu, last_channel, tv_data_service, voice_assist, help, navigate_previous, navigate_next, navigate_in, navigate_out, dpad_up_left, dpad_down_left, dpad_up_right, dpad_down_right, media_skip_forward, media_skip_backward, media_step_forward, media_step_backward, soft_sleep, cut, copy, paste, all_apps, refresh, as well as the digits from 0 to 9 and English alphabets. Example: await aui.pressAndroidKey('notification').exec; @param {ANDROID_KEY} key - An Android key","keywords":"","version":"Next"},{"title":"pressThreeKeys","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/pressthreekeys","content":"pressThreeKeys production Press three keys like CTRL+ALT+DEL Operating system specific mappings: Windows: command-key maps to windows-key Example: await aui.pressThreeKeys('control', 'command' 'space').exec(); @param {MODIFIER_KEY} first_key - A modifier key@param {MODIFIER_KEY} second_key - A modifier key@param {PC_KEY} third_key - A key","keywords":"","version":"Next"},{"title":"pressTwoKeys","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/presstwokeys","content":"pressTwoKeys production Press two keys like ALT+F4 Operating system specific mappings: Windows: command-key maps to windows-key @param {MODIFIER_KEY} first_key - A modifier key@param {PC_KEY} second_key - A key","keywords":"","version":"Next"},{"title":"scroll","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/scroll","content":"scroll production Scrolls based on the current mouse position in the x and y direction. Important: Mouse must be positioned in a scrollable area. macOS: May not work as expected! Example: // Scroll 500 pixels down in y direction await aui.scroll(0, -500).exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction.","keywords":"","version":"Next"},{"title":"scrollInside","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/scrollinside","content":"scrollInside production Moves mouse to the filtered element and scrolls in the x and y direction. macOS: May not work as expected! Example: await aui.scrollInside(0,-500).text('Bottom sheet').exec(); @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction.","keywords":"","version":"Next"},{"title":"swipe","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/swipe","content":"swipe production Swipe an element in the x and y direction. Holds the left mouse button down on Windows, Linux and macOS and drags the element. On touch devices it taps the element and then drags it. Example: // Swipe the element 500 to the right await aui.swipe(500, 0).image().exec() @param {number} x_offset - A x direction. positive and negative values are accepted@param {number} y_offset - A y direction. positive and negative values are accepted","keywords":"","version":"Next"},{"title":"typeIn","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/typein","content":"typeIn production Puts the focus on the filtered element and types in the text. Note: In the current version it copies the text and pastes it. By default, the text is included in the logs and sent over to the askui Inference server to predict in which context the typing has to occur. You can exclude the text from the logs and the request to the askui Inference server setting options.isSecret to true. This should not change the quality of the prediction of the askui Inference server. In this case, options.secretMask is included in logs and sent over instead of the text. Examples: await aui.typeIn('Type some text').textfield().exec() // mask the text so it is not send to the askui-inference server await aui.typeIn('Type some text', { isSecret: true, secretMask: '**' }).textfield().exec() @param {string} text - A text to type@param {Object} [options]@param {boolean} [options.isSecret = false] - If set to true, text is neither included in logs of askui nor sent over to askui Inference for prediction.@param {string} [options.secretMask = '****'] - If options.isSecret is set to true, this is included in logs and sent over to askui Inference for prediction instead of the text.","keywords":"","version":"Next"},{"title":"type","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/type","content":"type production Types a text at the current position. If you need to focus the element first, use typeIn() Note: In the current version it copies the text and pastes it. By default, the text is included in the logs and sent over to the askui Inference server to predict in which context the typing has to occur. You can exclude the text from the logs and the request to the askui Inference server setting options.isSecret to true. This should not change the quality of the prediction of the askui Inference server. In this case, options.secretMask is included in logs and sent over instead of the text. Examples: await aui.type('askui@askui.com').exec() // mask the text so it is not send to the askui-inference server await aui.type('Type some text', { isSecret: true, secretMask: '**' }).exec() @param {string} text - A text to type@param {Object} [options]@param {boolean} [options.isSecret = false] - If set to true, text is neither included in logs of askui nor sent over to askui Inference for prediction.@param {string} [options.secretMask = '****'] - If options.isSecret is set to true, this is included in logs and sent over to askui Inference for prediction instead of the text.","keywords":"","version":"Next"},{"title":"annotate","type":0,"sectionRef":"#","url":"/docs/next/api/Annotation/annotate","content":"","keywords":"","version":"Next"},{"title":"Annotate DetectedElements from get()​","type":1,"pageTitle":"annotate","url":"/docs/next/api/Annotation/annotate#annotate-detectedelements-from-get","content":" The method also accepts an optional parameter of type AnnotationRequest. You can use this to annotate only the elements that where returned with a get().  Example:  const detectedElements = await aui.get().text().withText(&quot;User Interfaces?&quot;).exec(); await aui.annotate({ elements: detectedElements });   Resulting annotation from a screen displaying the website askui.com where only the text User Interfaces? has a bounding box:   ","version":"Next","tagName":"h2"},{"title":"annotateInteractively","type":0,"sectionRef":"#","url":"/docs/next/api/Annotation/annotateInteractively","content":"annotateInteractively production caution There is a known bug that can cause a crash when calling annotateInteractively() on Windows. Please use annotate() as a workaround. Creates an annotated version of your screen and shows it to you so you can explore the annotated image. Recognized elements are annotated with a red bounding box. You can copy the filter needed to select the element by left-clicking on the bounding box. See also the detailed explanation to see how you can use it to create instructions. Examples: await aui.annotateInteractively(); ","keywords":"","version":"Next"},{"title":"waitFor","type":0,"sectionRef":"#","url":"/docs/next/api/Actions/waitfor","content":"waitFor production Waits for &lt;delayInMs&gt; ms, e.g., 1000 ms. The exact delay may be a little longer than &lt;delayInMs&gt; but never shorter than that. Examples: await aui.waitFor(500).exec(); @param {number} delayInMs - The delay in ms to wait for.","keywords":"","version":"Next"},{"title":"exists","type":0,"sectionRef":"#","url":"/docs/next/api/Checks/exists","content":"exists production Expects that filtered element exists. Always use together with expect(). Note Throws an error and stops the execution when the element is not found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does not exist. await aui.expect().text('Login').exists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').exists().exec() } catch (error) { console.log('Too bad we could not find the element!'); } ","keywords":"","version":"Next"},{"title":"notExists","type":0,"sectionRef":"#","url":"/docs/next/api/Checks/notexists","content":"notExists production Expects that filtered element not exists. Always use together with expect(). Note Throws an error and stops the execution when the element is found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does exist. await aui.expect().text('Login').notExists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').notExists().exec() } catch (error) { console.log('Too bad we could find the element!'); } ","keywords":"","version":"Next"},{"title":"AskUI Runner","type":0,"sectionRef":"#","url":"/docs/next/api/AskUI-Runner","content":"","keywords":"","version":"Next"},{"title":"Requirements​","type":1,"pageTitle":"AskUI Runner","url":"/docs/next/api/AskUI-Runner#requirements","content":" Python 3.10 or higherNode.js 16 or higher  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"AskUI Runner","url":"/docs/next/api/AskUI-Runner#installation","content":" We recommend using a virtual environment for Python. Make sure python --version returns 3.10 or higher:  python -m venv venv source venv/bin/activate   We have not yet published the AskUI Runner to PyPI. For now, you can install it directly from GitHub:  pip install git+https://github.com/askui/askui-runner.git   Currently, the standard logging output of the AskUI runner is minimal - we are soon going to change that. But you should see the runner starting the running of workflows as soon as you schedule some runs through the AskUI Studio.  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"AskUI Runner","url":"/docs/next/api/AskUI-Runner#usage","content":" Create a configuration file (.y{a}ml or .json) in a directory of your choosing. The configuration file should contain at least some credentials and the command with which you start the runner without the config file flag:  credentials: workspace_id: &lt;workspace id&gt; # replace with your workspace id access_token: &lt;access token&gt; # replace with your access token runner: exec: python -m askui_runner # update if your command is different tags: [&lt;tag 1&gt;, &lt;tag 2&gt;, ..] # replace with your own runner tags   See Generating up-to-date Configuration Schema  Start the runner using  python -m askui_runner -c &lt;path to your config file, e.g., askui-runner.config.yaml&gt;   ","version":"Next","tagName":"h2"},{"title":"Start UiController​","type":1,"pageTitle":"AskUI Runner","url":"/docs/next/api/AskUI-Runner#start-uicontroller","content":" If you want to run your workflows on the same system as the runner you need to start an UiController that listens on port 6769. Please download the one for your operating system and start it:  WindowsWindows (new version - beta release) More about the new versionLinux  info macOS After installation to Applications remove the quarantine flag with the following command run from a terminal: xattr -d com.apple.quarantine /Applications/askui-ui-controller.app  macOS(Intel)macOS(Apple silicon)  ","version":"Next","tagName":"h2"},{"title":"Execute Workflows on a Remote System: Change UiController URL​","type":1,"pageTitle":"AskUI Runner","url":"/docs/next/api/AskUI-Runner#execute-workflows-on-a-remote-system-change-uicontroller-url","content":" You can change the UiController-URL so the runner can talk to a UiController that runs on a remote machine or on a different port:  ... runner: ... controller: host: &quot;127.0.0.1&quot; port: 7000   ","version":"Next","tagName":"h3"},{"title":"Generating up-to-date Configuration Schema​","type":1,"pageTitle":"AskUI Runner","url":"/docs/next/api/AskUI-Runner#generating-up-to-date-configuration-schema","content":" Requirements:  PDM 2.8 or higher for contributing and creating the JSON schema of the config  Find out about all configuration options by taking a look at the JSON schema of the configuration. You can generate an up-to-date JSON schema by cloning this repository and running the following commands.  ## Install and initialize pdm pip install pdm pdm install pdm run python -m scripts.generate_config_schema_json  ","version":"Next","tagName":"h2"},{"title":"button","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/button","content":"button production Filters for a UI element 'button'. Examples: await aui.click().button().contains().text('Google Search').exec() ","keywords":"","version":"Next"},{"title":"AskUI UI Control Client","type":0,"sectionRef":"#","url":"/docs/next/api/Configuration/askui-ui-control-client","content":"","keywords":"","version":"Next"},{"title":"Log Level​","type":1,"pageTitle":"AskUI UI Control Client","url":"/docs/next/api/Configuration/askui-ui-control-client#log-level","content":" Set the log level of the AskUI UI Control Client using the LOG_LEVEL environment variable. The following log levels are available:  &quot;fatal&quot;&quot;error&quot;&quot;warn&quot;&quot;info&quot;&quot;debug&quot;&quot;trace&quot;&quot;silent&quot;&quot;verbose&quot;.  The log level defaults to &quot;info&quot;. and it can be changed with the following command:  Bash or similar:  export LOG_LEVEL=verbose   PowerShell  $env:LOG_LEVEL=&quot;verbose&quot;   ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"AskUI UI Control Client","url":"/docs/next/api/Configuration/askui-ui-control-client#properties","content":" ","version":"Next","tagName":"h2"},{"title":"uiControllerUrl​","type":1,"pageTitle":"AskUI UI Control Client","url":"/docs/next/api/Configuration/askui-ui-control-client#uicontrollerurl","content":" uiControllerUrl: string - Default: http://127.0.0.1:6769  The url of the AskUI UI Controller controlling the OS.    ","version":"Next","tagName":"h3"},{"title":"inferenceServerUrl​","type":1,"pageTitle":"AskUI UI Control Client","url":"/docs/next/api/Configuration/askui-ui-control-client#inferenceserverurl","content":" inferenceServerUrl: string - Default: https://inference.askui.com  The address of the AskUI Inference server.    ","version":"Next","tagName":"h3"},{"title":"resize​","type":1,"pageTitle":"AskUI UI Control Client","url":"/docs/next/api/Configuration/askui-ui-control-client#resize","content":" resize: number? - Default: undefinedThe side length of the target image to resize to in px. Your screenshot image will be resized with the original aspect ratio, and the lengths image side will be equal to this number. This can be used to reduce the inference time by reducing the request size in case of a bad internet connection. But it can cause a decrease in the prediction quality. The resizing will be skipped if it's undefined.    ","version":"Next","tagName":"h3"},{"title":"credentials​","type":1,"pageTitle":"AskUI UI Control Client","url":"/docs/next/api/Configuration/askui-ui-control-client#credentials","content":" credentials: Credentials Your user credentials - Optional. workspaceId: string Your workspace idtoken: string An access token for authentication with the AskUI Inference Server  Provide credentials for authentication with the AskUI Inference Server if you would like to use dedicated, more powerful and stable resources instead of public resources. Credentials can also be provided using the environment variables ASKUI_WORKSPACE_ID and ASKUI_TOKEN but in-code configuration takes precedence over these environment variables. Independent of how you configure the credentials, make sure to use one way to configure all the credentials, i.e., if you set the workspace id via setting the ASKUI_WORKSPACE_ID environment variable, you need to set token with environment variables as well.  Setting credentials in code:   let aui = await UiControlClient.build({ credentials: { workspaceId: '&lt;your workspace id&gt;', token: '&lt;your access token&gt;', } });   Setting credentials using environment variables (Powershell):  $env:ASKUI_WORKSPACE_ID = &lt;your workspace id&gt; $env:ASKUI_TOKEN = &lt;your access token&gt;   Setting credentials using environment variables (Bash or similar):  export ASKUI_WORKSPACE_ID=&lt;your workspace id&gt; export ASKUI_TOKEN=&lt;your access token&gt;     ","version":"Next","tagName":"h3"},{"title":"reporter​","type":1,"pageTitle":"AskUI UI Control Client","url":"/docs/next/api/Configuration/askui-ui-control-client#reporter","content":" reporter: Reporter or Reporter[] the reporter(s) to report on step runs/executions - optional.  Set one or multiple AskUI step reporters that implement AskUI's Reporter interface. We provide step reporters through the askui-reporters package. See our reporting page for instructions on how to implement your own reporter.  Setting multiple reporters in code (example):  aui = await UiControlClient.build({ reporter: [ new AskUIAnnotationStepReporter( AnnotationLevel.ALL, &quot;annotation_report&quot;, &quot;_annotation&quot; ), new AskUIJestHtmlStepReporter({ withScreenshots: 'always' as const, withDetectedElements: 'always' as const, }) ], });   See our reporting page for a comprehensive overview. ","version":"Next","tagName":"h3"},{"title":"checkbox","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/checkbox","content":"checkbox production Filters for a UI element 'checkbox'. Example: await aui.moveMouseTo().checkbox().leftOf().text('Save the world').exec(); ","keywords":"","version":"Next"},{"title":"askui UI Controller","type":0,"sectionRef":"#","url":"/docs/next/api/Configuration/askui-ui-controller","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"askui UI Controller","url":"/docs/next/api/Configuration/askui-ui-controller#properties","content":" ","version":"Next","tagName":"h2"},{"title":"binaryVersion​","type":1,"pageTitle":"askui UI Controller","url":"/docs/next/api/Configuration/askui-ui-controller#binaryversion","content":" binaryVersion: string - Default: latest  There are different versions of the askui UI Controller. Not all versions are supported for all operating systems. You can specify which binary version of server you want to download and use. The default value is latest which will download the newest version.    ","version":"Next","tagName":"h3"},{"title":"display​","type":1,"pageTitle":"askui UI Controller","url":"/docs/next/api/Configuration/askui-ui-controller#display","content":" display: number - Default: 0  You can choose on which display you want to excecute all tests. You can only perform all tests on one display. The application which you want to automate should be open and selected on your chosen display.  The default value of display is 0 which is your main monitor. If you want to use your second monitor you can change the value to 1 (2 for your third monitor etc.).  There is also a possibility to detect the value of your monitors. After the start of the askui UI Controller you should see an askui icon. After clicking on this icon you can choose the option Show. You will see the same window as the following image.    Now you can identify the order of your monitors and you can also select the monitor in this configuration.    ","version":"Next","tagName":"h3"},{"title":"host​","type":1,"pageTitle":"askui UI Controller","url":"/docs/next/api/Configuration/askui-ui-controller#host","content":" host: string - Default: 127.0.0.1  The host the askui UI Controller is running on.  ","version":"Next","tagName":"h3"},{"title":"logFilePath​","type":1,"pageTitle":"askui UI Controller","url":"/docs/next/api/Configuration/askui-ui-controller#logfilepath","content":" logFilePath: string - Default: &lt;temp-dir&gt;/askui/askui-server.log  It is possible to specify a path for your log files. Per default we create the askui-server.log file and askui folder in your temp folder.    ","version":"Next","tagName":"h3"},{"title":"logLevel​","type":1,"pageTitle":"askui UI Controller","url":"/docs/next/api/Configuration/askui-ui-controller#loglevel","content":" logLevel: LogLevels - Default: debug  You can set the log level using the LogLevels. The following values are available: &quot;fatal&quot;, &quot;error&quot;, &quot;warn&quot;, &quot;info&quot;, &quot;debug&quot;, &quot;trace&quot;, &quot;silent&quot;, &quot;verbose&quot;. All log levels are defined in an LogLevels enum.    ","version":"Next","tagName":"h3"},{"title":"minimize​","type":1,"pageTitle":"askui UI Controller","url":"/docs/next/api/Configuration/askui-ui-controller#minimize","content":" minimize: boolean - Default: true  The default value of this property is true. This means that askui UI Controller will be started as minimized window.    ","version":"Next","tagName":"h3"},{"title":"overWriteBinary​","type":1,"pageTitle":"askui UI Controller","url":"/docs/next/api/Configuration/askui-ui-controller#overwritebinary","content":" overWriteBinary: boolean - Default: false  Download the provided Version of askui UI Controller. If a version is already downloaded. This version will be overwritten.    ","version":"Next","tagName":"h3"},{"title":"port​","type":1,"pageTitle":"askui UI Controller","url":"/docs/next/api/Configuration/askui-ui-controller#port","content":" port: number - Default: 6769  The port the askui UI Controller is running on.    ","version":"Next","tagName":"h3"},{"title":"actionDelayInMs​","type":1,"pageTitle":"askui UI Controller","url":"/docs/next/api/Configuration/askui-ui-controller#actiondelayinms","content":" actionDelayInMs: number - Default: 1000  actionDelayInMs is the time that the askui UI controller waits between actions. This can be used to slow down or speed up the execution.  Let's say, you want to click on the login button and then navigate to the home page by clicking on the home button but you have to wait 2s before clicking it because it takes some time logging in. You can increase the actionDelayInMs to 2000 in this case. But be careful, as it is going to slow down all your instructions. It may be better to use waitFor() between the two clicking actions.  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"askui UI Controller","url":"/docs/next/api/Configuration/askui-ui-controller#example","content":" import { UiControlClient, UiController, LogLevels } from 'askui'; describe('jest with askui', () =&gt; { // Server for controlling the operating system let uiController: UiController; beforeAll(async () =&gt; { uiController = new UiController({ // choosing the second monitor display: 1, // download the latest version of the server binaryVersion: 'latest', // start askui UI Controller as minimized application minimize: true, // using error loglevel logLevel: LogLevels.ERROR, // Set the action delay lower than the default actionDelayInMs: 500, }); }) })   ","version":"Next","tagName":"h2"},{"title":"Download​","type":1,"pageTitle":"askui UI Controller","url":"/docs/next/api/Configuration/askui-ui-controller#download","content":" Download the binary/binaries for the respective platform(s):  WindowsWindows (new version - beta release) More about the new versionLinux  info macOS After installation to Applications remove the quarantine flag with the following command run from a terminal: xattr -d com.apple.quarantine /Applications/askui-ui-controller.app  macOS(Intel)macOS(Apple silicon) ","version":"Next","tagName":"h2"},{"title":"container","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/container","content":"container production Filters for a UI element 'container'. Example: await aui.moveMouseTo().container().contains().text('typography').exec(); ","keywords":"","version":"Next"},{"title":"containsText","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/containstext","content":"containsText production Filters for text containing the text provided as an argument. Examples: 'This is a text' === containsText('text') =&gt; true 'This is a text' === containsText('other text') =&gt; false 'This is a text' === containsText('other') =&gt; false @param {string} text - A text to be matched.","keywords":"","version":"Next"},{"title":"element","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/element","content":"element production Filters for any UI element on the screen. Since the element() itself doesn't describe any particular property of the element, in most cases, it must be used in combination with relational descriptions such as above(), below() or nearestTo() etc. Examples: await aui.moveMouseTo().element().below().text('Layers').exec(); ","keywords":"","version":"Next"},{"title":"customElement","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/customelement","content":"customElement production Filters for a 'custom element', that is a UI element which is defined by providing an image and other parameters such as degree of rotation. It allows filtering for a UI element that is not recognized by our machine learning models by default. It can also be used for pixel assertions of elements using classical template matching. See the tutorial - Custom Element for more detail. Example await aui .click() .customElement({ customImage: './logo.png', // required name: 'myLogo', // optional threshold: 0.9, // optional, defaults to 0.9 rotationDegreePerStep: 0, // optional, defaults to 0 imageCompareFormat: 'grayscale', // optional, defaults to 'grayscale' // mask:{x:0, y:0}[] // optional, a polygon to match only a certain area of the custom element }) .exec(); Arguments customImage (string, required): A cropped image in the form of a base64 string or file path. name (string, optional): A unique name that can be used for filtering for the custom element. If not given, any text inside the custom image will be detected via OCR. threshold (number, optional): A threshold for how much a UI element needs to be similar to the custom element as defined. Takes values between 0.0 (== all elements are recognized as the custom element which is probably not what you want) and 1.0 (== elements need to look exactly like the customImage which is unlikely to be achieved as even minor differences count). Defaults to 0.9. rotationDegreePerStep (number, optional): Step size in rotation degree. Rotates the custom image by this step size until 360° is exceeded. The range is from 0 to 360. Defaults to 0. imageCompareFormat ('RGB' | 'grayscale', optional): The color compare style. 'greyscale' compares the brightness of each pixel whereas 'RGB' compares all three color. Defaults to 'grayscale'. @param {CustomElementJson} customElement - The custom element to filter for.","keywords":"","version":"Next"},{"title":"icon","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/icon","content":"icon production Filters for a UI element 'icon'. You can combine it with the element-description 'withText()' to look for a specific icon. Examples: await aui.click().icon().withText('camera').exec(); Note: This is an alpha feature. The prediction of the icon name is sometimes unstable. Use custom elements as an alternative.","keywords":"","version":"Next"},{"title":"image","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/image","content":"image production Filters for a UI element 'image'. Examples: // Works if there is only one image visible on the screen await aui.click().image().exec(); // Works if you have an image with // a text below await aui.click().image().above().text('Automating WebGL').exec(); ","keywords":"","version":"Next"},{"title":"matching","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/matching","content":"","keywords":"","version":"Next"},{"title":"What Should I Write as Matching Text​","type":1,"pageTitle":"matching","url":"/docs/next/api/Element-Descriptions/matching#what-should-i-write-as-matching-text","content":" The text description inside the matching() should describe the element visually. It understands color, some famous company/product names, general descriptions.  Important: Matching only returns the best matching element when you use it with get()  A bit of playing around to find a matching description is sometimes needed: E.g., puzzle piece can fail while an icon showing a puzzle piece might work. Generally, the more detail the better.  We also recommend to not restrict the type of element by using the general selector element() as shown in the examples below.  Examples:  // Select the black sneaker from a bunch of sneakers await aui.click().element().matching('a black sneaker shoe').exec(); // Select an image that has text in it await aui.click().element().matching('has Burger King in it').exec(); await aui.click().element().matching('has adidas in it').exec(); // Target a logo/image by describing it await aui.click().element().matching('a mask on purple background and a firefox logo').exec(); await aui.click().element().matching('logo looking like an apple with one bite bitten off').exec(); await aui.click().element().matching('logo looking like a seashell').exec();   @param {string} text - A description of the target element. ","version":"Next","tagName":"h2"},{"title":"otherElement","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/otherelement","content":"otherElement production Filters for a UI element 'other element'.","keywords":"","version":"Next"},{"title":"special","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/special","content":"special production Filters special elements defined over a specifically trained custom element descriptor. Custom element descriptors are trained on your elements that were not detected with our default models. Please contact us for further details on how to do this. We are working on a solution to provide this in our User Portal. In the example below circle refers to a circle shaped icon with specific properties. Examples: await aui.moveMouseTo().element().special(&quot;circle&quot;).exec() @param {string} text - A text to be matched.","keywords":"","version":"Next"},{"title":"switch","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/switch","content":"switch production Filters for a UI element 'switch'. Example: await aui.click().switch().rightOf() .text('Allow notification snoozing').exec(); ","keywords":"","version":"Next"},{"title":"text","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/text","content":"text production Filters for an UI element 'text'. Takes an optional parameter to filter for a specific text. See the examples below. See also the filters withTextRegex() and withExactText() Examples: await aui.click().text().exec(); await aui.click().text('Username').exec(); // Matching with an exact text await aui.click().text().withExactText('Username').exec(); // Matching with a regex await aui.click().text().withTextRegex('\\b[Ss]\\w+').exec(); @param {string} [text] - A text to be matched.","keywords":"","version":"Next"},{"title":"table","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/table","content":"table production Filters for a UI element 'table'.","keywords":"","version":"Next"},{"title":"withExactText","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/withexacttext","content":"withExactText production Filters for equal text. Note: This should be only used in cases where the similarity comparison of {@link FluentFilters.withText()} allows not for a specific enough filtering (too many similar elements). Examples: 'text' === withExactText('text') =&gt; true 'test' === withExactText('text') =&gt; false 'other' === withExactText('text') =&gt; false await aui.moveMouseTo().text().withExactText('Basketball').exec() @param {string} text - A text to be matched.","keywords":"","version":"Next"},{"title":"withText","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/withtext","content":"withText production Filters for similar -- meaning &gt;70% similar -- text. Takes an optional parameter to specify the similarity. Usually you need the optional parameter for long texts you want to match precisely. We use RapidFuzz which calculates the similarity like this: 1 - (distance / (lengthString1 + lengthString2)) Examples: 'text' === withText('text') =&gt; true 'test' === withText('text') =&gt; true 'Test' === withText('text') =&gt; true 'Text' === withText('text') =&gt; true 'TEXT' === withText('text') =&gt; true 'texst' === withText('text') =&gt; true 'texts' === withText('text') =&gt; true 'atebxtc' === withText('text') =&gt; false 'other' === withText('text') =&gt; false // optional parameter: similarity_score '978-0-201-00650-6' == withText(&quot;978-0-201-00&quot;, 90) =&gt; false with 82.76 &lt; 90 similarity '978-0-201-00650-6' == withText(&quot;978-0-201-00650&quot;, 90) =&gt; true with 93.75 &gt; 90 similarity @param {string} text - A text to be matched.","keywords":"","version":"Next"},{"title":"textfield","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/textfield","content":"textfield production Filters for a UI element 'textfield'. Examples: // Works if there is only one textfield visible on the screen await aui.typeIn('Oh yeah').textfield().exec(); // Works if you have a labeled textfield // Label is above the textfield await aui.typeIn('Oh yeah').textfield().below().text('E-Mail Address').exec(); ","keywords":"","version":"Next"},{"title":"get","type":0,"sectionRef":"#","url":"/docs/next/api/Getters/get","content":"get production Returns an array with all filtered elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const text = await aui.get().text('Sign').exec(); console.log(text); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 } } ] ","keywords":"","version":"Next"},{"title":"getAll","type":0,"sectionRef":"#","url":"/docs/next/api/Getters/getall","content":"getAll production Returns an array with all detected elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const detectedElements = await aui.getAll().exec(); console.log(detectedElements); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 250.8204241071428, ymin: 300.21332310267857, xmax: 450.6304241071428, ymax: 950.47812834821428 }, ... 381 more items } ] ","keywords":"","version":"Next"},{"title":"withTextRegex","type":0,"sectionRef":"#","url":"/docs/next/api/Element-Descriptions/withtextregex","content":"withTextRegex production Filters for texts, which match the regex pattern. Examples: 'The rain in Spain' === withTextRegex('\\b[Ss]\\w+') =&gt; true 'The rain in Portugal' === withTextRegex('\\b[Ss]\\w+') =&gt; false 'The rain in switzerland' === withTextRegex('\\b[Ss]\\w+') =&gt; true // this filters any text that contains 'pie' or 'cake' or 'Pie' or 'Cake' await aui.get().text().withTextRegex('.*([Pp]ie|[Cc]ake).*').exec(); @param {string} regex_pattern - A regex pattern","keywords":"","version":"Next"},{"title":"above","type":0,"sectionRef":"#","url":"/docs/next/api/Relations/above","content":"above production Filters for an element above another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text1 | -------------- -------------- | text0 | -------------- -------------- | button | -------------- // Returns text0 because text0 is the first element above button ...text().above().button() ...text().above(0).button() // Returns text1 because text1 is the second element above button ...text().above(1).button() // Returns no element because button is below text ...button().above().text() @param {number} [optionalIndex=0] - element index","keywords":"","version":"Next"},{"title":"and","type":0,"sectionRef":"#","url":"/docs/next/api/Relations/and","content":"and production Logic and operator Examples: example scene: --------------- ---------------- | icon user | | icon search | --------------- ---------------- const icons = await aui.get().icon().exec(); console.log(icons); Using only the element-description icon, the get will return both icons console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 1000, ymin: 1010, xmax: 1020, ymax: 1030 } }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] You can combine element-descriptions with the and() relation and specify exactly which icon you want. const icons = await aui.get().icon().and().withText('user').exec() console.log(icons) The get returns only the user icon although both elements are icons. console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] ","keywords":"","version":"Next"},{"title":"below","type":0,"sectionRef":"#","url":"/docs/next/api/Relations/below","content":"below production Filters for an element below another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text | -------------- -------------- | button0 | -------------- -------------- | button1 | -------------- // Returns button0 because button0 is the first button below text ...button().below().text() ...button().below(0).text() // Returns button1 because button1 is the second button below text ...button().below(1).text() // Returns no element because text is above button ...text().below().button() @param {number} [optionalIndex=0] - element index","keywords":"","version":"Next"},{"title":"contains","type":0,"sectionRef":"#","url":"/docs/next/api/Relations/contains","content":"contains production Filters for an element containing another element. Example: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns outerEl because outerEl contains innerEl ...outerEl().contains().innerEl() // Returns no element because innerEl contains no outerEl ...innerEl().contains().outerEl() ","keywords":"","version":"Next"},{"title":"in","type":0,"sectionRef":"#","url":"/docs/next/api/Relations/in","content":"in production Filters for an element inside another element. Examples: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns innerEl because innerEl is inside outerEl ...innerEl().in().outerEl() // Returns nothing because innerEl is not inside outerEl ...outerEl().in().innerEl() ","keywords":"","version":"Next"},{"title":"leftOf","type":0,"sectionRef":"#","url":"/docs/next/api/Relations/leftof","content":"leftOf production Filters for an element left of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl1 | | leftEl0 | | rightEl | -------------- -------------- -------------- // Returns leftEl0 because leftEl0 is the first element left of rightEl ...leftEl().leftOf().rightEl() ...leftEl().leftOf(0).rightEl() // Returns leftEl1 because leftEl1 is the second element left of rightEl ...leftEl().leftOf(1).rightEl() // Returns no element because rightEl is left of leftEl ...rightEl().leftOf().leftEl() @param {number} [optionalIndex=0] - element index","keywords":"","version":"Next"},{"title":"or","type":0,"sectionRef":"#","url":"/docs/next/api/Relations/or","content":"or production Logic or operator Examples: scene 1 -------------- --------------- | button | | icon | -------------- --------------- scene 2 -------------- --------------- | button | | text | -------------- --------------- In case, that your reference element can have multiple values, in the following example, the element right of the button can be either icon or text. You can use the or() relation, so your instruction is valid for both scenes const button = await aui.get().button().rightOf().icon().or().text().exec(); console.log(button); Returns the same button for both cases console output: [ DetectedElement { name: 'BUTTON', text: 'button', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] ","keywords":"","version":"Next"},{"title":"nearestTo","type":0,"sectionRef":"#","url":"/docs/next/api/Relations/nearestto","content":"nearestTo production Filters for an element nearest to another element. Examples: -------------- | button 1 | -------------- -------------- | text | -------------- -------------- | button 2 | -------------- // Returns button 1 because button 1 is nearer to the text than button 2 ...button().nearestTo().text() ","keywords":"","version":"Next"},{"title":"Table of Contents","type":0,"sectionRef":"#","url":"/docs/next/api/API/table-of-contents","content":"","keywords":"","version":"Next"},{"title":"Actions​","type":1,"pageTitle":"Table of Contents","url":"/docs/next/api/API/table-of-contents#actions","content":" Nameclick() production Mouse left-clicks/taps on the filtered element by moving the mouse cursor to the filtered element first. If you need a simple mouseleftclick/tap only, use mouseLeftClick. Example: await aui.click().button().withText('Submit').exec() execOnShell() production Executes a shell command on the device your UiController is connected to. Example: // Open the lastpass app await aui.execOnShell('monkey -p com.lastpass.authenticator 1').exec(); // Open Google Chrome on Windows await aui.execOnShell(&quot;start chrome&quot;).exec() ;// Open Google Chrome on macOS await aui.execOnShell(&quot;open -a 'Google Chrome'&quot;).exec(); // Open Google Chrome on Linux await aui.execOnShell(&quot;chrome&quot;).exec(); @param {string} shell_command - A shell command which is executed. expect() production Expects a condition, e.g., exists() or notExits(). Use the structure expect().&lt;your filter&gt;.(exists()|notExists()) as shown in the examples below. Examples: await aui.expect().text('Login').exists().exec() await aui.expect().text('Login').notExists().exec() mouseDoubleLeftClick() production Double-clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleLeftClick().exec(); mouseDoubleMiddleClick() production Double-clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleMiddleClick().exec(); mouseDoubleRightClick() production Double-clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleRightClick().exec(); mouseLeftClick() production Clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseLeftClick().exec(); mouseMiddleClick() production Clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseMiddleClick().exec(); mouseRightClick() production Clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseRightClick().exec(); mouseToggleDown() production Toggles mouse down (Left mouse key/tap). Example: await aui.mouseToggleDown().exec(); mouseToggleUp() production Toggles mouse up (Left mouse key/tap). Example: await aui.mouseToggleUp().exec(); moveMouse() production Moves the mouse to the absolute x and y coordinates. If you want to move your mouse cursor to an element, use moveMouseTo(). Example: await aui.moveMouse(500, 500).exec(); @param {number} x_coordinate - A (positive/negative) x coordinate.@param {number} y_coordinate - A (positive/negative) y coordinate. moveMouseRelatively() production Moves the mouse from the current position (relative) in x and y direction. Example: await aui.moveMouseRelatively(20, 20).exec(); @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. moveMouseRelativelyTo() production Moves the mouse relatively to an element in the direction. This can be used when the mouse should not hover over an element anymore. Examples: // Move mouse 30 pixels below button await aui.moveMouseRelativelyTo(0, 30).button().withText('Submit').exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. moveMouseTo() production Move mouse over the filtered element. Example: await aui.moveMouseTo().button().withText('Submit').exec() pressAndroidKey() production Press one Android key like DEL @param {ANDROID_KEY} key - A Android key pressAndroidThirdKey() production Press three Android keys like CTRL+ALT+DEL @param {ANDROID_KEY} first_key - A Android key@param {ANDROID_KEY} second_key - A Android key@param {ANDROID_KEY} third_key - A Android key pressAndroidTwoKey() production Press two Android keys like ALT+F4 @param {ANDROID_KEY} first_key - A Android key@param {ANDROID_KEY} second_key - A Android key pressKey() production Press one keys like DEL Operating system specific mappings: Windows: command-key maps to windows-key @param {PC_AND_MODIFIER_KEY} key - A key pressThreeKeys() production Press three keys like CTRL+ALT+DEL Operating system specific mappings: Windows: command-key maps to windows-key @param {MODIFIER_KEY} first_key - A modifier key@param {MODIFIER_KEY} second_key - A modifier key@param {PC_KEY} third_key - A key pressTwoKeys() production Press two keys like ALT+F4 Operating system specific mappings: Windows: command-key maps to windows-key @param {MODIFIER_KEY} first_key - A modifier key@param {PC_KEY} second_key - A key scroll() production Scrolls based on the current mouse position in the x and y direction. Important: Mouse must be positioned in a scrollable area. macOS: May not work as expected! Example: // Scroll 10 up in y direction await aui.scroll(0, 10).exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. scrollInside() production Moves mouse to the filtered element and scrolls in the x and y direction. macOS: May not work as expected! Example: await aui.scroll(0, 10).textarea().exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. swipe() production Swipe an element in the x and y direction. Holds the left mouse button down on Windows, Linux and macOS and drags the element. On touch devices it taps the element and then drags it. Example: // Swipe the element 500 to the right await aui.swipe(500, 0).image().exec() @param {number} x_offset - A x direction. positive and negative values are accepted@param {number} y_offset - A y direction. positive and negative values are accepted type() production Types a text at the current position. If you need to focus the element first, use typeIn() Note: In the current version it copies the text and pastes it. Examples: await aui.type('Type some text').exec() // mask the text so it is not send to the askui-inference server await aui.type('Type some text', \\{ isSecret: true, secretMask: '**' }).exec() @param {string} text - A text to type typeIn() production Puts the focus on the filtered element and types in the text. Note: In the current version it copies the text and pastes it. Examples: await aui.typeIn('Type some text').textfield().exec() // mask the text so it is not send to the askui-inference server await aui.typeIn('Type some text', \\{ isSecret: true, secretMask: '**' }).textfield().exec() @param {string} text - A text to type  ","version":"Next","tagName":"h2"},{"title":"Element-descriptions​","type":1,"pageTitle":"Table of Contents","url":"/docs/next/api/API/table-of-contents#element-descriptions","content":" Namebutton() production Filters for a UI element 'button'. Examples: await aui.moveMouseTo().button().exec() checkbox() production Filters for a UI element 'checkbox'. container() production Filters for a UI element 'container'. containsText() production Filters for text containing the text provided as an argument. Examples: 'This is a text' === containsText('text') =&gt; true 'This is a text' === containsText('other text') =&gt; false 'This is a text' === containsText('other') =&gt; false @param {string} text - A text to be matched. customElement() production Filters for a 'custom element', that is a UI element which is defined by providing an image and other parameters such as degree of rotation. It allows filtering for a UI element that is not recognized by our machine learning models by default. It can also be used for pixel assertions of elements using classical template matching. Example await aui .click() .customElement({ customImage: './logo.png', // required name: 'myLogo', // optional threshold: 0.9, // optional, defaults to 0.9 rotationDegreePerStep: 0, // optional, defaults to 0 imageCompareFormat: 'grayscale', // optional, defaults to 'grayscale' // mask:{x:0, y:0}[] // optional, a polygon to match only a certain area of the custom element }) .exec(); Arguments customImage (string, required): A cropped image in the form of a base64 string or file path. name (string, optional): A unique name that can be used for filtering for the custom element. If not given, any text inside the custom image will be detected via OCR. threshold (number, optional): A threshold for how much a UI element needs to be similar to the custom element as defined. Takes values between 0.0 (== all elements are recognized as the custom element which is probably not what you want) and 1.0 (== elements need to look exactly like the customImage which is unlikely to be achieved as even minor differences count). Defaults to 0.9. rotationDegreePerStep (number, optional): Step size in rotation degree. Rotates the custom image by this step size until 360° is exceeded. The range is from 0 to 360. Defaults to 0. imageCompareFormat ('RGB' | 'grayscale', optional): The color compare style. 'greyscale' compares the brightness of each pixel whereas 'RGB' compares all three color. Defaults to 'grayscale'. of the given custom image. @param {CustomElementJson} customElement - The custom element to filter for. element() production Filters for any UI element on the screen. Examples: await aui.moveMouseTo().element().exec() icon() production Filters for a UI element 'icon'. You can combine it with the element-description 'withText()' to look for a specific icon. Examples: icon().withText('plus') Note: This is an alpha feature. The prediction of the icon name is sometimes unstable. Use custom elements as an alternative. image() production Filters for a UI element 'image'. Examples: // Works if there is only one image visible on the screen await aui.click().image().exec(); // Works if you have an image with // a caption text below await aui.click().image().above().text('The caption').exec(); matching() experimental Filters elements based on a textual description. What Should I Write as Matching Text The text description inside the matching() should describe the element visually. It understands color, some famous company/product names, general descriptions. Important: Matching only returns the best matching element when you use it with get() A bit of playing around to find a matching description is sometimes needed: E.g., puzzle piece can fail while an icon showing a puzzle piece might work. Generally, the more detail the better. We also recommend to not restrict the type of element by using the general selector element() as shown in the examples below. Examples: // Select the black sneaker from a bunch of sneakers await aui.click().element().matching('a black sneaker shoe').exec(); // Select an image that has text in it await aui.click().element().matching('has Burger King in it').exec(); await aui.click().element().matching('has adidas in it').exec(); // Target a logo/image by describing it await aui.click().element().matching('a mask on purple background and a firefox logo').exec(); await aui.click().element().matching('logo looking like an apple with one bite bitten off').exec(); await aui.click().element().matching('logo looking like a seashell').exec(); @param {string} text - A description of the target element. otherElement() production Filters for a UI element 'other element'. special() production Filters special elements defined over a specifically trained custom element descriptor. Custom element descriptors are trained on your elements that were not detected with our default models. Please contact us for further details on how to do this. We are working on a solution to provide this in our User Portal. In the example below circle refers to a circle shaped icon with specific properties. Examples: await aui.moveMouseTo().element().special(&quot;circle&quot;).exec() @param {string} text - A text to be matched. switch() production Filters for a UI element 'switch'. table() production Filters for a UI element 'table'. text() production Filters for an UI element 'text'. Takes an optional parameter to filter for a specific text. See the examples below. See also the filters withTextRegex() and withExactText() Examples: await aui.click().text().exec(); await aui.click().text('Username').exec(); await aui.click().text().withTextRegex('\\b[Ss]\\w+').exec(); @param {string} [text] - A text to be matched. textfield() production Filters for a UI element 'textfield'. Examples: // Works if there is only one textfield visible on the screen await aui.typeIn('Oh yeah').textfield().exec(); // Works if you have a labeled textfield // Label is above the textfield await aui.typeIn('Oh yeah').textfield().below().text('E-Mail Address').exec(); withExactText() production Filters for equal text. Note: This should be only used in cases where the similarity comparison of {@link FluentFilters.withText()} allows not for specific enough filtering (too many elements). Examples: 'text' === withExactText('text') =&gt; true 'test' === withExactText('text') =&gt; false 'other' === withExactText('text') =&gt; false await aui.moveMouseTo().text().withExactText('Password').exec() @param {string} text - A text to be matched. withText() production Filters for similar -- meaning &gt;70% similar -- text. Takes an optional parameter to specify the similarity. Usually you need the optional parameter for long texts you want to match precisely. We use RapidFuzz which calculates the similarity like this: 1 - (distance / (lengthString1 + lengthString2)) Examples: 'text' === withText('text') =&gt; true 'test' === withText('text') =&gt; true 'Test' === withText('text') =&gt; true 'Text' === withText('text') =&gt; true 'TEXT' === withText('text') =&gt; true 'texst' === withText('text') =&gt; true 'texts' === withText('text') =&gt; true 'atebxtc' === withText('text') =&gt; false 'other' === withText('text') =&gt; false // optional parameter: similarity_score '978-0-201-00650-6' == withText(&quot;978-0-201-00&quot;, 90) =&gt; false with 82.76 &lt; 90 similarity '978-0-201-00650-6' == withText(&quot;978-0-201-00650&quot;, 90) =&gt; true with 93.75 &gt; 90 similarity @param {string} text - A text to be matched. withTextRegex() production Filters for texts, which match the regex pattern. Examples: 'The rain in Spain' === withTextRegex('\\b[Ss]\\w+') =&gt; true 'The rain in Portugal' === withTextRegex('\\b[Ss]\\w+') =&gt; false 'The rain in switzerland' === withTextRegex('\\b[Ss]\\w+') =&gt; true await aui.get().text().withTextRegex('\\b[Ss]\\w+').exec() @param {string} regex_pattern - A regex pattern  ","version":"Next","tagName":"h2"},{"title":"Relations​","type":1,"pageTitle":"Table of Contents","url":"/docs/next/api/API/table-of-contents#relations","content":" Nameabove() production Filters for an element above another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text1 | -------------- -------------- | text0 | -------------- -------------- | button | -------------- // Returns text0 because text0 is the first element above button ...text().above().button() ...text().above(0).button() // Returns text1 because text1 is the second element above button ...text().above(1).button() // Returns no element because button is below text ...button().above().text() @param {number} [optionalIndex=0] - element index and() production Logic and operator Examples: example scene: --------------- ---------------- | icon user | | icon search | --------------- ---------------- const icons = await aui.get().icon().exec(); console.log(icons); Using only the element-description icon, the get will return both icons console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 1000, ymin: 1010, xmax: 1020, ymax: 1030 } }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] You can combine element-descriptions with the and() relation and specify exactly which icon you want. const icons = await aui.get().icon().and().withText('user').exec() console.log(icons) The get returns only the user icon although both elements are icons. console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] below() production Filters for an element below another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text | -------------- -------------- | button0 | -------------- -------------- | button1 | -------------- // Returns button0 because button0 is the first button below text ...button().below().text() ...button().below(0).text() // Returns button1 because button1 is the second button below text ...button().below(1).text() // Returns no element because text is above button ...text().below().button() @param {number} [optionalIndex=0] - element index contains() production Filters for an element containing another element. Example: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns outerEl because outerEl contains innerEl ...outerEl().contains().innerEl() // Returns no element because innerEl contains no outerEl ...innerEl().contains().outerEl() in() production Filters for an element inside another element. Examples: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns innerEl because innerEl is inside outerEl ...innerEl().in().outerEl() // Returns nothing because innerEl is not inside outerEl ...outerEl().in().innerEl() leftOf() production Filters for an element left of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl1 | | leftEl0 | | rightEl | -------------- -------------- -------------- // Returns leftEl0 because leftEl0 is the first element left of rightEl ...leftEl().leftOf().rightEl() ...leftEl().leftOf(0).rightEl() // Returns leftEl1 because leftEl1 is the second element left of rightEl ...leftEl().leftOf(1).rightEl() // Returns no element because rightEl is left of leftEl ...rightEl().leftOf().leftEl() @param {number} [optionalIndex=0] - element index nearestTo() production Filters for an element nearest to another element. Examples: -------------- | button 1 | -------------- -------------- | text | -------------- -------------- | button 2 | -------------- // Returns button 1 because button 1 is nearer to the text than button 2 ...button().nearestTo().text() or() production Logic or operator Examples: scene 1 -------------- --------------- | button | | icon | -------------- --------------- scene 2 -------------- --------------- | button | | text | -------------- --------------- In case, that your reference element can have multiple values, in the following example, the element right of the button can be either icon or text. You can use the or() relation, so your instruction is valid for both scenes const button = await aui.get().button().rightOf().icon().or().text().exec(); console.log(button); Returns the same button for both cases console output: [ DetectedElement { name: 'BUTTON', text: 'button', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] rightOf() production Filters for an element right of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl | | rightEl0 | | rightEl1 | -------------- -------------- -------------- // Returns rightEl0 because rightEl0 is the first element right of leftEl ...rightEl().rightOf().leftEl() ...rightEl().rightOf(0).leftEl() // Returns rightEl1 because rightEl1 is the second element right of leftEl ...rightEl().rightOf(1).leftEl() // Returns no element because leftEl is left of rightEl ...leftEl().rightOf().rightEl() @param {number} [optionalIndex=0] - element index  ","version":"Next","tagName":"h2"},{"title":"Checks​","type":1,"pageTitle":"Table of Contents","url":"/docs/next/api/API/table-of-contents#checks","content":" Nameexists() production Expects that filtered element exists. Always use together with expect(). Note Throws an error and stops the execution when the element is not found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does not exist. await aui.expect().text('Login').exists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').exists().exec() } catch (error) { console.log('Too bad we could not find the element!'); } notExists() production Expects that filtered element not exists. Always use together with expect(). Note Throws an error and stops the execution when the element is found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does exist. await aui.expect().text('Login').notExists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').notExists().exec() } catch (error) { console.log('Too bad we could find the element!'); }   ","version":"Next","tagName":"h2"},{"title":"Getters​","type":1,"pageTitle":"Table of Contents","url":"/docs/next/api/API/table-of-contents#getters","content":" Nameget() production Returns an array with all filtered elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const text = await aui.get().text('Sign').exec(); console.log(text); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 } } ] getAll() production Returns an array with all detected elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const detectedElements = await aui.getAll().exec(); console.log(detectedElements); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 250.8204241071428, ymin: 300.21332310267857, xmax: 450.6304241071428, ymax: 950.47812834821428 }, ... 381 more items } ]  ","version":"Next","tagName":"h2"},{"title":"rightOf","type":0,"sectionRef":"#","url":"/docs/next/api/Relations/rightof","content":"rightOf production Filters for an element right of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl | | rightEl0 | | rightEl1 | -------------- -------------- -------------- // Returns rightEl0 because rightEl0 is the first element right of leftEl ...rightEl().rightOf().leftEl() ...rightEl().rightOf(0).leftEl() // Returns rightEl1 because rightEl1 is the second element right of leftEl ...rightEl().rightOf(1).leftEl() // Returns no element because leftEl is left of rightEl ...leftEl().rightOf().rightEl() @param {number} [optionalIndex=0] - element index","keywords":"","version":"Next"},{"title":"Remote Device Controller","type":0,"sectionRef":"#","url":"/docs/next/api/Remote-Device-Controller","content":"","keywords":"","version":"Next"},{"title":"Introduction & Setup​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/next/api/Remote-Device-Controller#introduction--setup","content":" ","version":"Next","tagName":"h2"},{"title":"Installer​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/next/api/Remote-Device-Controller#installer","content":" Download the installer from here. Start the installer and follow the installation process. Note: Installation requires administrator rights. Create a new AskUI project as described in our documentation. Open file test/helpers/askui-helper.ts in the AskUI project. Remove await uiController.start(); in beforeAll function. Remove await uiController.stop(); in afterAll function. Start the installed Remote Device Controller manually and select the screen you want to use. Note: Either through the start menu, desktop shortcut or the executable in the install directory. You should be good to go now to run your workflows as described in documentation. Note: Ensure that the Remote Device Controller is running before you start a workflow.  ","version":"Next","tagName":"h3"},{"title":"Manual Update of Remote Device Controller​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/next/api/Remote-Device-Controller#manual-update-of-remote-device-controller","content":" Make use of our preview build to use the latest features by following the mentioned steps below.  Go to function beforeAll there you must modify in file test/helpers/askui-helper.ts. Ensure that you have the required import UiController. &quot;import { UiController } from 'askui'&quot;; Also add the global variable if it is missing: let uiController: UiController; Modify the creation of uiController in file test/helpers/jest.setup.ts: uiController = new UiController({ /** Select the display you want to run your tests on, display 0 is your main display; ignore if you have only one display */ display: &lt;YOUR_DISPLAY_ID&gt;, binaryVersion: &quot;tdk-23.10.1-preview-release-1&quot; }); Note: The ui controller creation starts typically with uiController = await UiController({ ... but the instance name might be different. Replace \\&lt;YOUR_DISPLAY_ID&gt; with the display (starting with 0 for the first display) that you want to use: display: &lt;YOUR_DISPLAY_ID&gt;, Ensure that the controller gets started before the UI controller client tries (aui) to connect. Therefore the last two lines of the function should do: await uiController.start(); await aui.connect(); Note: The ui controller client creation starts typically with aui = await UiControlClient.build({ ... but the instance name might be different. Ensure that in function afterAll the controller gets stopped after the ui controller client closes the connection: aui.disconnect(); await uiController.stop(true); You should be good to go now to run your workflows as described in documentation.  Note: New features are only supported on Windows 10/11.  ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/next/api/Remote-Device-Controller#features","content":" ","version":"Next","tagName":"h2"},{"title":"Type Like a Human​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/next/api/Remote-Device-Controller#type-like-a-human","content":" Together with the asynchronous execution of actions we also introduce natural typing. The first iteration of this feature uses the typical typing speed of a human.  ","version":"Next","tagName":"h3"},{"title":"Android on Windows​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/next/api/Remote-Device-Controller#android-on-windows","content":" AskUI automation works on an Android device that is controlled from a Windows machine. It allows you to run a workflow on an Android device, including recording the session. Instructions how to setup the Android workflow can be found in our documentation.  Please also read the knows issues section since this is just a preview feature.  ","version":"Next","tagName":"h3"},{"title":"Known Issues​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/next/api/Remote-Device-Controller#known-issues","content":" ","version":"Next","tagName":"h2"},{"title":"Mouse Movement​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/next/api/Remote-Device-Controller#mouse-movement","content":" You may encounter issues when mouse pointer acceleration is enabled.  ","version":"Next","tagName":"h3"},{"title":"Log Files​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/next/api/Remote-Device-Controller#log-files","content":" Log files are stored under &lt;YOUR_USER_FOLDER&gt;/.askui/.  ","version":"Next","tagName":"h3"},{"title":"Android​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/next/api/Remote-Device-Controller#android","content":" Recording on an Android device is not stable.Recorded resolution might be lower than the device resolution.Recorded video might be empty or single frame in cases no screen updates occurred during recording.We don't support landscape mode on Android.Devices with high DPI screen might not work as expected. ","version":"Next","tagName":"h3"},{"title":"Automation Recorder","type":0,"sectionRef":"#","url":"/docs/next/general/Element Selection/automation-recorder","content":"Automation Recorder caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"Next"},{"title":"Supported Keys","type":0,"sectionRef":"#","url":"/docs/next/api/Supported-Keys","content":"Supported Keys Scroll the table to the right if the table is not shown completely 🙃. Names\tDescription\tPress\tRelease\tGroupalt\tALT key\tspecial case\tspecial case\t🪄 Modifier capslock\tCAPS LOCK key\tspecial case\tspecial case\t🪄 Modifier command\tRight Windows key (Natural keyboard)\tspecial case\tspecial case\t🪄 Modifier command\tLeft Windows key (Natural keyboard)\tspecial case\tspecial case\t🪄 Modifier control\tCTRL key\tspecial case\tspecial case\t🪄 Modifier left_control\tLeft CONTROL key\tspecial case\tspecial case\t🪄 Modifier numpad_lock\tNUM LOCK key\tspecial case\tspecial case\t🪄 Modifier right_alt\tRight ALT key\tspecial case\tspecial case\t🪄 Modifier right_control\tRight CONTROL key\tspecial case\tspecial case\t🪄 Modifier right_shift\tRight SHIFT key\tspecial case\tspecial case\t🪄 Modifier shift\tSHIFT key\tspecial case\tspecial case\t🪄 Modifier Left ALT key\tspecial case\tspecial case\t🪄 Modifier Left SHIFT key\tspecial case\tspecial case\t🪄 Modifier 0\t0 key\tworks\tworks\t🔠 Alphanumeric 1\t1 key\tworks\tworks\t🔠 Alphanumeric 2\t2 key\tworks\tworks\t🔠 Alphanumeric 3\t3 key\tworks\tworks\t🔠 Alphanumeric 4\t4 key\tworks\tworks\t🔠 Alphanumeric 5\t5 key\tworks\tworks\t🔠 Alphanumeric 6\t6 key\tworks\tworks\t🔠 Alphanumeric 7\t7 key\tworks\tworks\t🔠 Alphanumeric 8\t8 key\tworks\tworks\t🔠 Alphanumeric 9\t9 key\tworks\tworks\t🔠 Alphanumeric a\tA key\tworks\tworks\t🔠 Alphanumeric b\tB key\tworks\tworks\t🔠 Alphanumeric c\tC key\tworks\tworks\t🔠 Alphanumeric d\tD key\tworks\tworks\t🔠 Alphanumeric e\tE key\tworks\tworks\t🔠 Alphanumeric f\tF key\tworks\tworks\t🔠 Alphanumeric g\tG key\tworks\tworks\t🔠 Alphanumeric h\tH key\tworks\tworks\t🔠 Alphanumeric i\tI key\tworks\tworks\t🔠 Alphanumeric j\tJ key\tworks\tworks\t🔠 Alphanumeric k\tK key\tworks\tworks\t🔠 Alphanumeric l\tL key\tworks\tworks\t🔠 Alphanumeric m\tM key\tworks\tworks\t🔠 Alphanumeric n\tN key\tworks\tworks\t🔠 Alphanumeric o\tO key\tworks\tworks\t🔠 Alphanumeric p\tP key\tworks\tworks\t🔠 Alphanumeric q\tQ key\tworks\tworks\t🔠 Alphanumeric r\tR key\tworks\tworks\t🔠 Alphanumeric s\tS key\tworks\tworks\t🔠 Alphanumeric t\tT key\tworks\tworks\t🔠 Alphanumeric u\tU key\tworks\tworks\t🔠 Alphanumeric v\tV key\tworks\tworks\t🔠 Alphanumeric w\tW key\tworks\tworks\t🔠 Alphanumeric x\tX key\tworks\tworks\t🔠 Alphanumeric y\tY key\tworks\tworks\t🔠 Alphanumeric z\tZ key\tworks\tworks\t🔠 Alphanumeric backspace\tBACKSPACE key\tworks\tworks\t⚙️ Controls delete\tDEL key\tworks\tworks\t⚙️ Controls enter\tENTER key\tworks\tworks\t⚙️ Controls escape\tESC key\tworks\tworks\t⚙️ Controls space\tSPACEBAR key\tworks\tworks\t⚙️ Controls tab\tTAB key\tworks\tworks\t⚙️ Controls &quot;The &lt; &gt; keys on the US standard keyboard, or the \\\\| key on the non-US 102-key keyboard&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols Used for miscellaneous characters; it can vary by keyboard.\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the 'single-quote/double-quote' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the ']}' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '\\|' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '[{' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols | | &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '`~' key&quot; | Unsupported | Unsupported | #️⃣ Symbols | | | &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '/?' key&quot; | Unsupported | Unsupported | #️⃣ Symbols | | | &quot;For any country/region, the '.' key&quot; | Unsupported | Unsupported | #️⃣ Symbols | | | &quot;For any country/region, the '-' key&quot; | Unsupported | Unsupported | #️⃣ Symbols | | | &quot;For any country/region, the ',' key&quot; | Unsupported | Unsupported | #️⃣ Symbols | | | &quot;For any country/region, the '+' key&quot; | Unsupported | Unsupported | #️⃣ Symbols | | | &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the ';:' key&quot; | Unsupported | Unsupported | #️⃣ Symbols | | down | DOWN ARROW key | broken | broken | ➡️ Arrows | | left | LEFT ARROW key | works | works | ➡️ Arrows | | right | RIGHT ARROW key | works | works | ➡️ Arrows | | up | UP ARROW key | works | works | ➡️ Arrows | | f1 | F1 key | works | works | ⚡️ Function keys | | f10 | F10 key | broken | broken | ⚡️ Function keys | | f11 | F11 key | works | works | ⚡️ Function keys | | f12 | F12 key | works | works | ⚡️ Function keys | | f13 | F13 key | works | works | ⚡️ Function keys | | f14 | F14 key | works | works | ⚡️ Function keys | | f15 | F15 key | works | works | ⚡️ Function keys | | f16 | F16 key | works | works | ⚡️ Function keys | | f17 | F17 key | works | works | ⚡️ Function keys | | f18 | F18 key | works | works | ⚡️ Function keys | | f19 | F19 key | works | works | ⚡️ Function keys | | f2 | F2 key | works | works | ⚡️ Function keys | | f20 | F20 key | works | works | ⚡️ Function keys | | f21 | F21 key | works | works | ⚡️ Function keys | | f22 | F22 key | works | works | ⚡️ Function keys | | f23 | F23 key | works | works | ⚡️ Function keys | | f24 | F24 key | works | works | ⚡️ Function keys | | f3 | F3 key | works | works | ⚡️ Function keys | | f4 | F4 key | works | works | ⚡️ Function keys | | f5 | F5 key | works | works | ⚡️ Function keys | | f6 | F6 key | works | works | ⚡️ Function keys | | f7 | F7 key | works | works | ⚡️ Function keys | | f8 | F8 key | works | works | ⚡️ Function keys | | f9 | F9 key | works | works | ⚡️ Function keys | | audio_forward | | Unsupported | Unsupported | ⏯️ Media controls | | audio_mute | Volume Mute key | works | works | ⏯️ Media controls | | audio_next | Next Track key | works | works | ⏯️ Media controls | | audio_pause | | Unsupported | Unsupported | ⏯️ Media controls | | audio_play | Play/Pause Media key | broken | broken | ⏯️ Media controls | | audio_prev | Previous Track key | works | works | ⏯️ Media controls | | audio_random | | Unsupported | Unsupported | ⏯️ Media controls | | audio_repeat | | Unsupported | Unsupported | ⏯️ Media controls | | audio_rewind | | Unsupported | Unsupported | ⏯️ Media controls | | audio_stop | Stop Media key | works | works | ⏯️ Media controls | | audio_vol_down | Volume Down key | works | works | ⏯️ Media controls | | audio_vol_up | Volume Up key | works | works | ⏯️ Media controls | | | Play key | Unsupported | Unsupported | ⏯️ Media controls | | | Select Media key | Unsupported | Unsupported | ⏯️ Media controls | | | PAUSE key | Unsupported | Unsupported | ⏯️ Media controls | | numpad_* | Multiply key | works | works | 🔢 Keypad keys | | numpad_+ | Add key | works | works | 🔢 Keypad keys | | numpad_- | Subtract key | works | works | 🔢 Keypad keys | | numpad_. | Decimal key | works | works | 🔢 Keypad keys | | numpad_/ | Divide key | broken | broken | 🔢 Keypad keys | | numpad_0 | Numeric keypad 0 key | works | works | 🔢 Keypad keys | | numpad_1 | Numeric keypad 1 key | works | works | 🔢 Keypad keys | | numpad_2 | Numeric keypad 2 key | works | works | 🔢 Keypad keys | | numpad_3 | Numeric keypad 3 key | works | works | 🔢 Keypad keys | | numpad_4 | Numeric keypad 4 key | works | works | 🔢 Keypad keys | | numpad_5 | Numeric keypad 5 key | broken | broken | 🔢 Keypad keys | | numpad_6 | Numeric keypad 6 key | works | works | 🔢 Keypad keys | | numpad_7 | Numeric keypad 7 key | works | works | 🔢 Keypad keys | | numpad_8 | Numeric keypad 8 key | works | works | 🔢 Keypad keys | | numpad_9 | Numeric keypad 9 key | works | works | 🔢 Keypad keys | | | IME PROCESS key | Unsupported | Unsupported | 🈯️ International | | | IME mode change request | Unsupported | Unsupported | 🈯️ International | | | IME accept | Unsupported | Unsupported | 🈯️ International | | | IME nonconvert | Unsupported | Unsupported | 🈯️ International | | | IME convert | Unsupported | Unsupported | 🈯️ International | | | IME Off | Unsupported | Unsupported | 🈯️ International | | | IME Kanji mode | Unsupported | Unsupported | 🈯️ International | | | IME Hanja mode | Unsupported | Unsupported | 🈯️ International | | | IME final mode | Unsupported | Unsupported | 🈯️ International | | | IME Junja mode | Unsupported | Unsupported | 🈯️ International | | | IME On | Unsupported | Unsupported | 🈯️ International | | | IME Hangul mode | Unsupported | Unsupported | 🈯️ International | | | IME Hanguel mode (maintained for compatibility; use VK_HANGUL) | Unsupported | Unsupported | 🈯️ International | | | IME Kana mode | Unsupported | Unsupported | 🈯️ International | | | X2 mouse button | Unsupported | Unsupported | 🖱️Mouse | | | X1 mouse button | Unsupported | Unsupported | 🖱️Mouse | | | Middle mouse button (three-button mouse) | Unsupported | Unsupported | 🖱️Mouse | | | Left mouse button | Unsupported | Unsupported | 🖱️Mouse | | | Right mouse button | Unsupported | Unsupported | 🖱️Mouse | | end | END key | works | works | 🦄 Special purpose | | home | HOME key | works | works | 🦄 Special purpose | | insert | INS key | works | works | 🦄 Special purpose | | lights_kbd_down | | Unsupported | Unsupported | 🦄 Special purpose | | lights_kbd_toggle | | Unsupported | Unsupported | 🦄 Special purpose | | lights_kbd_up | | Unsupported | Unsupported | 🦄 Special purpose | | lights_mon_down | | Unsupported | Unsupported | 🦄 Special purpose | | lights_mon_up | | Unsupported | Unsupported | 🦄 Special purpose | | pagedown | PAGE DOWN key | works | works | 🦄 Special purpose | | pageup | PAGE UP key | works | works | 🦄 Special purpose | | printscreen | PRINT SCREEN key | broken | broken | 🦄 Special purpose | | | Clear key | Unsupported | Unsupported | 🦄 Special purpose | | | PA1 key | Unsupported | Unsupported | 🦄 Special purpose | | | Zoom key | Unsupported | Unsupported | 🦄 Special purpose | | | Erase EOF key | Unsupported | Unsupported | 🦄 Special purpose | | | ExSel key | Unsupported | Unsupported | 🦄 Special purpose | | | CrSel key | Unsupported | Unsupported | 🦄 Special purpose | | | Attn key | Unsupported | Unsupported | 🦄 Special purpose | | | &quot;Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP&quot; | Unsupported | Unsupported | 🦄 Special purpose | | | Start Application 2 key | Unsupported | Unsupported | 🦄 Special purpose | | | Start Application 1 key | Unsupported | Unsupported | 🦄 Special purpose | | | Start Mail key | Unsupported | Unsupported | 🦄 Special purpose | | | Browser Start and Home key | Unsupported | Unsupported | 🦄 Special purpose | | | Browser Favorites key | Unsupported | Unsupported | 🦄 Special purpose | | | Browser Search key | Unsupported | Unsupported | 🦄 Special purpose | | | Browser Stop key | Unsupported | Unsupported | 🦄 Special purpose | | | Browser Refresh key | Unsupported | Unsupported | 🦄 Special purpose | | | Browser Forward key | Unsupported | Unsupported | 🦄 Special purpose | | | Browser Back key | Unsupported | Unsupported | 🦄 Special purpose | | | SCROLL LOCK key | Unsupported | Unsupported | 🦄 Special purpose | | | Separator key | Unsupported | Unsupported | 🦄 Special purpose | | | Computer Sleep key | Unsupported | Unsupported | 🦄 Special purpose | | | Applications key (Natural keyboard) | Unsupported | Unsupported | 🦄 Special purpose | | | HELP key | Unsupported | Unsupported | 🦄 Special purpose | | | EXECUTE key | Unsupported | Unsupported | 🦄 Special purpose | | | PRINT key | Unsupported | Unsupported | 🦄 Special purpose | | | SELECT key | Unsupported | Unsupported | 🦄 Special purpose | | | CLEAR key | Unsupported | Unsupported | 🦄 Special purpose | | | Control-break processing | Unsupported | Unsupported | 🦄 Special purpose |","keywords":"","version":"Next"},{"title":"Multi Language Support","type":0,"sectionRef":"#","url":"/docs/next/general/Element Selection/multi-language-support","content":"Multi Language Support caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"Next"},{"title":"Assertions","type":0,"sectionRef":"#","url":"/docs/next/general/Element Selection/assertions","content":"","keywords":"","version":"Next"},{"title":"Assert the (non) Existence of Elements​","type":1,"pageTitle":"Assertions","url":"/docs/next/general/Element Selection/assertions#assert-the-non-existence-of-elements","content":" To validate if an element exists or not we use expect() in combination with exists() or notExists.  // Expect that a button with text 'Go for it' exists await aui.expect().text('Login').exists().exec(); // Expect that a text 'Do not go for it' not exists await aui.expect().text('Login').notExists().exec();   ","version":"Next","tagName":"h2"},{"title":"Assert the Correctness of Values​","type":1,"pageTitle":"Assertions","url":"/docs/next/general/Element Selection/assertions#assert-the-correctness-of-values","content":" Let's say you want to check if your automation actually wrote something into a textfield. You can do two things:  ","version":"Next","tagName":"h2"},{"title":"1. Use expect() to check if the text in the textfield matches​","type":1,"pageTitle":"Assertions","url":"/docs/next/general/Element Selection/assertions#1-use-expect-to-check-if-the-text-in-the-textfield-matches","content":" This technique is useful if the text you entered is unique on the screen.  // Type something into a textfield await aui.typeIn(&quot;Please find me&quot;).textfield().contains().text(&quot;Enter email&quot;).exec(); // Assert if the textfield contains the value await aui.expect().textfield().contains().text('Please find me').exists().exec();   ","version":"Next","tagName":"h3"},{"title":"2. Retrieve the element with get() and use an assertions library​","type":1,"pageTitle":"Assertions","url":"/docs/next/general/Element Selection/assertions#2-retrieve-the-element-with-get-and-use-an-assertions-library","content":" If your value is not unique on your screen you can retrieve the element with get() and a different selector. For example with a relational selector like below(). With an assertion library you can assert if the value is correct.  Jest comes with assertions. You only have to import them into your AskUI-file.  info Do not forget the import mentioned at the start of the snippet!  // Add this to the start of your AskUI-file containing your workflows/instructions import {expect, jest, test} from '@jest/globals'; // Type something into a textfield await aui.typeIn(&quot;Please find me&quot;).textfield().contains().text(&quot;Enter email&quot;).exec(); // You have to retrieve the text you wrote inside the textfield here // If you retrieve the textfield it does not contain the text inside of it const textfield = await aui.get().text().below().text(&quot;User email&quot;).exec(); // below() returns an array. We want the first element of that array! expect(textfield[0].text).toBe(&quot;Please find me&quot;);  ","version":"Next","tagName":"h3"},{"title":"Prompt Selectors","type":0,"sectionRef":"#","url":"/docs/next/general/Element Selection/prompt-selectors","content":"Prompt Selectors caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"Next"},{"title":"Annotations, Screenshots and Videos","type":0,"sectionRef":"#","url":"/docs/next/general/Element Selection/annotations-and-screenshots","content":"","keywords":"","version":"Next"},{"title":"Interactive Annotation​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/next/general/Element Selection/annotations-and-screenshots#interactive-annotation","content":" info Windows Users Please use annotate() as explained in the section below. The interactive annotation aui.annotateInteractively() currently leads to an error on Windows.  An interactive annotation is in essence three components:  A screenshot of whatever the AskUI controller is told to see, as defined in the config file:    Annotations, marked by the red boxes you see, which are added by the machine learning model.    Element-Descriptions, which are labels applied to the annotations of the screenshot.  Clicking an element will copy this element-description, which we can then use in the step 3 of Write Your First Instruction, which is actually using that run instructions.    ","version":"Next","tagName":"h2"},{"title":"Static Annotation​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/next/general/Element Selection/annotations-and-screenshots#static-annotation","content":" The helper function annotate() creates an annotated HTML file of the given image and saves it into the given path. If no image is given, then it captures the specified screen and annotates the captured image.  Synopsis and Arguments Synopsis UiControlClient.annotate(); // or UiControlClient.annotate({ imagePath: '&lt;your-image-path&gt;', outputPath: '&lt;path-of-the-generated-html&gt;', fileNamePrefix: '&lt;prefix-of-the-output-file&gt;', customElements: CustomElementJson[] // more details in the example below }); Arguments If no argument is given, A screenshot of your specified screen will be taken, and annotated. Thereafter, it will be saved as an interactive HTML file into the report/ folder. imagePath: If defined, the image at the path is loaded and annotated.If not defined, a screenshot of your specified screen is taken and annotated. outputPath: If defined, the generated HTML report will be saved in this path.If not defined, a folder report/ will be created in the project root. fileNamePrefix: The prefix for the resulting HTML report. customElements: A list of custom elements. The AI model will use them to detect elements similar to them. elements: A list of detected elements obtained with get(). Only the bounding boxes for those elements will be rendered.  Example  /* Takes a screenshot of your selected display, and produces an HTML report file inside the default output path &lt;project_root&gt;/report. */ await aui.annotate(); /* Loads the image 'my-screenshot.png' and produces an HTML report file inside the output path 'annotation-reports/' */ await aui.annotate( { imagePath: 'my-screenshot.png', outputPath: 'annotation-reports/' }); /* Loads the image 'my-screenshot.png' together with the custom elements and produces an HTML report file inside the output path 'annotation-reports/' */ await aui.annotate( { imagePath: 'my-screenshot.png', outputPath: 'annotaion-reports/', customElements: [ { customImage: '&lt;custom_image_path|base64Image&gt;', imageCompareFormat: 'grayscale', name: 'custom element 1' }, { /* for this custom element the OCR AI model will be used to extract text from the image, since no name was given. */ customImage: '&lt;custom_image2_path|base64Image&gt;', imageCompareFormat: 'RGB', } ] }); /* Annotates only the text elements with the text 'User Interfaces?' */ const detectedElements = await aui.get().text().withText(&quot;User Interfaces?&quot;).exec(); await aui.annotate( { elements: detectedElements });   ","version":"Next","tagName":"h2"},{"title":"Taking Screenshots​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/next/general/Element Selection/annotations-and-screenshots#taking-screenshots","content":" If you want to see what AskUI sees at a specific point in the execution you can use TypeScript to create a screenshot. Here is a code-snippet you can copy and paste into your code that saves an image with the name screenshot.png to the root-folder of your project.  info Do not forget the import mentioned at the start of the snippet!  // Add this to the start of your AskUI-file containing your workflows/instructions import * as fs from 'fs'; // First, get all the information from the annotation // This will also save an interactive HTML file to the 'report/' folder const annotation = await aui.annotate(); // The screenshot is contained as a string in 'base64' format // Create a buffer with the base64 image let buf = Buffer.from(annotation.image.split('base64,')[1], 'base64'); // Write the file fs.writeFileSync(&quot;./test.png&quot;, buf);   ","version":"Next","tagName":"h2"},{"title":"Recording Videos​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/next/general/Element Selection/annotations-and-screenshots#recording-videos","content":" caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly. ","version":"Next","tagName":"h2"},{"title":"Scraping and Storing Elements","type":0,"sectionRef":"#","url":"/docs/next/general/Element Selection/scraping-and-storing-lements","content":"","keywords":"","version":"Next"},{"title":"Basic Usage​","type":1,"pageTitle":"Scraping and Storing Elements","url":"/docs/next/general/Element Selection/scraping-and-storing-lements#basic-usage","content":" The get()-Instruction returns an array of all the elements it found. It looks like this example:   console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 } }, ... ]   Usually you do not want every element from your UI returned. So you pair it with an element-selector:  const textFieldText = await aui .get() .text() .in() .textfield() .exec();   [ DetectedElement { name: 'text', text: 'Search', bndbox: BoundingBox { xmin: 488, ymin: 138, xmax: 548, ymax: 164 }, colors: [ '', '', '' ] } ]   ","version":"Next","tagName":"h2"},{"title":"Extract the Value​","type":1,"pageTitle":"Scraping and Storing Elements","url":"/docs/next/general/Element Selection/scraping-and-storing-lements#extract-the-value","content":" You can extract the value by reading the text-property of the DetectedElement.  Notice: textFieldText is an array. You have to iterate over it or use an index to access the DetectedElement.  // Access by index // textFieldTextValue gets the value 'Search' const textFieldTextValue = textFieldText?.[0]?.text;   ","version":"Next","tagName":"h2"},{"title":"Use Extracted Value as Input​","type":1,"pageTitle":"Scraping and Storing Elements","url":"/docs/next/general/Element Selection/scraping-and-storing-lements#use-extracted-value-as-input","content":" You can use the extracted value as input for another textfield for example:  await aui .typeIn(textFieldTextValue) .textfield() .contains() .text() .withText(&quot;AskUI&quot;) .exec();  ","version":"Next","tagName":"h2"},{"title":"Tables","type":0,"sectionRef":"#","url":"/docs/next/general/Element Selection/tables","content":"Tables caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"Next"},{"title":"Relational Selectors","type":0,"sectionRef":"#","url":"/docs/next/general/Element Selection/relational-selectors","content":"","keywords":"","version":"Next"},{"title":"Selecting an Element by Visual Relation​","type":1,"pageTitle":"Relational Selectors","url":"/docs/next/general/Element Selection/relational-selectors#selecting-an-element-by-visual-relation","content":" After reading the next section you will know how to use the full power of all the relational element-descriptions. Additionally, you learn what pitfalls you can fall into and how to avoid them in the future.  We will use the Selectorshub practice page for the demonstration.  We’ll discuss the following relational element-descriptions:  above()below()contains()in()leftOf()rightOf()nearestTo()  ","version":"Next","tagName":"h2"},{"title":"above()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/next/general/Element Selection/relational-selectors#above","content":" When you want to click on a textfield and it is above an element, like for example a button with the text Submit. You can do it with above(). The following code snippet moves the mouse to the textfield above the Submit-button:  await aui .click() .textfield() .above() .button() .withText('Submit') .exec();     ","version":"Next","tagName":"h2"},{"title":"below()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/next/general/Element Selection/relational-selectors#below","content":" When you want to select a textfield you can do so by finding the correct label, which is often above the textfield. The following code snippet moves the mouse to the textfield below the text Mobile Number:  await aui .moveMouseTo() .textfield() .below() .text() .withText('Mobile Number') .exec();     ","version":"Next","tagName":"h2"},{"title":"contains()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/next/general/Element Selection/relational-selectors#contains","content":" For selecting an element, that contains another element, contains() is the right candidate. It is especially useful if you want to select a textfield with a placeholder text inside it. The text inside the textfield is annotated as an element itself.  If you have problems with selecting a specific element, always run annotate() to create a screenshot of all the annotations or use annotateInteractively() to see if you need to use contains().  The following snippet moves the mouse to a textfield based on its placeholder text First Crush which is contained in the textfield:  await aui .moveMouseTo() .textfield() .contains() .text() .withText('First Crush') .exec();     ","version":"Next","tagName":"h2"},{"title":"in()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/next/general/Element Selection/relational-selectors#in","content":" When you want to target an element that is inside another element you can use in().  -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | --------------------   The following code snippet moves the mouse pointer to the text of the first textfield AskUI found:  await aui .moveMouseTo() .text() .in() .textfield() .exec();     ","version":"Next","tagName":"h2"},{"title":"leftOf() and rightOf()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/next/general/Element Selection/relational-selectors#leftof-and-rightof","content":" If you want to select an element based on its location left or right of another element you have to use leftOf() or rightOf() respectively.  💡 If you do not specify another element-description like withText() then you will get the nearest element. Otherwise, AskUI retrieves the nearest element that matches the element-description!  await aui .moveMouseTo() .text() .leftOf() .text() .withText('Denmark') .exec();     await aui .moveMouseTo() .text() .rightOf() .text() .withExactText('Joe Root') .exec();     ","version":"Next","tagName":"h2"},{"title":"nearestTo()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/next/general/Element Selection/relational-selectors#nearestto","content":" Filtering with the nearestTo() will return the element nearest to another element. This is useful when the direction is not clear on where to search. Especially responsive designs are prone to wrap elements into a new line where leftOf() and rightOf() would fail.  await aui .moveMouseTo() .textfield() .nearestTo() .text() .withTextRegex('User Em*') .exec();     ","version":"Next","tagName":"h2"},{"title":"Additional Considerations About the Distance Metric​","type":1,"pageTitle":"Relational Selectors","url":"/docs/next/general/Element Selection/relational-selectors#additional-considerations-about-the-distance-metric","content":" The distance is not entirely based on physical distance. If you use an additional element-description like withText() it optimizes to find the best match. It also considers special cases, for example, modal dialogs. Therefore the element selected by AskUI might sometimes be wrong from a user's point of view.  You can use moveMouseTo() like in the following example to see what element an instruction targets.  await aui .moveMouseTo() .textfield() .above() .button() .withText('Submit') .exec()  ","version":"Next","tagName":"h2"},{"title":"Mobile Automation","type":0,"sectionRef":"#","url":"/docs/next/general/Executing Automations/mobile-automation","content":"","keywords":"","version":"Next"},{"title":"Android​","type":1,"pageTitle":"Mobile Automation","url":"/docs/next/general/Executing Automations/mobile-automation#android","content":" In this tutorial, we will walk you through how to set up an Android device for automating mobile apps running on Android devices (physical or emulated).  ","version":"Next","tagName":"h2"},{"title":"Requirements​","type":1,"pageTitle":"Mobile Automation","url":"/docs/next/general/Executing Automations/mobile-automation#requirements","content":" Android device: real or emulated.  Set up a Real Android Device​  This part is for setting up a real Android device. If you want to use an Android emulator instead, then you can skip it and go directly to the next step.  To use additional development features in an Android device, you need to enable the Developer Options within the device. To enable the Developer Options, tap the Build Number option 7 times. You can find this option in one of the following locations, depending on your Android version:  Android 9 (API level 28) and higher: Settings &gt; About Phone &gt; Build NumberAndroid 8.0.0 (API level 26) and Android 8.1.0 (API level 26): Settings &gt; System &gt; About Phone &gt; Build NumberAndroid 7.1 (API level 25) and lower: Settings &gt; About Phone &gt; Build Number  After enabling the Developer Options, you can enable the USB debugging option. This option will allow the Android Studio and other SDK tools to recognize your Android device via USB. To enable USB debugging, toggle the USB debugging option in the Developer Options menu. You can find this option in one of the following locations, depending on your Android version:  Android 9 (API level 28) and higher: Settings &gt; System &gt; Advanced &gt; Developer Options &gt; USB debuggingAndroid 8.0.0 (API level 26) and Android 8.1.0 (API level 26): Settings &gt; System &gt; Developer Options &gt; USB debuggingAndroid 7.1 (API level 25) and lower: Settings &gt; Developer Options &gt; USB debugging  ","version":"Next","tagName":"h3"},{"title":"Install Android SDK Command-line Tools​","type":1,"pageTitle":"Mobile Automation","url":"/docs/next/general/Executing Automations/mobile-automation#install-android-sdk-command-line-tools","content":" Download the SDK Platform-Tools from the official site.  Unzip the .zip file. You can find the adb binary within the extracted directory.  cd platform-tools # Show every available Android devices ./adb devices   info The command adb is usually not added to your $PATH and will not be available globally. Please follow the official docs to set it up.  ","version":"Next","tagName":"h3"},{"title":"3. Set Up the ADBKeyboard​","type":1,"pageTitle":"Mobile Automation","url":"/docs/next/general/Executing Automations/mobile-automation#3-set-up-the-adbkeyboard","content":" Until now, you have prepared your Android device and now you are ready to go for automating our Android app. But before you jump into this phase, you will set up one more utility that will make the procedure easier.  ADBKeyboard is a virtual keyboard that can be installed on Android devices. It enables us to type within the Android device by using command lines commands via adb.  One noticeable advantage of using ADBKeyboard is that it can also handle base64 encoding, which becomes handy if you want to type Unicode characters such as emojis🔥 For more details about this virtual keyboard, see here.  To install the ADBKeyboard on your device,  Download the ADBKeyboard package from this GitHub Repository (Important: Version 2.0) Unzip it. Find your device: # make sure that your Android device is connected. # in case of using the emulator, it should be running adb devices Install the ADBKeyboard on the device: # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; install ADBKeyboard.apk Configure the ADB Keyboard: adb -s &lt;your device id&gt; shell settings put secure default_input_method com.android.adbkeyboard/.AdbIME Enable the ADBKeyboard: adb -s &lt;your device id&gt; shell ime enable com.android.adbkeyboard/.AdbIME To check if it is enabled: Click on a textfield in an app and see if the ADB Keyboard {ON} notification is shown at the bottom of the screen.  ","version":"Next","tagName":"h3"},{"title":"4. Done​","type":1,"pageTitle":"Mobile Automation","url":"/docs/next/general/Executing Automations/mobile-automation#4-done","content":" We are finally done with the preparation for automating apps running on Android devices.  You can now try your setup in our Automate Web Search on Android Devices Tutorial.  If you have a recurring or persisting issue while following this tutorial, don’t hesitate to ask the Outverse-Community for help!  ","version":"Next","tagName":"h3"},{"title":"iOS Automation​","type":1,"pageTitle":"Mobile Automation","url":"/docs/next/general/Executing Automations/mobile-automation#ios-automation","content":" caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly. ","version":"Next","tagName":"h2"},{"title":"Desktop Automation","type":0,"sectionRef":"#","url":"/docs/next/general/Executing Automations/desktop-automation","content":"Desktop Automation caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"Next"},{"title":"Single Device Automation","type":0,"sectionRef":"#","url":"/docs/next/general/Executing Automations/single-device-automation","content":"Single Device Automation caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"Next"},{"title":"Web Automation","type":0,"sectionRef":"#","url":"/docs/next/general/Executing Automations/web-automation","content":"Web Automation caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"Next"},{"title":"Multi Device Automation","type":0,"sectionRef":"#","url":"/docs/next/general/Executing Automations/multi-device-automation","content":"","keywords":"","version":"Next"},{"title":"1. Download and Prepare the askui-ui-controller Binary for Each Device​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/next/general/Executing Automations/multi-device-automation#1-download-and-prepare-the-askui-ui-controller-binary-for-each-device","content":" Download the binary/binaries for the respective platform(s): info macOS After installation to Applications remove the quarantine flag with the following command run from a terminal: xattr -d com.apple.quarantine /Applications/askui-ui-controller.app Windows | macOS(intel) | macOS(silicon) | Linux  macOS and Linux only: If you downloaded the askui-ui-controller manually from the link above, you have to make it executable.  macOS: Mount the downloaded askui-ui-controller.dmg by double-clicking it and copy the askui-ui-controller.app to wherever you want to store it. Then, the executable binary will be within the .app package: askui-ui-controller.app/Contents/MacOS/askui-ui-controller Linux: Run the command below to make it executable: chmod +x askui-ui-controller.AppImage   If the remote devices runs Android, see Android Only.  ","version":"Next","tagName":"h2"},{"title":"Android Only:​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/next/general/Executing Automations/multi-device-automation#android-only","content":" Prepare your Android device with this tutorial.  Use the commands below, if you want to connect your Android device via adb wirelessly:  # Connect the Android device with a # USB cable, and run this command: # Run this command to confirm that your # Android device is discoverable adb devices # will print the &lt;device-id&gt; # replace &lt;device-id&gt; with your device-id adb -s &lt;device-id&gt; tcpip 9000 # replace the &lt;local-ip-address&gt; adb -s &lt;device-id&gt; connect &lt;local-ip-address&gt;:9000 # Run this command, if you want to check the local # ip address of the android device adb -s &lt;device-id&gt; shell ip -f inet addr show wlan0 # Now you can disconnect the USB cable from the Android device. # Confirm that the Android device is recognised by adb wirelessly. adb devices   ","version":"Next","tagName":"h3"},{"title":"2. Configure the jest.setup.ts​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/next/general/Executing Automations/multi-device-automation#2-configure-the-jestsetupts","content":" Figure out the local IP address of the remote device, and then change the &lt;local-ip-address&gt; of the jest.setup.ts:  import { UiControlClient, UiController } from 'askui'; let localDevice: UiControlClient; let remoteDevice: UiControlClient; jest.setTimeout(60 * 1000 * 60); beforeAll(async () =&gt; { // Get your AskUI credentials from https://app.askui.com/workspaces const credentials = { workspaceId: '&lt;your-workspace-id&gt;', token: '&lt;your-token&gt;', } // This client will communicate with // the controller running on this local device. localDevice = await UiControlClient.build({ uiControllerUrl: &quot;ws://127.0.0.1:6769&quot;, credentials: credentials, }); await localDevice.connect(); // This client will communicate with // the controller running on the remote device. // Replace the &lt;local-ip-address&gt; // In case of Android device, replace it with 127.0.0.1 remoteDevice = await UiControlClient.build({ uiControllerUrl: &quot;ws://&lt;local-ip-address&gt;:6769&quot;, credentials: credentials, }); await remoteDevice.connect(); }); afterAll(async () =&gt; { localDevice.close(); remoteDevice.close(); }); export { localDevice, remoteDevice };   ","version":"Next","tagName":"h2"},{"title":"3. Run the Controller on Each Device​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/next/general/Executing Automations/multi-device-automation#3-run-the-controller-on-each-device","content":" danger Change to the directory of the askui-ui-controller binary first: See Download and Prepare step.  Run the binary AskUI UI Controller on the local and remote devices with the following command:  # Windows powershell .\\askui-ui-controller.exe --host 0.0.0.0 -d 0 -m # Windows cmd start askui-ui-controller.exe --host 0.0.0.0 -d 0 -m # macOS ./askui-ui-controller --host 0.0.0.0 -d 0 -m # Linux ./askui-ui-controller.AppImage --host 0.0.0.0 -d 0 -m   If running successfully, you should see the logs printed on the terminal, e.g:  [2023-01-02 17:31:19.634 +0100] DEBUG (AskuiUiController): Window is minimized. [2023-01-02 17:31:19.639 +0100] INFO (AskuiUiController): Selecting display number 0. [2023-01-02 17:31:19.641 +0100] INFO (AskuiUiController): Successfully started.   ","version":"Next","tagName":"h2"},{"title":"Android Only:​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/next/general/Executing Automations/multi-device-automation#android-only-1","content":" If your remote device is an Android device, run the AskUI UI Controller on the local device (desktop) with an extra option as shown below:  # Windows powershell .\\askui-ui-controller.exe --host 0.0.0.0 -d 0 -m -r android # Windows cmd start askui-ui-controller.exe --host 0.0.0.0 -d 0 -m -r android # macOS ./askui-ui-controller --host 0.0.0.0 -d 0 -m -r android # Linux ./askui-ui-controller.AppImage --host 0.0.0.0 -d 0 -m -r android   Make sure that your local device (desktop) is running TWO DIFFERENT askui-ui-controller, if you want to control the local device and the Android device at the same time.  ","version":"Next","tagName":"h3"},{"title":"4. Write the AskUI Code​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/next/general/Executing Automations/multi-device-automation#4-write-the-askui-code","content":" Write the AskUI code in test/my-first-askui-test-suite.test.ts:  import { localDevice, remoteDevice } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should work with multiple devices', async () =&gt; { const everyElement_remote = await remoteDevice.getAll().exec(); console.log(everyElement_remote); await localDevice.moveMouse(500,500).exec(); const everyElement_local = await localDevice.getAll().exec(); console.log(everyElement_local); }); });   ","version":"Next","tagName":"h2"},{"title":"5. Run the Code​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/next/general/Executing Automations/multi-device-automation#5-run-the-code","content":" Run the command below to run the AskUI code:  npm run askui   ","version":"Next","tagName":"h2"},{"title":"6. Conclusion​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/next/general/Executing Automations/multi-device-automation#6-conclusion","content":" Now you should be able to automate multiple devices in the network. If you got any issues while following this tutorial, don't hesitate to ask our Outverse-Community! ","version":"Next","tagName":"h2"},{"title":"Framework Configuration","type":0,"sectionRef":"#","url":"/docs/next/general/Getting Started/configure_test_framework","content":"","keywords":"","version":"Next"},{"title":"Jest​","type":1,"pageTitle":"Framework Configuration","url":"/docs/next/general/Getting Started/configure_test_framework#jest","content":" You can configure Jest with the jest.config.ts. It should look something like this:  export default { preset: 'ts-jest', testEnvironment: 'node', setupFilesAfterEnv: ['./helper/jest.setup.ts'], sandboxInjectedGlobals: ['Math'] };   In case your Jest tests are executed slowly, make sure you have added 'Math' to sandboxInjectedGlobals.  caution The option sandboxInjectedGlobals was named extraGlobals in Jest v27 and lower. ","version":"Next","tagName":"h2"},{"title":"Enterprise Checklist","type":0,"sectionRef":"#","url":"/docs/next/general/Getting Started/enterprise-checklist","content":"","keywords":"","version":"Next"},{"title":"Network​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/next/general/Getting Started/enterprise-checklist#network","content":" This is often a tricky one. So if you experience problems installing AskUI that suggests the problem is missing internet access:  Please check our Troubleshooting - Proxy pageGet help from your IT-department  ","version":"Next","tagName":"h2"},{"title":"Software Needed​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/next/general/Getting Started/enterprise-checklist#software-needed","content":" ","version":"Next","tagName":"h2"},{"title":"Node.js​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/next/general/Getting Started/enterprise-checklist#nodejs","content":" Install Node.js from the official download page.  Open a terminal/PowerShell and run the following commands to check if you have the correct versions of node and npm:  node --versionnpm --version  ","version":"Next","tagName":"h3"},{"title":"Python​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/next/general/Getting Started/enterprise-checklist#python","content":" Python 3.10 or higher needs to be installed. Open a terminal/PowerShell and run python --version to check if you have the correct version.  Official Download page for WindowsOfficial Download page for macOS  ","version":"Next","tagName":"h3"},{"title":"Windows​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/next/general/Getting Started/enterprise-checklist#windows","content":" When you want to use the AskUI Runner you will create a virtual environment.  Follow these instruction. And consult your IT-department if you run into problems.  ","version":"Next","tagName":"h3"},{"title":"Install Dependencies​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/next/general/Getting Started/enterprise-checklist#install-dependencies","content":" You will probably have to install dependencies like node-packages over a company internal repository management system like Artifactory.  Find out how to set up Node.js and Python for your internal repository management system. Consult your IT-department if necessary.Check our proxy troubleshooting page for AskUI specific guidance on how to setup the proxy for Node.js.  ","version":"Next","tagName":"h3"},{"title":"Permissions​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/next/general/Getting Started/enterprise-checklist#permissions","content":" UiController/Remote Device Controller needs permissions for screen recording and accessibility features to control your machine like a human. Follow the instructions for your operating system.  ","version":"Next","tagName":"h3"},{"title":"macOS​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/next/general/Getting Started/enterprise-checklist#macos","content":" Enable screen recording instructionsEnable accessibility instructions ","version":"Next","tagName":"h3"},{"title":"Install AskUI Android","type":0,"sectionRef":"#","url":"/docs/next/general/Getting Started/getting-started-android","content":"","keywords":"","version":"Next"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI Android","url":"/docs/next/general/Getting Started/getting-started-android#requirements","content":" AskUI on own machine (See above)Prepared Android deviceAndroid SDK Command-line Tools ","version":"Next","tagName":"h2"},{"title":"Install AskUI Linux","type":0,"sectionRef":"#","url":"/docs/next/general/Getting Started/getting-started-linux","content":"","keywords":"","version":"Next"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI Linux","url":"/docs/next/general/Getting Started/getting-started-linux#requirements","content":" Node.js version 16 or abovenpm in version 7.10 or above (usually comes with the Node.js installation)A text editor/IDE like Visual Studio Code⚠️ Information for Wayland.  ","version":"Next","tagName":"h2"},{"title":"Access Token​","type":1,"pageTitle":"Install AskUI Linux","url":"/docs/next/general/Getting Started/getting-started-linux#access-token","content":" As we need to prevent misuse of our API, we need you to create some credentials through our AskUI Studio (for free).  Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio.  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Install AskUI Linux","url":"/docs/next/general/Getting Started/getting-started-linux#installation","content":" Open a directory where you would like to place the AskUI setup and run this command. The command will ask you a few questions on how to customize your setup. If you are unsure which value to select press the Enter-key to select the default value. Also keep your workspace id and your access token ready which you created just before (We hope so 😉).  npx askui@latest init   note To create and serve a static HTML-Report you have to install Allure and then call allure serve ./allure-results from your root-directory. ","version":"Next","tagName":"h2"},{"title":"Install AskUI Windows","type":0,"sectionRef":"#","url":"/docs/next/general/Getting Started/getting-started","content":"","keywords":"","version":"Next"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/next/general/Getting Started/getting-started#requirements","content":" A text editor/IDE like Visual Studio CodeDownloaded AskUI-InstallerAdministrator privileges on the machine for installation  ","version":"Next","tagName":"h2"},{"title":"Access Token​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/next/general/Getting Started/getting-started#access-token","content":" As we need to prevent misuse of our API, we need you to create some credentials through our AskUI Studio (for free).  Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio.  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/next/general/Getting Started/getting-started#installation","content":" ","version":"Next","tagName":"h2"},{"title":"1. Run Installer​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/next/general/Getting Started/getting-started#1-run-installer","content":" Run the downloaded installer as Administrator (Rightclick the installer and select Run as administrator).  ","version":"Next","tagName":"h3"},{"title":"Activate the AskUI Development Environment (ADE)​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/next/general/Getting Started/getting-started#activate-the-askui-development-environment-ade","content":" Open a command prompt like PowerShellRun the command askui (type it and press Enter). This brings you into the AskUI Development Environment (short ADE) where you can configure your installation, start the Remote Device Controller, create new AskUI-Projects and run workflows.  ","version":"Next","tagName":"h3"},{"title":"Configure AskUI​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/next/general/Getting Started/getting-started#configure-askui","content":" Run the following command to set your credentials. Replace &lt;access token&gt; and &lt;workspace id&gt; with the ones you obtained under Access Token:  Askui-SetSettings -AskuiToken &lt;access token&gt; -AskuiWorkspaceId &lt;workspace id&gt;   (Optional) Configure Proxy​  If you are behind a proxy you have to set the proxy address. Replace &lt;proxy_http_address&gt; and &lt;proxy_https_address&gt; with the ones for your proxy:  Askui-SetSettings -ProxyHttpAddress &lt;proxy_http_address&gt; -ProxyHttpsAddress &lt;proxy_https_address&gt;   ","version":"Next","tagName":"h3"},{"title":"Start the Remote Device Controller​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/next/general/Getting Started/getting-started#start-the-remote-device-controller","content":" Start the Remote Device Controller in the background with:  Askui-StartRemoteDeviceController -RunInBackground   ","version":"Next","tagName":"h3"},{"title":"","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/next/general/Getting Started/getting-started##","content":" Verify the settings by running Askui-ShowSettingsSwitch to a directory where you want to initialize a new AskUI-Project and run Askui-NewProject  note To create and serve a static HTML-Report you have to install Allure and then call allure serve ./allure-results from your root-directory. This is optional and can be done later. ","version":"Next","tagName":"h3"},{"title":"Install AskUI macOS","type":0,"sectionRef":"#","url":"/docs/next/general/Getting Started/getting-started-macos","content":"","keywords":"","version":"Next"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI macOS","url":"/docs/next/general/Getting Started/getting-started-macos#requirements","content":" Node.js version 16 or abovenpm in version 7.10 or above (usually comes with the Node.js installation)A text editor/IDE like Visual Studio Code  danger Some users have reported instability running AskUI on macOS with external displays and/or virtual desktops (called Spaces). If you experience similar issues, please disconnect external displays and close virtual desktops, or see documentation on running AskUI in Docker.  ","version":"Next","tagName":"h2"},{"title":"Access Token​","type":1,"pageTitle":"Install AskUI macOS","url":"/docs/next/general/Getting Started/getting-started-macos#access-token","content":" As we need to prevent misuse of our API, we need you to create some credentials through our AskUI Studio (for free).  Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio.  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Install AskUI macOS","url":"/docs/next/general/Getting Started/getting-started-macos#installation","content":" Open a directory where you would like to place the AskUI setup and run this command. The command will ask you a few questions on how to customize your setup. If you are unsure which value to select press the Enter-key to select the default value. Also keep your workspace id and your access token ready which you created just before (We hope so 😉).  npx askui@latest init   note To create and serve a static HTML-Report you have to install Allure and then call allure serve ./allure-results from your root-directory. ","version":"Next","tagName":"h2"},{"title":"Start","type":0,"sectionRef":"#","url":"/docs/next/general/Getting Started/start","content":"Start Choose what you want to automate. 📦 Quickstart Try AskUI without any hassle in Gitpod. Try it now! 🪟 Windows Learn how to automate on Windows. Get started! 🤖 Android Learn how to automate an Android device. Get started! 👩🏻‍💻 macOS Learn how to automate on macOS Get started! 💻 Linux Learn how to automate on Linux. Get started! 🏢 Enterprise Checklist Setup in an enterprise environment. Get started! 📱 iOS 🚧 Coming soon! 🚧 Get started!","keywords":"","version":"Next"},{"title":"How AskUI Works","type":0,"sectionRef":"#","url":"/docs/next/general/Getting Started/guide-how-askui-works","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"How AskUI Works","url":"/docs/next/general/Getting Started/guide-how-askui-works#overview","content":" In this article, we will give a detailed overview of AskUI`s architecture and how it works under the hood.    AskUI is built on top of a number of components. We will cover what these components are and how they work together to provide a flexible and reliable way to automate interactions with UI elements of any operating system or platform.  By the end of this article, whether you're a software developer, QA engineer, or automation specialist, you'll have a solid understanding of how AskUI works, and be able to use this knowledge to build more efficient automation for your project.  AskUI consists of three building blocks:  AskUI Control ClientAskUI UI ControllerAskUI Inference Server  We will step through each of them and see how they work together to perform UI automation.    ","version":"Next","tagName":"h2"},{"title":"Glossary​","type":1,"pageTitle":"How AskUI Works","url":"/docs/next/general/Getting Started/guide-how-askui-works#glossary","content":" Throughout this article, we will use some terms that describe certain parts of AskUI. Some of them are used only internally and not exposed by the AskUI Control Client API, but are important for understanding how AskUI works and what it can do. Please refer to this table while reading.  Term\tDescriptionElement-description\tA description for a UI element. In the AskUI Control Client API, for example, it is the coded description like button() or textfield().contains().text('Email'). Action\tA method in the AskUI Control Client API that describes an action to be taken against the operating system. For example click(), type(). InputEvent (internal)\tA specific type of action to be taken against the operating system. For example MouseInputEvent or KeyboardInputEvent. ControlCommand (internal)\tA command sent to the UI controller telling what to perform on the operating system. It consists of one or more InputEvents.    ","version":"Next","tagName":"h2"},{"title":"AskUI Control Client​","type":1,"pageTitle":"How AskUI Works","url":"/docs/next/general/Getting Started/guide-how-askui-works#askui-control-client","content":"   The AskUI Control Client provides the API that tells AskUI what/how to automate. Once you start using AskUI, you will mostly interact with AskUI via the AskUI Control Client. In most of our tutorials and demonstrations, you will see let aui: UIControlClient is declared and combined with an Action and Element-descriptions which ends up forming an instruction, e.g:  await aui.click().button().withText('login').exec();   As shown above, you form an instruction by chaining an Action with Element-descriptions using the Fluent API of the AskUI Control Client. It is designed as a fluent interface to increase readability and make it more understandable. The AskUI Control Client sends a request to the AskUI UI Controller: to take a screenshot.with a ControlCommand that tells what InputEvent to perform on the operating system. The AskUI Control Client communicates with the AskUI Inference Server: to send a screenshot to be annotated with the instruction.to receive the annotation, e.g. detected elements.  To use the AskUI Control Client, user credentials are required. User credentials can be obtained via our AskUI Studio. Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio.  See our API documentation for more information on this component.    ","version":"Next","tagName":"h2"},{"title":"AskUI UI Controller​","type":1,"pageTitle":"How AskUI Works","url":"/docs/next/general/Getting Started/guide-how-askui-works#askui-ui-controller","content":"   The AskUI UI Controller is a binary that controls the operating system. This binary gets automatically downloaded when the UiController is initialized by calling UiController.start(). Once executed, it stays in the background and communicates with the AskUI Control Client on a specific port to receive the ControlCommand. Based on the given ControlCommand, it triggers InputEvents respectively.  The AskUI UI Controller is responsible for: Taking a screenshot.Triggering the InputEvent, i.e MouseInputEvent, KeyboardInputEvent, or shell execution.Running the interactive annotation.  See our API documentation for more information on this component.    ","version":"Next","tagName":"h2"},{"title":"AskUI Inference Server​","type":1,"pageTitle":"How AskUI Works","url":"/docs/next/general/Getting Started/guide-how-askui-works#askui-inference-server","content":"   The AskUI Inference Server is responsible for the prediction of UI elements within the given screenshot. As soon as it receives a request from the AskUI Control Client, it performs the prediction on the given image and returns the annotation to the AskUI Control Client.  For the inference, we use a machine-learning model that consists of several submodels:  Object Detector: Detects UI elements (e.g button, textfield).Icon Classifier: Predicts the class of an icon based on the detected objects (e.g. a user icon 👤).Optical Character Recognition (OCR): Converts the image of a text into text.Custom Element Detector: Searches for an area in the given screenshot that matches the image given by the Element-description .customElement().    ","version":"Next","tagName":"h2"},{"title":"Them All in Action​","type":1,"pageTitle":"How AskUI Works","url":"/docs/next/general/Getting Started/guide-how-askui-works#them-all-in-action","content":" Assuming that we run AskUI on the same device we want to automate, the simplest synopsis can be described as such:    When running AskUI,  The AskUI Control Client checks whether it is needed to be processed by the Inference Server. If the code contains any of the Element-description or Getters, then the AskUI Control Client tells the AskUI UI Controller to take a screenshot of the given screen and sends it to the Inference Server. After the AskUI Control Client has retrieved the annotation back from the server, it sends a ControlCommand to the AskUI UI Controller. Afterwards, the AskUI UI Controller triggers the InputEvent on the operating system. // an example of AskUI code containing an element-identifier await aui.click().button().withText('Confirm').exec(); // Here, the element-description 'button()' is used together, // so the client will fire a request to the server. If the code contains an Action but no Element-description, then the AskUI Control Client sends the ControlCommand to the AskUI UI Controller to trigger the InputEvent directly. // an example of AskUI code containing only a command await aui.pressThreeKeys('control','alt','del').exec(); // It uses only a command 'pressThreeKeys()', // so it will be executed by the UI Controller directly.   An Element-description represents a specific type of UI element that can be recognized by inference. Most of the commonly used UI elements such as button, textfield are supported and can be used. An Action represents a specific type of action to be performed, i.e Mouse/Keyboard Input Event or Shell Command. This action can be performed on a specific element when combined with Element-descriptions or can be performed on its own as shown in the example right above.  Please visit our API Docs, if you want to learn more about different types of Element-description and Action.    ","version":"Next","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"How AskUI Works","url":"/docs/next/general/Getting Started/guide-how-askui-works#conclusion","content":" Here we have seen the three core components of AskUI. If you aim to use AskUI in a more advanced way, e.g. integrating it into your CI/CD pipeline, it may be worthwhile to get an overview of how it is composed. For more practical examples, please refer to our Tutorials and API docs. And don't forget to come over to our Outverse-Community, if you have any questions about AskUI! ","version":"Next","tagName":"h2"},{"title":"Write Your First Instruction","type":0,"sectionRef":"#","url":"/docs/next/general/Getting Started/write-your-first-instruction","content":"","keywords":"","version":"Next"},{"title":"Run Your First Instruction​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/next/general/Getting Started/write-your-first-instruction#run-your-first-instruction","content":" Writing and executing an instruction in AskUI can be done in three steps:  Execute an (interactive) annotation.Extract from the (interactive) annotation the element-description which identifies target element.Execute an instruction to control the keyboard and mouse to take action on target element.  ","version":"Next","tagName":"h2"},{"title":"Step 1: Execute an (Interactive) Annotation​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/next/general/Getting Started/write-your-first-instruction#step-1-execute-an-interactive-annotation","content":" Before executing the instructions, open askui_example/my-first-askui-test-suite.test.ts on your main display in the directory you initialized your AskUI-Project before. The code in this file is shown below.  info Windows Users Please use annotate() as outlined in the code below. The interactive annotation aui.annotateInteractively() currently leads to an error on Windows. macOS Users Some users have reported instability running AskUI on macOS with external displays and/or virtual desktops (called Spaces). If you experience similar issues, please disconnect external displays and close virtual desktops, or see documentation on running AskUI in Docker.  WindowsmacOSLinux askui_example/my-first-askui-test-suite.test.ts import { aui } from './helpers/askui-helper'; describe('jest with askui', () =&gt; { it('should generate an (interactive) annotation', async () =&gt; { // Use annotate() to create an annotated HTML file // of your screen that is saved under &lt;project_root&gt;/report await aui.annotate(); }); });   To execute the instructions, enter into your terminal (Windows: AskUI Development Environment (ADE)).  WindowsmacOSLinux Switch into ADE by running askui in a Command Prompt first. Askui-RunProject   A few seconds later an (interactive) annotation will be generated.  If you’d like a longer explanation as to what an (interactive) annotation is, read about it here. Explanation of (Interactive) Annotations  ","version":"Next","tagName":"h3"},{"title":"Step 2: Extract the Element-Description​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/next/general/Getting Started/write-your-first-instruction#step-2-extract-the-element-description","content":" Extract from the (interactive) annotation the element-description which identifies target element. Locate any element you’d like the mouse to move to and copy the element-description by clicking on it: Clicking an element will copy this element-description, which we can then use in the step 3.  To close out the interactive annotation, use CMD/CTRL + W or ESC.  ","version":"Next","tagName":"h3"},{"title":"Step 3: Execute an Instruction​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/next/general/Getting Started/write-your-first-instruction#step-3-execute-an-instruction","content":" Add this instruction code block to the describe block in your test file just under your (interactive) annotation instruction, taking note to also add your copied element-description from the annotation:  askui_example/my-first-askui-test-suite.test.ts it('should click on my element', async () =&gt; { await aui .click() // &lt;INSERT YOUR COPIED ELEMENT-DESCRIPTION HERE AND UNCOMMENT THIS AND THE NEXT LINE&gt; // .exec(); });   Be sure to xit out the (interactive) annotation, as that is no longer needed. The final version should look like this, taking exception of course to whatever element-description text you chose:  WindowsmacOSLinux askui_example/my-first-askui-test-suite.test.ts describe('jest with askui', () =&gt; { xit('should generate an (interactive) annotation', async () =&gt; { // Use annotate() to create an annotated HTML file // of your screen that is saved under &lt;project_root&gt;/report await aui.annotate(); }); it('should click on my element', async () =&gt; { await aui .click() .text(&quot;node_nodu&quot;) .exec(); }); });   As before, run your code with npm run askui (Windows: Askui-RunProject).  You should see AskUI take over your mouse, mouse over the element you chose and click.  Congratulations! You’ve just built your first instruction using AskUI. 🎉  ","version":"Next","tagName":"h3"},{"title":"What other instructions are available?​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/next/general/Getting Started/write-your-first-instruction#what-other-instructions-are-available","content":" Actions APIElement-Descriptions APIRelations APIChecks APIGetters API  ","version":"Next","tagName":"h3"},{"title":"Troubleshooting​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/next/general/Getting Started/write-your-first-instruction#troubleshooting","content":" ","version":"Next","tagName":"h2"},{"title":"AskUI moves to the wrong element?​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/next/general/Getting Started/write-your-first-instruction#askui-moves-to-the-wrong-element","content":" Have a look at Relational Selectors to select elements via a visual relation instead.  ","version":"Next","tagName":"h3"},{"title":"Technical​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/next/general/Getting Started/write-your-first-instruction#technical","content":" For technical problems with the execution, take a look at our Troubleshooting page  ","version":"Next","tagName":"h3"},{"title":"Where to Go Next?​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/next/general/Getting Started/write-your-first-instruction#where-to-go-next","content":" Our Outverse-Community is there to help you out!  ","version":"Next","tagName":"h2"},{"title":"Tutorials​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/next/general/Getting Started/write-your-first-instruction#tutorials","content":" If you are unsure on how/what to do yet, try to follow our tutorials. They cover some of use cases of AskUI in depth:  Search Image in GoogleLogin at an Online ShopAutomate Spotify on DesktopAutomate an Android App  ","version":"Next","tagName":"h3"},{"title":"Annotation​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/next/general/Getting Started/write-your-first-instruction#annotation","content":" Read Debug with Annotation to learn how to use the Image Annotation Feature. ","version":"Next","tagName":"h3"},{"title":"Custom Web Hooks","type":0,"sectionRef":"#","url":"/docs/next/general/Integrations/custom-web-hooks","content":"Custom Web Hooks caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"Next"},{"title":"Databases","type":0,"sectionRef":"#","url":"/docs/next/general/Integrations/databases","content":"Databases caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"Next"},{"title":"Continuous Integration","type":0,"sectionRef":"#","url":"/docs/next/general/Integrations/continuous-integration","content":"","keywords":"","version":"Next"},{"title":"Github Actions​","type":1,"pageTitle":"Continuous Integration","url":"/docs/next/general/Integrations/continuous-integration#github-actions","content":" ","version":"Next","tagName":"h2"},{"title":"AskUI-Runner Container: Get Workflows from AskUI Studio​","type":1,"pageTitle":"Continuous Integration","url":"/docs/next/general/Integrations/continuous-integration#askui-runner-container-get-workflows-from-askui-studio","content":" When you want to get the latest version of your workflows from AskUI Studio, the AskUI-Runner container needs a configuration file config.yaml to know where to pull them from.  The AskUI-Runner container downloads the workflows and runs them inside a docker container. You do not have to take care of any installation of tools on your side 🥳.  Set these environment variables for your pipeline:  ASKUI_WORKSPACE_ID=&lt;Your workspace id from AskUI Studio&gt; ASKUI_TOKEN=&lt;An access token from your AskUI Studio workspace&gt; ASKUI_INFERENCE_SERVER_URL=&lt;Use https://inference.askui.com if your are not on-premise&gt; ASKUI_WORKFLOW_ENDPOINT_URL=https://app-gateway-api.askui.com/prod/api/v1 DOCKER_USERNAME=&lt;Your Docker Hub username&gt; DOCKER_PASSWORD=&lt;Your Docker Hub password&gt;   Create a config.yaml inside your pipeline like this:  cat &lt;&lt; EOF &gt; config.yaml access_token: ${{ secrets.ASKUI_TOKEN }} inference_server_url: ${{ secrets.ASKUI_INFERENCE_SERVER_URL }} workspace_id: ${{ secrets.ASKUI_WORKSPACE_ID }} workflow_endpoint: prefixes: - workspaces/${{ secrets.ASKUI_WORKSPACE_ID }}/test-cases url: ${{ secrets.ASKUI_WORKFLOW_ENDPOINT_URL }}/workspaces/${{ secrets.ASKUI_WORKSPACE_ID }}/objects EOF   Execute your workflows with our AskUI-Runner container. Do not forget to login into Docker Hub 😉.  docker run --shm-size=&quot;2g&quot; --rm -v ${{ github.workspace }}/config.yaml:/home/askui/config.yaml -v ${{ github.workspace }}/allure-results:/home/askui/test_project/allure-results askuigmbh/askui-runner:v0.13.1-github   Generate Allure report: The run results are placed in allure-results where you can render your report from. Check the detailed examples for your pipeline technology.  Please check the full example file on GitHub.  ","version":"Next","tagName":"h3"},{"title":"Without AskUI-Runner Container​","type":1,"pageTitle":"Continuous Integration","url":"/docs/next/general/Integrations/continuous-integration#without-askui-runner-container","content":" Download the workflows from AskUI Studio and place the folder test in the root of your repository.  Then implement the following steps in your pipeline:  Optional: Set up AskUI Controller as serviceSetup node in version 16.xInstall all dependencies: npm installRun tests with npm run test Set the environment variables: ASKUI_WORKSPACE_IDASKUI_TOKENASKUI_INFERENCE_SERVER_URLOptional: UI_CONTROLLER_URL if the UiController is running on a remote machine and not localhost or as a service inside your pipeline. For reports: Generate reportsDeploy/Send reports  Please check the full example file on GitHub.  ","version":"Next","tagName":"h3"},{"title":"Gitlab CI​","type":1,"pageTitle":"Continuous Integration","url":"/docs/next/general/Integrations/continuous-integration#gitlab-ci","content":" ","version":"Next","tagName":"h2"},{"title":"AskUI-Runner Container: Get Workflows from AskUI Studio​","type":1,"pageTitle":"Continuous Integration","url":"/docs/next/general/Integrations/continuous-integration#askui-runner-container-get-workflows-from-askui-studio-1","content":" When you want to get the latest version of your workflows from AskUI Studio, the AskUI-Runner container needs a configuration file config.yaml to know where to pull them from.  The AskUI-Runner container downloads the workflows and runs them inside a docker container. You do not have to take care of any installation of tools on your side 🥳.  Set these Gitlab variables for your pipeline:  ASKUI_WORKSPACE_ID=&lt;Your workspace id from AskUI Studio&gt; ASKUI_TOKEN=&lt;An access token from your AskUI Studio workspace&gt; ASKUI_INFERENCE_SERVER_URL=&lt;Use https://inference.askui.com if your are not on-premise&gt; ASKUI_WORKFLOW_ENDPOINT_URL=https://app-gateway-api.askui.com/prod/api/v1 DOCKER_USERNAME=&lt;Your Docker Hub username&gt; DOCKER_PASSWORD=&lt;Your Docker Hub password&gt;   Create a config.yaml inside your pipeline like this:  cat &lt;&lt; EOF &gt; config.yaml access_token: $ASKUI_TOKEN inference_server_url: $ASKUI_INFERENCE_SERVER_URL workspace_id: $ASKUI_WORKSPACE_ID workflow_endpoint: prefixes: - workspaces/${ASKUI_WORKSPACE_ID}/test-cases url: ${ASKUI_WORKFLOW_ENDPOINT_URL}/workspaces/${ASKUI_WORKSPACE_ID}/objects EOF   Do not forget to login into Docker Hub and enable Docker-In-Docker like this 😉:  services: - docker:dind before_script: - docker info - echo &quot;$DOCKER_PASSWORD&quot; | docker login --username $DOCKER_USERNAME --password-stdin   Execute your workflows with our AskUI-Runner container.  docker run --shm-size=&quot;2g&quot; --rm -v ./config.yaml:/home/askui/config.yaml -v ./allure-results:/home/askui/test_project/allure-results askuigmbh/askui-runner:v0.13.1-github   Generate Allure report: The run results are placed in allure-results where you can render your report from.  Check the detailed examples for your pipeline technology.  Please check the full example file on Gitlab.com.  ","version":"Next","tagName":"h3"},{"title":"Without AskUI-Runner Container​","type":1,"pageTitle":"Continuous Integration","url":"/docs/next/general/Integrations/continuous-integration#without-askui-runner-container-1","content":" Download the workflows from AskUI Studio and place the folder test in the root of your repository.  Then implement the following steps in your pipeline:  Optional: Set up AskUI Controller as serviceSetup node in version 16.xInstall all dependencies: npm installRun tests with npm run test Set the environment variables: ASKUI_WORKSPACE_IDASKUI_TOKENASKUI_INFERENCE_SERVER_URLOptional: UI_CONTROLLER_URL if the UiController is running on a remote machine and not localhost or as a service inside your pipeline. For reports: Generate reportsDeploy/Send reports  Please check the full example file on Gitlab.com.  ","version":"Next","tagName":"h3"},{"title":"Azure DevOps​","type":1,"pageTitle":"Continuous Integration","url":"/docs/next/general/Integrations/continuous-integration#azure-devops","content":" ","version":"Next","tagName":"h2"},{"title":"AskUI-Runner Container: Get Workflows from AskUI Studio​","type":1,"pageTitle":"Continuous Integration","url":"/docs/next/general/Integrations/continuous-integration#askui-runner-container-get-workflows-from-askui-studio-2","content":" When you want to get the latest version of your workflows from AskUI Studio, the AskUI-Runner container needs a configuration file config.yaml to know where to pull them from.  The AskUI-Runner downloads the workflows and runs them inside a docker container. You do not have to take care of any installation of tools on your side 🥳.  Set these variables for your pipeline:  ASKUI_WORKSPACE_ID=&lt;Your workspace id from AskUI Studio&gt; ASKUI_TOKEN=&lt;An access token from your AskUI Studio workspace&gt; ASKUI_INFERENCE_SERVER_URL=&lt;Use https://inference.askui.com if your are not on-premise&gt; ASKUI_WORKFLOW_ENDPOINT_URL=https://app-gateway-api.askui.com/prod/api/v1 DOCKER_USERNAME=&lt;Your Docker Hub username&gt; DOCKER_PASSWORD=&lt;Your Docker Hub password&gt;   Create a config.yaml inside your pipeline like this:  cat &lt;&lt; EOF &gt; config.yaml access_token: $(ASKUI_TOKEN) inference_server_url: $(ASKUI_INFERENCE_SERVER_URL) workspace_id: $(ASKUI_WORKSPACE_ID) workflow_endpoint: prefixes: - workspaces/$(ASKUI_WORKSPACE_ID)/test-cases url: $(ASKUI_WORKFLOW_ENDPOINT_URL)/workspaces/$(ASKUI_WORKSPACE_ID)/objects EOF   Execute your workflows with our AskUI-Runner container. Do not forget to login into Docker Hub 😉.  echo &quot;$(DOCKER_PASSWORD)&quot; | docker login --username $(DOCKER_USERNAME) --password-stdin docker run --shm-size=&quot;2g&quot; --rm -v &quot;/$(pwd)/config.yaml:/home/askui/config.yaml&quot; -v &quot;/$(pwd)/allure-results:/home/askui/test_project/allure-results&quot; askuigmbh/askui-runner:v0.13.1-github   Generate Allure report: The run results are placed in allure-results where you can render your report from. Check the detailed examples for your pipeline technology.  - bash: | curl -o allure-commandline-2.10.0.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.10.0/allure-commandline-2.10.0.tgz sudo tar -zxf allure-commandline-2.10.0.tgz -C . echo &quot;Creating allure-report&quot; ./allure-2.10.0/bin/allure generate allure-results -o allure-report echo &quot;allure-report created&quot; # Install https://github.com/mclay/azure-pipeline-allure-report first - task: PublishAllureReport@1 displayName: 'Publish Allure Report' inputs: reportDir: 'allure-report'   Please check the full example file on GitHub.  ","version":"Next","tagName":"h3"},{"title":"Without AskUI-Runner Container​","type":1,"pageTitle":"Continuous Integration","url":"/docs/next/general/Integrations/continuous-integration#without-askui-runner-container-2","content":" Download the workflows from AskUI Studio and place the folder test in the root of your repository.  Then implement the following steps in your pipeline:  Set the pipeline variables: ASKUI_WORKSPACE_IDASKUI_TOKENASKUI_INFERENCE_SERVER_URLOptional: UI_CONTROLLER_URL if the UiController is running on a remote machine and not localhost or as a service inside your pipeline. Setup docker and node in version 16.x  - task: DockerInstaller@0 inputs: dockerVersion: '17.09.0-ce' - task: NodeTool@0 inputs: versionSpec: '16.x' displayName: 'Install Node.js'   Start the UiController from our Docker image  - bash: | sudo ufw disable echo 'Start UIController' docker run -d -p 6769:6769 --cidfile container.cid askuigmbh/askui-ui-controller:v0.11.2-chrome-100.0.4896.60-amd64   Install all dependencies and run the workflow:  echo 'Run npm install' npm install echo 'Run AskUI' export ASKUI_TOKEN=$(ASKUI_TOKEN) export ASKUI_WORKSPACE_ID=$(ASKUI_WORKSPACE_ID) npm run test   For reports: Generate reportsDeploy/Send reports  - bash: | curl -o allure-commandline-2.10.0.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.10.0/allure-commandline-2.10.0.tgz sudo tar -zxf allure-commandline-2.10.0.tgz -C . echo &quot;Creating allure-report&quot; ./allure-2.10.0/bin/allure generate allure-results -o allure-report echo &quot;allure-report created&quot; # Install https://github.com/mclay/azure-pipeline-allure-report first - task: PublishAllureReport@1 displayName: 'Publish Allure Report' inputs: reportDir: 'allure-report'   Please check the full example file on GitHub. ","version":"Next","tagName":"h3"},{"title":"Device Farms","type":0,"sectionRef":"#","url":"/docs/next/general/Integrations/device-farms","content":"Device Farms caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"Next"},{"title":"Docker","type":0,"sectionRef":"#","url":"/docs/next/general/Integrations/containers","content":"","keywords":"","version":"Next"},{"title":"AskUI UI Controller Docker Images​","type":1,"pageTitle":"Docker","url":"/docs/next/general/Integrations/containers#askui-ui-controller-docker-images","content":" We maintain Docker images for running instructions with AskUI inside a Docker Container, e.g., locally or in a CI/CD pipeline. The images are based on Ubuntu (amd64) images and contain the askui UI Controller (also known as the UiController) and a browser. The AskUI SDK connects to the UI Controller inside the Docker container to execute workflows inside it.  You can find our images on DockerHub.  caution If you are on an ARM architecture such as Apple Silicon, you can NOT run the images at the moment!  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Docker","url":"/docs/next/general/Integrations/containers#configuration","content":" The following environment variables can be used for configuring the Docker Container started from one of our Docker Images:  Variable\tDefault Value\tDescriptionSE_SCREEN_WIDTH\t1360\tSets the screen width SE_SCREEN_HEIGHT\t1020\tSets the screen height SE_SCREEN_DEPTH\t24 GOOGLE_CHROME_ARGS\tempty ASKUI_CONTROLLER_ARGS\tempty VERBOSE\tempty\t  ","version":"Next","tagName":"h3"},{"title":"Tag Naming Schema​","type":1,"pageTitle":"Docker","url":"/docs/next/general/Integrations/containers#tag-naming-schema","content":" We use the following tag schema:  &lt;controller-version&gt;-&lt;browser-name&gt;-&lt;browser-version&gt;-amd64 # browser-name: chrome only for now # Example 0.11.2-chrome-119.0.6045.123-amd64   ❗️ &lt;controller-version&gt; is NOT the AskUI SDK version ❗️  ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Docker","url":"/docs/next/general/Integrations/containers#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Docker","url":"/docs/next/general/Integrations/containers#prerequisites","content":" Docker (Download here)AskUI Development Environment (Windows, Linux, macOS)  You will only need the Docker CLI but you can install Docker Desktop, too if you want.  ","version":"Next","tagName":"h3"},{"title":"Starting Container Manually​","type":1,"pageTitle":"Docker","url":"/docs/next/general/Integrations/containers#starting-container-manually","content":" You can pull an image using docker pull, e.g.,  docker pull askuigmbh/askui-ui-controller:0.11.2-chrome-119.0-amd64   and, then, start the corresponding container using:  docker run -p 6769:6769 -p 7900:7900 askuigmbh/askui-ui-controller:0.11.2-chrome-119.0-amd64   Ports:  AskUI UI Controller: 6769No_VNC: 7900  Password for No_VNC is secret.  ","version":"Next","tagName":"h3"},{"title":"Connect to the Container with AskUI SDK​","type":1,"pageTitle":"Docker","url":"/docs/next/general/Integrations/containers#connect-to-the-container-with-askui-sdk","content":" You have to adjust the askui_example/helpers/askui-helper.ts that is created when running npx askui@latest init, because the UiControlClient connects to the UiController running inside the Docker container:  Remove everything related to uiControllerCheck your credentialsOptional: Set the uiControllerUrl in UiControlClient if you exposed the UI Controller on a different port (see UI Control Client API Docs for more information  It should look like this:  askui_example/helper/askui-helper.ts import { UiControlClient, UiController } from 'askui'; import { AskUIAllureStepReporter } from '@askui/askui-reporters'; // Client is necessary to use the askui API let aui: UiControlClient; jest.setTimeout(60 * 1000 * 60); beforeAll(async () =&gt; { aui = await UiControlClient.build({ // Uncomment next line when you did NOT expose the AskUI UI Controller on port 6769 // uiControllerUrl: http://127.0.0.1:&lt;Insert your port here&gt;', credentials: { workspaceId: '&lt;Insert your workspace id here&gt;', token: '&lt;Insert your access token here&gt;', }, reporter: new AskUIAllureStepReporter(), }); await aui.connect(); }); beforeEach(async () =&gt; { await aui.startVideoRecording(); }); afterEach(async () =&gt; { await aui.stopVideoRecording(); const video = await aui.readVideoRecording(); await AskUIAllureStepReporter.attachVideo(video); }); afterAll(async () =&gt; { aui.disconnect(); }); export { aui };   warning If you initialized your AskUI project with an older version of AskUI or upgraded from an older version you may not have a askui_example/helpers/askui-helper.ts file. Please apply the changes in test/helpers/jest.setup.ts.  ","version":"Next","tagName":"h3"},{"title":"Connect via VNC​","type":1,"pageTitle":"Docker","url":"/docs/next/general/Integrations/containers#connect-via-vnc","content":" To check what is happening inside a running container, you can connect via VNC. For this, you need to open a browser and navigate to http://localhost:7900. When using the testcontainers example code, the VNC port to connect to is logged to the console.  When connecting, enter the password secret when asked.  Example of a VNC connection with a Chrome browser running inside a container:    ","version":"Next","tagName":"h3"},{"title":"Starting Container from Within beforeAll() Using Testcontainers​","type":1,"pageTitle":"Docker","url":"/docs/next/general/Integrations/containers#starting-container-from-within-beforeall-using-testcontainers","content":" Testcontainers is a Node.js library that supports starting Docker Containers from within tests and throwing them away afterwards.  To use it, first install it:  npm i -D testcontainers   After that, you can adjust the askui_example/helpers/askui-helper.ts that is created when running npx askui@latest init The following example starts the AskUI container and connects to it just before all instructions are run:  warning If you initialized your AskUI project with an older version of AskUI or upgraded from an older version you may not have a test/helpers/askui-helper.ts file. Please apply the changes in test/helpers/jest.setup.ts.  import { UiControlClient } from 'askui'; import { GenericContainer, StartedTestContainer } from 'testcontainers'; jest.setTimeout(60 * 1000 * 60); function getDockerImageName(): string { const askuiUiControllerVersion = '0.11.2'; const browser = 'chrome'; const browserVersion = '119.0'; const osArch = 'amd64'; return `askuigmbh/askui-ui-controller:${askuiUiControllerVersion}-${browser}-${browserVersion}-${osArch}`; } async function startTestContainer(): Promise&lt;StartedTestContainer&gt; { const container = await new GenericContainer(getDockerImageName()) .withEnvironment({ 'SE_SCREEN_WIDTH': '1920', 'SE_SCREEN_HEIGHT': '1080', }) .withExposedPorts(6769, 7900) .start(); console.log(`VNC link: ${container.getHost()}:${container.getMappedPort(7900)}`); return container; } let testContainer: StartedTestContainer; // eslint-disable-next-line import/no-mutable-exports let aui: UiControlClient; beforeAll(async () =&gt; { testContainer = await startTestContainer(); aui = await UiControlClient.build({ uiControllerUrl: `http://127.0.0.1:${testContainer.getMappedPort(6769)}`, credentials: { workspaceId: '&lt;Insert your workspace id here&gt;', token: '&lt;Insert your access token here&gt;', }, reporter: new AskUIAllureStepReporter(), }); await aui.connect(); }); afterAll(async () =&gt; { aui.disconnect(); await testContainer.stop(); }); export { aui };  ","version":"Next","tagName":"h2"},{"title":"Single Sign-On (SSO)","type":0,"sectionRef":"#","url":"/docs/next/general/Integrations/SSO","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/next/general/Integrations/SSO#prerequisites","content":" Before you begin, ensure you have administrative access to your organization’s IdP service and that your enterprise account with us is eligible for SSO integration.  Note: If you do not have an Enterprise account and are interested in this feature, please contact our sales team for more information on upgrading your account.Book a call  ","version":"Next","tagName":"h2"},{"title":"Supported Identity Providers​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/next/general/Integrations/SSO#supported-identity-providers","content":" Our platform supports SSO integration with a wide range of identity providers including, but not limited to:  Active Directory/LDAPADFSAzure Active Directory NativeGoogle WorkspaceOpenID ConnectOktaPingFederateSAMLAzure Active Directory  For More Information: To learn more about the identity providers supported for SSO integration, please visit Auth0 Enterprise Identity Providers documentation. This resource provides detailed information on each provider and guidance on integration specifics.  ","version":"Next","tagName":"h2"},{"title":"Step 1: Determining Your SSO Protocol​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/next/general/Integrations/SSO#step-1-determining-your-sso-protocol","content":" Identify the SSO protocol or federated identity provider your organization uses from the list of supported providers above.  ","version":"Next","tagName":"h2"},{"title":"Step 2: Gathering Necessary Data from Your Identity Provider​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/next/general/Integrations/SSO#step-2-gathering-necessary-data-from-your-identity-provider","content":" To set up SSO, you will need to provide our team with specific information from your IdP. Here is what you will typically need from each provider:  ","version":"Next","tagName":"h2"},{"title":"Common Data Required Across All Providers​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/next/general/Integrations/SSO#common-data-required-across-all-providers","content":" Domain Name: Your organization's domain associated with the IdP.Client ID: The unique identifier for your application registered with the IdP.Client Secret: A secret key used by your application to authenticate with the IdP.  ","version":"Next","tagName":"h3"},{"title":"Provider-Specific Data​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/next/general/Integrations/SSO#provider-specific-data","content":" Active Directory/LDAP​  Server URL: The LDAP server URL.Bind DN: The distinguished name to bind to the LDAP server.Bind Credentials: The password or other credentials required to bind to the LDAP server.  ADFS​  Federation Metadata URL: The URL where the federation metadata is published.Relying Party Trust Identifier: The identifier for your service configured in ADFS.  Azure Active Directory Native​  Tenant ID: The unique identifier of your Azure AD tenant.Redirect URI: The URI where the IdP sends the authentication response.  Google Workspace​  Service Account Email: The service account email used for Google Workspace integration.Service Account Key: The private key associated with the service account.  OpenID Connect​  Issuer URL: The URL of your IdP to verify the issuer of the token.Scopes: The scopes of access you are requesting.  Okta​  Okta Domain: Your Okta account domain.API Token: A token to authenticate API requests.  PingFederate​  PingFederate Server URL: The URL to your PingFederate server.Partner's Entity ID: The entity ID of your partner configuration in PingFederate.  SAML​  SAML SSO URL: The endpoint URL for SAML Single Sign-On.X.509 Certificate: The certificate to sign SAML requests.  Azure Active Directory​  Azure AD Identifier: The unique identifier for your Azure AD directory.Reply URL (Assertion Consumer Service URL): The URL to which the SAML assertion is sent.  Note: This list is not exhaustive, and additional information may be required by your IdP. Ensure all sensitive information is shared securely and refer to the latest documentation provided by the IdP for detailed requirements.  ","version":"Next","tagName":"h3"},{"title":"Step 3: Requesting Data​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/next/general/Integrations/SSO#step-3-requesting-data","content":" Request the required data from your IdP. If possible, also request a test user to facilitate the setup and testing processes.  ","version":"Next","tagName":"h2"},{"title":"Step 4: Setting Up the Connection​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/next/general/Integrations/SSO#step-4-setting-up-the-connection","content":" To set up Single Sign-On (SSO) for your account, reach out to our dedicated support team. They will take care of the entire SSO configuration process tailored to your selected Identity Provider (IdP). Our team is committed to ensuring a seamless and secure connection. Please contact us at:  Email: support@askui.com  ","version":"Next","tagName":"h2"},{"title":"Step 5: Testing the Integration​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/next/general/Integrations/SSO#step-5-testing-the-integration","content":" After configuring SSO, test the login and signup process with a user account from your domain to verify that the integration works as expected.  ","version":"Next","tagName":"h2"},{"title":"Support and Troubleshooting​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/next/general/Integrations/SSO#support-and-troubleshooting","content":" For any questions or assistance, our support team is ready to help. Reach out with any concerns or if you require troubleshooting assistance. ","version":"Next","tagName":"h2"},{"title":"Visual Regression","type":0,"sectionRef":"#","url":"/docs/next/general/Integrations/visual-regression","content":"","keywords":"","version":"Next"},{"title":"Install jest-image-snapshot​","type":1,"pageTitle":"Visual Regression","url":"/docs/next/general/Integrations/visual-regression#install-jest-image-snapshot","content":" In your terminal, navigate into the folder where you initialized AskUI while following our Getting Started (Linux, macOS)  Install jest-image-snapshot as a dev-dependency  npm install --save-dev jest-image-snapshot   ","version":"Next","tagName":"h2"},{"title":"Integration​","type":1,"pageTitle":"Visual Regression","url":"/docs/next/general/Integrations/visual-regression#integration","content":" The package provides a function toMatchImageSnapshot which implements Jest's Matchers&lt;R&gt; interface making it a Jest matcher that can be used with Jest's expect().  You have to add this matcher to Jest with expect.extend like this in your workflow file (See the docs):  const { toMatchImageSnapshot } = require('jest-image-snapshot'); expect.extend({ toMatchImageSnapshot });   Now the only thing you have to provide for a regression test in your workflows is an image to the function expect() as Buffer:  expect(imageBuffer).toMatchImageSnapshot();   You can use AskUI to get the screenshot as a base64 encoded string. The string is in the format of a data URL. So you have to strip the scheme data:[&lt;mediatype&gt;][;base64], away because it is not a valid image with the scheme. Here is the full code:  const annotate = await aui.annotate(); const imageBase64 = annotate.image; // Strip away this: data:image/png;base64, // Not valid png -&gt; Only if used as a data URL let imageBuffer = Buffer.from( imageBase64.split('base64,')[1], 'base64'); expect(imageBuffer).toMatchImageSnapshot();   ","version":"Next","tagName":"h2"},{"title":"Get It to Work with TypeScript​","type":1,"pageTitle":"Visual Regression","url":"/docs/next/general/Integrations/visual-regression#get-it-to-work-with-typescript","content":" When you run this as it is you will get an error.  This is because Jest's typings in jest.d.ts do not include toMatchImageSnapshot.  Luckily TypeScript has a mechanism called Declaration Merging. When we create a file jest.d.ts in our project and declare our matcher there, TypeScript will pick it up.  declare namespace jest { interface Matchers { toMatchImageSnapshot(): CustomMatcherResult; } }   ","version":"Next","tagName":"h2"},{"title":"How Jest-Image-Snapshot Works​","type":1,"pageTitle":"Visual Regression","url":"/docs/next/general/Integrations/visual-regression#how-jest-image-snapshot-works","content":" Explanation from the repository:  Given an image (Buffer instance with PNG image data) the toMatchImageSnapshot() matcher will create an image_snapshots directory in the directory the test is in and will store the baseline snapshot image there on the first run. Note that if customSnapshotsDir option is given then it will store baseline snapshot there instead. On subsequent test runs the matcher will compare the image being passed against the stored snapshot. To update the stored image snapshot run Jest with --updateSnapshot or -u argument. All this works the same way as Jest snapshots.  You also want to check out the options you can provide to toMatchImageSnapshot() to fine-tune the behavior. For example you might want to set a threshold for a mismatch so that minimal differences do not fail a run:  expect(image).toMatchImageSnapshot({ failureThreshold: 0.01, failureThresholdType: 'percent' });  ","version":"Next","tagName":"h2"},{"title":"Text and Element Selectors","type":0,"sectionRef":"#","url":"/docs/next/general/Element Selection/text-and-element-selectors","content":"","keywords":"","version":"Next"},{"title":"Text Selectors​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#text-selectors","content":" When using AskUI for automated tests, text elements are playing a big role, since they typically appear more distinctively than other elements such as icons or text fields. Hence, knowing the benefits of using different text element-description can become critical in scaffolding a robust set of instructions.  AskUI provides four different element-descriptions to handle text elements:  containsText()withExactText()withText()withTextRegex()  For a convenient demonstration, we will use a Flutter web demo provided by Flutter.    ","version":"Next","tagName":"h2"},{"title":"Basic Text Matching​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#basic-text-matching","content":" The simplest way to interact with a text element is to use withText(). Go to the demo app page and run the code below:  await aui.moveMouseTo().text('matrial').exec(); await aui.mouseLeftClick().exec();     withText() tries to find a text that matches the whole sequence. In most cases, you will want to stick to this method, as it supports Fuzzy Matching and tolerates misspelled text. Note that the above example code has two typos. matrial doesn't match the text in the demo app, which is Material, although AskUI will find the text element that roughly matches the text on the screen.    ","version":"Next","tagName":"h3"},{"title":"Match a Sub-string within a Text​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#match-a-sub-string-within-a-text","content":" Even though the withText() is handy and quite reliable, you might face a case where you know only a fraction of the text element that you want to interact with. In such a case, containsText() is the element-description you might want to use:  await aui.moveMouseTo().text().containsText('Bottom').exec(); await aui.mouseLeftClick().exec();     Be aware that even if the containsText() also supports Fuzzy Matching, it won't match the whole sequence by just a few characters. Try to use this code with the given demo app:  // this will fail await aui.moveMouseTo().text().containsText('Bottm').exec();   You will notice that AskUI fails to match the given text Bottm, whereas this code will work:  // this will succeed await aui.moveMouseTo().text().containsText('Bottm appbar').exec(); // this will also succeed await aui.moveMouseTo().text().containsText('Bottom').exec();   The biggest difference between withText() and containsText() is whether it matches the text as a whole sequence or not. Matching many texts with a repeating affix could be a practical use case for the containsText().  It is recommended to experiment enough with these element-descriptions to find a better option that suits your specific case, since it's not easy to predict if the given text can be fuzzy-matched with target texts.    ","version":"Next","tagName":"h3"},{"title":"Match the Exact Text​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#match-the-exact-text","content":" If you already know what text you are looking for, or if there are too many similar text elements, you can use the element-description withExactText().  From the main page of the demo app, go to Material-&gt;Data tables. You will see a table with different foods given with nutrition factors for each of them.  Let's say that we want to click on the items that has exactly 25.0 gm of Fat. In our demo app, only the Doughnut is the matching item. Run this code and see how withText() matches the text:   // Use this helper function to calculate the centroid of the detected elements. function getCentroid(element: any): any { let x = (element.bndbox.xmax - element.bndbox.xmin) / 2.0 + element.bndbox.xmin; let y = (element.bndbox.ymax - element.bndbox.ymin) / 2.0 + element.bndbox.ymin; return { x: x, y: y }; } // Find all the text elements that matches '25.0' const elts = await aui.get().text('25.0').exec(); // Then, iterate through the found elements and click on them for(let i=0; i&lt;elts.length; ++i){ const centroid = getCentroid(elts[i]); await aui.moveMouse(Math.round(centroid.x), Math.round(centroid.y)).exec(); await aui.mouseLeftClick().exec(); }     You will see that AskUI clicks not only the 25.0 but also the 26.0, which is the fat of the Apple pie. The result of this test code may differ in your case, because of the different screen resolution and the rendered-size of the demo app.  It will give you a clear idea where you will need to use the element-description withExactText() instead of withText(). Try to run the same code after replacing the withText() to withExactText():  // Find all the text elements that matches '25.0' exactly const elts = await aui.get().text().withExactText('25.0').exec(); // Then, iterate through the found elements and click on them for(let i=0; i&lt;elts.length; ++i){ const centroid = getCentroid(elts[i]); await aui.moveMouse(Math.round(centroid.x), Math.round(centroid.y)).exec(); await aui.mouseLeftClick().exec(); }     ","version":"Next","tagName":"h3"},{"title":"Match Text with Regular Expression​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#match-text-with-regular-expression","content":" The element-description withTextRegex() supports Regular Expression to match any text in the most flexible way. Although it might be tricky to use regex due to its esoteric appearance, it is maybe one of the most versatile solutions when it comes to character matching.  On the same page of the demo app, let's say that we want to click on the items whose Calorie is between 300 and 500 (cal&gt;=300 &amp;&amp; cal&lt;500). Since regex doesn't support numeric comparison, we will try to match the digits in a sequence:  // Find all the text that matches the expression const cals = await aui.get().text().withTextRegex('[3-4][0-9]{2}').exec(); // Then, iterate through the found elements and click on them for(let i=0; i&lt;cals.length; ++i){ const coord = getCentroid(cals[i]); console.log(cals[i].text, coord); await aui.moveMouse(Math.round(coord.x), Math.round(coord.y)).exec(); await aui.mouseLeftClick().exec(); }     The regular expression [3-4][0-9]{2} means,  [3-4]: Match one character between 3 and 4.[0-9]: Match one character between 0 and 9.2: Repeat the previous expression ([0-9]) two times.  As the result, it will try to match every text that has a sequence starting with the digit 3 or 4, and then has any two digits in a row.  ","version":"Next","tagName":"h3"},{"title":"Element Selectors​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#element-selectors","content":" caution This page is currently under construction. If you have any questions, please feel free to reach out to info@AskUI.com or book a meeting with Jonas over Calendly.  ","version":"Next","tagName":"h2"},{"title":"Custom Elements​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#custom-elements","content":" caution Important: This increases the runtime quite a bit. So use it only if absolutely necessary.  ","version":"Next","tagName":"h2"},{"title":"Overview​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#overview","content":" Custom Element Selection is a feature in AskUI that enables you to create custom element-descriptions for elements on the screen, instead of relying on the standard element-descriptions provided such as Button, Textfield, etc.  With this feature, you can define a custom element-description based on how the element is displayed on the screen. This can be particularly useful in situations where standard element-descriptions are unreliable due to the non-standard properties of the element. It provides greater flexibility and control, allowing you to tailor the automation to meet the specific needs of your application.  Here we will demonstrate how to use a custom element to explore Google Street View.  ","version":"Next","tagName":"h3"},{"title":"Demonstration​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#demonstration","content":"   ","version":"Next","tagName":"h3"},{"title":"Requirements​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#requirements","content":" AskUI - Follow this tutorial if you haven't installed it yet.Web Browser - We use Safari in this demonstration, but you can use any web browser you have.  ","version":"Next","tagName":"h3"},{"title":"Understanding the customElement() in AskUI​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#understanding-the-customelement-in-askui","content":" customElement() is an element to look for on the screen that is defined by the user with a given image.  // Example of customElement() await aui .click() .customElement({ customImage: './logo.png', // required name: 'myLogo', // optional threshold: 0.9, // optional, defaults to 0.9 rotationDegreePerStep: 0, // optional, defaults to 0 imageCompareFormat: 'grayscale', // optional, defaults to 'grayscale' }) .exec();   Arguments​  customImage (string, required): A cropped image in the form of a base64 string or file path. name (string, optional): A unique name that can be used for filtering for the custom element. If not given, any text inside the custom image will be detected via OCR. threshold (number, optional): A threshold for how much a UI element needs to be similar to the custom element as defined. Takes values between 0.0 (== all elements are recognized as the custom element which is probably not what you want) and 1.0 (== elements need to look exactly like the customImage which is unlikely to be achieved as even minor differences count). Defaults to 0.9. rotationDegreePerStep (number, optional): Step size in rotation degree. Rotates the custom image by this step size until 360° is exceeded. The range is from 0 to 360. Defaults to 0. imageCompareFormat ('RGB' | 'grayscale', optional): The color compare style. grayscale compares the brightness of each pixel whereas RGB compares all three color. Defaults to grayscale.  Two Things to be Aware of When Using customElement()​  1) Create the Custom Image by Cropping it From The Actual Screen  To find a matching element from the screen, the custom image must be the same as it is displayed on the screen. By saying same in this sense, includes the size, rotation as well as the overlapping object, if there is any.    Note the left-bottom case of the illustration. A rotated element can be also matched, but only if everything else except the rotation are staying the same as it is displayed on the screen. If you can assure that your custom image is exactly the same as it is displayed on the screen + if you know the degree of the rotation, then you could consider using the rotationDegreePerStep parameter. And because AskUI will try to rotate the custom element for the whole revolution, a divisor of the rotated degree could be also used, e.g in the illustrated case, we can use not only 90 but also 45, 30, 15, etc. But since smaller degrees will require more iteration steps, it will increase the runtime by a notable amount. The simplest way to accomplish it might be to screen capture and crop the desired image from your screen directly. In Windows and macOS, you can use the built-in screen capture tool: Windows: Press windows + shift + s (Windows 10 or higher)macOS: Press cmd + shift + 4 In both cases, you will be asked to select a certain portion of the screen. On Windows, the captured image will be stored in the clipboard, so you will need to save it to an image file. On macOS, the image will be saved in the ~/Desktop by default.  tip The quality of the crop-out determines how good the element will be recognized. Make sure to: Save it as a PNG to avoid artifacts from compressionCrop it out as tight as possible. At best with no pixel space on the borders.  2) The Time of the Execution will Increase by a Notable Amount  To examine whether the custom image matches the given screen, AskUI iterates through the whole pixels of the given screen as well as the custom image. So it is likely to increase the runtime by a notable amount. Therefore, if the task could be accomplished with other element-descriptions such as icon(), button(), or text(), then it's maybe better to avoid using the customElement().  ","version":"Next","tagName":"h3"},{"title":"Capture the Custom Element​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#capture-the-custom-element","content":" In this demonstration, we will search for a certain area in Google Street View. This can be enabled by pressing a button at the right corner of the Google Maps:    Can you see the yellow tiny human in the corner? We need an image of this human figure to interact with it. Let's make a screen capture of it. It shall look like this: Then save the image in your project's root directory with the name human-figure.png. The file tree of your project's root directory will be like this:  project_root/ ├─ node_modules/ ├─ test/ ├─ package.json ├─ tsconfig.json ├─ human-figure.png   ","version":"Next","tagName":"h3"},{"title":"Write the AskUI Code​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#write-the-askui-code","content":" If you are prepared with the image above, let's jump into our code:  import { aui } from './helper/jest.setup'; describe('Explore the world in google maps', ()=&gt;{ it('open web browser and go to google maps', async ()=&gt;{ // open the start menu/spotlight to search for the web browser await aui.pressTwoKeys('command', 'space').exec(); // for macOS // await aui.pressKey('command').exec(); // for Windows await aui.waitFor(250).exec(); // wait for the start menu to open await aui.type('safari').exec(); // type the name of the web browser // await aui.type('chrome').exec(); // if you are using another web browser, replace the name to it await aui.pressKey('enter').exec(); // open the web browser await aui.waitFor(1000).exec(); // wait for the web browser to open await aui.type('https://maps.google.com').exec(); // type the url of the website await aui.pressKey('enter').exec(); // open the website await aui.waitFor(1000).exec(); // wait for the website to load }); it('search for a location', async ()=&gt;{ await aui.type('machu picchu').exec(); // type the name of the location await aui.pressKey('enter').exec(); // search for the location await aui.waitFor(2000).exec(); // wait for the map to load await aui.pressKey(',').exec(); // hide the side panel }); it('enable street view', async ()=&gt;{ // now we look for our custom element on the map // move the mouse to the custom element await aui.moveMouseTo() .customElement({ customImage: &quot;./human-figure.png&quot;, name: &quot;street-view-icon&quot;, threshold: 0.9, }) .exec(); // click and hold on the custom element await aui.mouseToggleDown().exec(); // drag the custom element(our human) to the location we want to explore // note the offset of -50 pixels along the y axis // we drag the human 10 pixels higher than the location Aguas Calientes await aui.moveMouseRelativelyTo(0, -10).text('Aguas Calientes').exec(); // release the mouse button await aui.mouseToggleUp().exec(); }); });   After successfully running the code, you will be able to see the landscape of Machu Picchu, the most iconic citadel of the lost empire Inca. It is possible that you end up with a plain Google Map without having the Street View enabled. It might be caused by various reasons, but the most likely scenario is due to the different resolutions of the screen (your display can have a different resolution than mine). You could try to adjust the amount of the pixel offset that is given to the moveMouseRelativelyTo(), for example, try with moveMouseRelativelyTo(-5, -15).  ","version":"Next","tagName":"h3"},{"title":"Breaking Down the Code​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#breaking-down-the-code","content":" 1) Open the Web Browser and Go To the Desired Website​  One notable part of this step is the waitFor() after each execution. We have used it in three different lines of this code block. Check out the respective parts and adjust the amount of time to wait until the process is finished. It may take more or less time depending on the condition of your device and internet connection:  it('open web browser and go to google maps', async ()=&gt;{ // open the start menu/spotlight to search for the web browser await aui.pressTwoKeys('command', 'space').exec(); // for macOS // await aui.pressKey('command').exec(); // for Windows await aui.waitFor(250).exec(); // wait for the start menu to open await aui.type('safari').exec(); // type the name of the web browser await aui.pressKey('enter').exec(); // open the web browser await aui.waitFor(1000).exec(); // wait for the web browser to open await aui.type('https://maps.google.com').exec(); // type the url of the website await aui.pressKey('enter').exec(); // open the website await aui.waitFor(1000).exec(); // wait for the website to load });   Also, don't forget to change the key to press and the name of the web browser based on your condition.  2) Search for the Location​  Here we type our desired keyword into the textfield of Google Maps. As the textfield gets focused automatically, we can directly type in the keyword to the textfield:  it('search for a location', async ()=&gt;{ await aui.type('machu picchu').exec(); // type the name of the location await aui.pressKey('enter').exec(); // search for the location await aui.waitFor(2000).exec(); // wait for the map to load await aui.pressKey(',').exec(); // hide the side panel });   Note that we also press the ,(comma) key to hide the side panel of Google Maps. This is for hiding unnecessary information from the screen.  ","version":"Next","tagName":"h3"},{"title":"Drag the Human Icon to the Desired Location​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#drag-the-human-icon-to-the-desired-location","content":" Finally, we drag our human, which we defined as our Custom Element, to the desired location.Firstly, we move the mouse cursor to our custom element.For dragging the mouse, we use the mouseToggleDown() to press-and-hold the mouse left button.After that, we move the mouse to the desired location.Thereafter, we use mouseToggleUp() to release the mouse button.  it('enable street view', async ()=&gt;{ // now we look for our custom element on the map // move the mouse to the custom element await aui.moveMouseTo() .customElement({ customImage: &quot;./human-figure.png&quot;, name: &quot;maps&quot;, threshold: 0.9, }) .exec(); // click and hold on the custom element await aui.mouseToggleDown().exec(); // drag the custom element(our human) to the location we want to explore // note the offset of -10 pixels in the y axis // we drag the human to 10 pixels higher than the location Aguas Calientes await aui.moveMouseRelativelyTo(0,-10).text('Aguas Calientes').exec(); // release the mouse button await aui.mouseToggleUp().exec(); });   Note the optional parameters for the customElement(), especially the threshold that is set to 0.9.This parameter can be set from 0.0 up to 1.0. 0.0 will consider every element on the screen as matched with the given image.1.0 will examine the given elements as strict as possible, so you might end up without any matching element found. So, the best scenario to set the threshold might be: Make the custom image to be as precise as possible (cropping from the screen). Keep the threshold relatively higher, but below 1.0  ","version":"Next","tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#conclusion","content":" If you plan to program an automation where you have elements with non-standard properties, you might want to consider using the custom element feature of AskUI. But as mentioned above, keep in mind that, as a trade-off, it consumes more time than other features. Taking it into account, using a custom element to interact with the given UI can be a huge help, especially if the element lacks standard properties such as tag or appearance.  If you got any issues while following this article, don't hesitate to ask for help in our Outverse-Community. We are more than glad to hear about your experience and help!  ","version":"Next","tagName":"h3"},{"title":"Recommended Practices​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#recommended-practices","content":" This page will give you examples of how to use AskUI efficiently and effectively.  ","version":"Next","tagName":"h2"},{"title":"General Considerations on Speed of Inference for Different Element-Descriptions​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#general-considerations-on-speed-of-inference-for-different-element-descriptions","content":" Submodel\tTasks\tSpeedObject Detector\tCommon elements, e.g. a button or textfield\tfast 🚀 Icon Classifier\tPredict the class of an icon, e.g., a user icon\tfast 🚀 Optical Character Recognition (OCR)\tRecognize text\tfast 🚀 Custom Element Detector\tSearch via an image inside the screen\tslow 🐌  Avoid Optical Character Recognition (OCR) on Too Many Element​  If you use containsText(), withText(), withExactText() or withTextRegex() OCR is applied to all elements detected on your screen. This can slow down AskUI. It is more efficient to narrow down the elements first. For example, if you want to click a button with a specific text you should select all buttons first.  // Do this await aui.click().button('See here').exec(); await aui.click().text('Sign in').exec(); // And NOT this await aui.click('See here').exec(); await aui.click('Sign in').exec();   Avoid Custom Element Detection if Possible​  If you use customElement() you are doing an image-in-image search. Use this sparingly only for specific custom elements as the execution time is slow!  // Do this await aui.click().button().withText('Login').exec(); await aui.click().text('Overview').exec(); // And NOT this await aui.click().customElement({ customImage: '.../login_button.png', name: 'login button', }).exec(); await aui.click().customElement({ customImage: '.../text_overview.png', name: 'overview button', }).exec();   ","version":"Next","tagName":"h3"},{"title":"Scrolling​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#scrolling","content":" When you use AskUI you can only interact with elements that you can see on your screen. Therefore you have to scroll down/sideways to interact with currently invisible elements.  Scrolling on Touch Displays​  On touch displays you have to recreate the swipe gesture:  // Touch the display with your finger, move finger to the left, release await aui.mouseToggleDown().exec() await aui.moveMouseRelatively(-1500, 0).exec() await aui.mouseToggleUp().exec()   Scrolling With Mouse Wheel​  If you want to scroll with your mouse wheel you can use the scroll() action:  // Scroll 10 down in y direction&lt;&gt; await aui.scroll(0, -10).exec()   Scrolling With Key Press​  If you want to scroll with a key press you could use your arrow keys (up, down, left, right ) or the pagedown-key.  // Press down arrow key await aui.pressKey('down').exec() // Press up arrow key await aui.pressKey('up').exec() // Scroll down a page await aui.pressKey('pagedown').exec() // Scroll up a page await aui.pressKey('pageup').exec()   ","version":"Next","tagName":"h3"},{"title":"Wait for an Element to Appear​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/next/general/Element Selection/text-and-element-selectors#wait-for-an-element-to-appear","content":" AskUI implements a conservative retry strategy to wait for an element to appear. But sometimes this is not long enough. You can wait for an element to appear with the following helper function:  // Retry the command 5 times with a // wait time of 2 seconds between each try async function waitUntil(AskUICommand: () =&gt; Promise&lt;void&gt;, maxTry = 5) { try { await AskUICommand(); } catch (error) { if (maxTry == 0) { throw error } console.log(`Retry predicting command, ${maxTry} tries left`) await aui.waitFor(2000).exec(); await waitUntil(AskUICommand, maxTry - 1) } } // Wait for the text 'Github' to be displayed await waitUntil( async () =&gt; aui.expect().text('Github').exists().exec() );  ","version":"Next","tagName":"h3"},{"title":"Reporting","type":0,"sectionRef":"#","url":"/docs/next/general/Integrations/reporting","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#installation","content":" Install @askui/askui-reporters as a dev-dependency:  npm install --save-dev @askui/askui-reporters   ","version":"Next","tagName":"h2"},{"title":"AskUIAllureStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#askuiallurestepreporter","content":" Add the reporter to the UiControlClient in jest.setup.ts:  import { AskUIAllureStepReporter } from &quot;@askui/askui-reporters&quot;; ... const reporterConfig: ReporterConfig = { withScreenshots: 'always', // See below for possible values withDetectedElements: 'always', // See below for possible values } aui = await UiControlClient.build({ reporter: new AskUIAllureStepReporter( reporterConfig ) }); ...   You can pass a ReporterConfig object to the reporter to configure the level of detail for screenshots and detected elements.  There are four possible values (See the @askui/askui-reporters README for a detailed explanation):  onFailure (Default for both)requiredbeginalways  ","version":"Next","tagName":"h2"},{"title":"Configure beforeEach() and afterEach() in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#configure-beforeeach-and-aftereach-in-jestsetupts","content":" The UiControlClient retrieves the videos and images from your UiController. You have to implement beforeEach() and afterEach() in jest.setup.ts to start the recording and then add it to your report:  Allure Reporter  beforeEach(async () =&gt; { await aui.startVideoRecording(); }); afterEach(async () =&gt; { await aui.stopVideoRecording(); const video = await aui.readVideoRecording(); await AskUIAllureStepReporter.attachVideo(video); });   ","version":"Next","tagName":"h3"},{"title":"Enable the Test Environment @askui/jest-allure-circus in jest.config.ts​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#enable-the-test-environment-askuijest-allure-circus-in-jestconfigts","content":" Install @askui/jest-allure-circus environment:  npm install --save-dev @askui/jest-allure-circus   import type { Config } from '@jest/types'; const config: Config.InitialOptions = { preset: 'ts-jest', setupFilesAfterEnv: ['./helper/jest.setup.ts'], sandboxInjectedGlobals: [ 'Math', ], // Enables the test environment for Allure testEnvironment: '@askui/jest-allure-circus', }; // eslint-disable-next-line import/no-default-export export default config;   ","version":"Next","tagName":"h3"},{"title":"AskUIJestHtmlStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#askuijesthtmlstepreporter","content":" info Due to restrictions of jest-html-reporters you can either have screenshots or video with this reporter but not both at the same time. For screenshots omit the beforeEach() and afterEach() hooks in jest.setup.ts. For video do not configure a reporter in your UiControlClient.  ","version":"Next","tagName":"h2"},{"title":"Install ffmpeg On Your System​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#install-ffmpeg-on-your-system","content":" To use this reporter you have to have ffmpeg installed on your system (including all necessary encoding libraries like libmp3lame or libx264).  Please follow the installation instructions for your system.  ","version":"Next","tagName":"h3"},{"title":"Enable Reporter in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#enable-reporter-in-jestsetupts","content":" Add the reporter to the UiControlClient in jest.setup.ts:  // Do not forget this import at the start of the file! import { AskUIJestHtmlStepReporter } from &quot;@askui/askui-reporters&quot;; ... aui = await UiControlClient.build({ reporter: new AskUIJestHtmlStepReporter({ withScreenshots: 'always' as const, // See below for possible values withDetectedElements: 'always' as const, // See below for possible values }) }); ...   You can pass a ReporterConfig object to the reporter to configure the level of detail for screenshots and detected elements:  onFailure (Default for both)requiredbeginalways  ","version":"Next","tagName":"h3"},{"title":"Configure beforeEach() and afterEach() in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#configure-beforeeach-and-aftereach-in-jestsetupts-1","content":" import path from &quot;path&quot;; import { AskUIJestHtmlStepReporter } from &quot;@askui/askui-reporters&quot;; beforeEach(async () =&gt; { await aui.startVideoRecording(); }); afterEach(async () =&gt; { await aui.stopVideoRecording(); const video = await aui.readVideoRecording(); await AskUIJestHtmlStepReporter.attachVideo(video); });   ","version":"Next","tagName":"h3"},{"title":"Enable the Jest-Html-Reporters in jest.config.ts​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#enable-the-jest-html-reporters-in-jestconfigts","content":" Install jest-html-reporters environment:  npm install --save-dev jest-html-reporters   import type { Config } from &quot;@jest/types&quot;; const config: Config.InitialOptions = { preset: &quot;ts-jest&quot;, testEnvironment: &quot;node&quot;, setupFilesAfterEnv: [&quot;./helper/jest.setup.ts&quot;], sandboxInjectedGlobals: [&quot;Math&quot;], reporters: [&quot;default&quot;, &quot;jest-html-reporters&quot;], }; // eslint-disable-next-line import/no-default-export export default config;   ","version":"Next","tagName":"h3"},{"title":"AskUIXRayStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#askuixraystepreporter","content":" info Due to restrictions this reporter only works when you run your workflows one after another (default for AskUI)!  ","version":"Next","tagName":"h2"},{"title":"Enable and Configure the AskUIXRayStepReporter in askui-helper.ts (former jest.setup.ts)​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#enable-and-configure-the-askuixraystepreporter-in-askui-helperts-former-jestsetupts","content":" You have to do a few things in your askui-helper.ts (former jest.setup.ts) to enable the AskUIXRayStepReporter:  info We will try to move this into the custom testEnvironment we provide.  Import the reporterInitialize the reporterAdd it to the UiControlClientModify before beforeEach() and afterEach() hook to create/finish TestEntriesAdd writing the report to afterAll() hook  import { UiControlClient, UiController } from 'askui'; /* 1 Import the reporter */ import { AskUIXRayStepReporter } from '@askui/askui-reporters'; ... /* 2 Initialize the reporter */ let xRayReporter = new AskUIXRayStepReporter({ withScreenshots: 'always', }); beforeAll(async () =&gt; { ... aui = await UiControlClient.build({ credentials: { workspaceId: '&lt;your workspace id&gt;', token: '&lt;your access token&gt;', }, /* 3 Enable reporter */ reporter: xRayReporter, }); await aui.connect(); }); /* 4 Create TestEntry with name of test from it-block */ beforeEach(async () =&gt; { xRayReporter.createNewTestEntry(global.testName); }); /* 4 Finish TestEntry with the test status */ afterEach(async () =&gt; { xRayReporter.finishTestEntry(global.testStatus); }); afterAll(async () =&gt; { /* 5 Writing the report */ await xRayReporter.writeReport(); aui.disconnect(); await uiController.stop(); }); export { aui };   ","version":"Next","tagName":"h3"},{"title":"Configure jest-xray-environment in jest.config.ts​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#configure-jest-xray-environment-in-jestconfigts","content":" For the AskUIXRayStepReporter step reporter to work properly you need a special testEnvironment that provides the names from the it-blocks used to create the JSON-Objects for each test. Configure the testEnvironment in your jest.config.ts as shown in the code below:  import type { Config } from '@jest/types'; const config: Config.InitialOptions = { preset: 'ts-jest', // This uses cjs module system // Replace cjs with esm if your project uses esm testEnvironment: '@askui/askui-reporters/dist/cjs/xray/jest-xray-environment.js', setupFilesAfterEnv: ['./helpers/askui-helper.ts'], sandboxInjectedGlobals: [ 'Math', ], reporters: [ &quot;default&quot;, &quot;jest-junit&quot; ] }; // eslint-disable-next-line import/no-default-export export default config;   ","version":"Next","tagName":"h3"},{"title":"AskUIAnnotationStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#askuiannotationstepreporter","content":" ","version":"Next","tagName":"h2"},{"title":"Enable and Configure the AskUIAnnotationStepReporter in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#enable-and-configure-the-askuiannotationstepreporter-in-jestsetupts","content":" import { AskUIAnnotationStepReporter, AnnotationLevel } from '@askui/askui-reporters'; ... aui = await UiControlClient.build({ ... reporter: new AskUIAnnotationStepReporter( // AnnotationLevel.ON_FAILURE, /* Uncomment and change to AnnotationLevel.ALL for reporting at every step */ // folderPath: &quot;report&quot;, /* Uncomment and change property for different folder */ // fileNameSuffix: &quot;_testStep_annotation&quot; /* Uncomment and change property for different file name suffix */ ), }); ...   AnnotationLevel is implemented as an enum. You have two options:  ON_FAILURE (Default Value): After a step failedALL: After every step  folderPath is the folder name, relative to the root of your project, the report-files will be saved to.  Default value: report  fileNameSuffix: The suffix for every report-file.  The generated report-filename has the following name convention: ** {YYYYYYMMDDTHHmmsssss}_{passed|failed}{fileNameSuffix}.html** Example: 20230922072153421_failed_testStep_annotation.html  ","version":"Next","tagName":"h3"},{"title":"Enable Multiple Reporters​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#enable-multiple-reporters","content":" You can enable multiple reporters simultaneously by passing an array of reporters in the reporter property like this:  aui = await UiControlClient.build({ reporter: [ new AskUIAnnotationStepReporter( AnnotationLevel.ALL, &quot;annotation_report&quot;, &quot;_annotation&quot; ), new AskUIJestHtmlStepReporter({ withScreenshots: 'always' as const, // See below for possible values withDetectedElements: 'always' as const, // See below for possible values }) ], });   caution The testEnvironment setting has to be the SAME for all reporters in the array! The following table shows which reporters can be enabled together.  \tAskUIAllureStepReporter\tAskUIJestHtmlStepReporter\tAskUIAnnotationStepReporter\tAskUIXRayStepReporterAskUIAllureStepReporter ❌\t❌\t❌ AskUIJestHtmlStepReporter\t❌ ✅\t✅ AskUIAnnotationStepReporter\t❌\t✅ ✅ AskUIXRayStepReporter\t❌\t✅\t✅\t  ","version":"Next","tagName":"h2"},{"title":"Implement Your Own Reporter​","type":1,"pageTitle":"Reporting","url":"/docs/next/general/Integrations/reporting#implement-your-own-reporter","content":" To write your own reporter you have to implement AskUI's Reporter interface. It offers three optional methods you can overwrite to adapt to your specific reporter framework:  export interface Reporter { config?: ReporterConfig; onStepBegin?(step: Step): Promise&lt;void&gt;; onStepRetry?(step: Step): Promise&lt;void&gt;; onStepEnd?(step: Step): Promise&lt;void&gt;; }   See the Example implementation for Allure on how that is used to extract the screenshot before/after each step and how to record a video of each step. ","version":"Next","tagName":"h2"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/docs/next/general/Troubleshooting","content":"","keywords":"","version":"Next"},{"title":"Pages​","type":1,"pageTitle":"Troubleshooting","url":"/docs/next/general/Troubleshooting#pages","content":" Cannot find Element ErrorJestLinuxWindowsmacOSproxyipv6Deprecated Endpoints  Support  Join our Outverse-Community to get help from fellow users and AskUI staff. ","version":"Next","tagName":"h2"},{"title":"Terminology","type":0,"sectionRef":"#","url":"/docs/next/general/Terminology","content":"Terminology Term\tMeaningaccess token\tGives you access to the AskUI inference in combination with your workspace id. Every access token has an expiry date and is assigned to exactly one workspace. action\tA method in the AskUI Control Client API that describes an action to be taken against the operating system. For example click(), type(). annotation\tMarked area around an element with metadata name, text, and bounding box coordinates. automation\tA system of multiple connected workflows. bounding box\tRectangle described by coordinates that describe an element's location. Displayed visually as red rectangle. credentials\tCombination of workspace id and access token living in the same workspace. element\tA user interface component which websites and blocks are build from. element-description\tA description for a UI element. In the AskUI Control Client API, for example, it is the coded description like button() or textfield().contains().text('Email'). inference\tThe process of annotating a user interface. inference server\tBackend which performs the inference. instruction\tSingle AskUI directive which usually has following parts: action + (optional)element-description. interactive annotation\tExploring the annotations of a user interface through an annotated screenshot. UI Controller\tService to control inputs and observe the visuals on the operating system. UI Control Client\tRetrieves the annotations from the inference server and uses the given instructions to execute inputs on the operating system through the UI Controller. User Portal\tIn the AskUI User Portal you can create access tokens for your workspace. workflow\tA set of instructions to complete a single task workspace\tEvery registered user has exactly one workspace. Every workspace can contain multiple access tokens. workspace id\tThe id of your workspace. Gives you access to the AskUI inference in combination with your access token.","keywords":"","version":"Next"},{"title":"Cannot Find Element Error","type":0,"sectionRef":"#","url":"/docs/next/general/Troubleshooting/cannot_find_element_error","content":"","keywords":"","version":"Next"},{"title":"Use Interactive Annotation to Debug​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/next/general/Troubleshooting/cannot_find_element_error#use-interactive-annotation-to-debug","content":" When you develop an automation you can use interactive annotation to extract filters as described on our interactive annotation page.  This gif illustrates the process:  If an element-description derived through this method does not work you may run the interactive annotation again and check if AskUI gives you the same element-description. Sometimes elements are hard to identify correctly, like icons or specific fonts. Read the next sections on how to tackle this 🙂  ","version":"Next","tagName":"h2"},{"title":"Selecting Icons​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/next/general/Troubleshooting/cannot_find_element_error#selecting-icons","content":" There are millions of different icon sets out there. Detecting them all reliable is nearly impossible.  You can use three strategies to make your instructions more stable.  ","version":"Next","tagName":"h2"},{"title":"1. Use Relative Element-Descriptors​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/next/general/Troubleshooting/cannot_find_element_error#1-use-relative-element-descriptors","content":" Often there is text near a specific icon. You can use this to your advantage, like in the following example, where the icon below a specific text is clicked. See our guide about relational element-descriptors to understand how those work:  await aui .click() .icon() .below() .text() .withText('Please Enter your Name').exec();   ","version":"Next","tagName":"h3"},{"title":"2. Use Generic Element-Descriptor​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/next/general/Troubleshooting/cannot_find_element_error#2-use-generic-element-descriptor","content":" It could be the case that the target element is not detected correctly, e.g, an icon could possibly be detected as a toggle or checkbox and vice versa. In such cases, the generic element-descriptor element() could be a good option.  Be aware that element() alone specifies no particular property. It is recommended to be used in conjunction with a relational element descriptor:  await aui .click() .element() .below() .text() .withText('Please Enter your Name').exec();   This method is not restricted to icon elements, but can also be used for a wide range of elements.  ","version":"Next","tagName":"h3"},{"title":"3. Use Custom Element Selection​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/next/general/Troubleshooting/cannot_find_element_error#3-use-custom-element-selection","content":" Custom element selection is your last resort because it is slow as it uses image-in-image search. Check out our Google Street View Tutorial to see how you can make use of it.  ","version":"Next","tagName":"h3"},{"title":"Selecting Image​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/next/general/Troubleshooting/cannot_find_element_error#selecting-image","content":" Images are supposed to have a very certain visual property.  An image is expected to have a color contrasting against the background.An image is expected to have a rectangular shape. (rounded corner in a certain degree can be accepted)  Generally speaking, everything on the screen can be an image. For example, icons on a website are actually images. But in terms of visual semantics, we don't deal with the notion of image in general. So it is worth knowing that the above two conditions are critical when using the image() descriptor.  ","version":"Next","tagName":"h2"},{"title":"Selecting Text​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/next/general/Troubleshooting/cannot_find_element_error#selecting-text","content":" OCR is tricky and we are working hard to improve it. But you will encounter cases where some text may not be recognized reliably depending on the font size, style or typeface:  ","version":"Next","tagName":"h2"},{"title":"1. Missing Whitespaces Between Words​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/next/general/Troubleshooting/cannot_find_element_error#1-missing-whitespaces-between-words","content":" You can guard against missing whitespaces with withTextRegex():  // Use [\\\\s]{0,1} as a replacement for whitespace await aui .click() .text() .withTextRegex('your[\\\\s]{0,1}name').exec();   ","version":"Next","tagName":"h3"},{"title":"2. Cut off characters at the start/end​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/next/general/Troubleshooting/cannot_find_element_error#2-cut-off-characters-at-the-startend","content":" For cut-off characters you can omit the first/last character:  // Omit first and last character of 'your name' await aui .click() .text() .withText('your name').exec();   ","version":"Next","tagName":"h3"},{"title":"Missing Permissions for UiController on macOS​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/next/general/Troubleshooting/cannot_find_element_error#missing-permissions-for-uicontroller-on-macos","content":" AskUI controls your operating system and macOS is very restrictive in giving access to third-party applications (which is a good thing actually!). The AskUI UiController needs to be given access for Screen Recording and Accessibility. See our troubleshooting macOS page. ","version":"Next","tagName":"h2"},{"title":"Deprecated Endpoints","type":0,"sectionRef":"#","url":"/docs/next/general/Troubleshooting/deprecated-endpoints","content":"Deprecated Endpoints If you are using the AskUI library you may see this warning: This endpoint will deprecate. Please upgrade your AskUI version This means that you are using an AskUI version, which will stop working in the near future. You can upgrade your AskUI version with the following command: npm install askui@latest If this does not work, try the following steps: Delete your node_modules folderCheck the latest version of askui in your package.json3 Run npm install to reinstall AskUI","keywords":"","version":"Next"},{"title":"IPv6","type":0,"sectionRef":"#","url":"/docs/next/general/Troubleshooting/ipv6","content":"IPv6 By default, the UI Controller which the AskUI lib starts and interacts with (you can also start it manually) is started at IP address 127.0.0.1 (IPv4 IP address that localhost normally resolves to). To use IPv6, e.g., because you disabled IPv4, you need to start the UI Controller manually from the command line providing --host ::1 (assuming you want to use IP address ::1, otherwise provide a different address) and provide the uiControllerUrl when constructing the UiControlClient (by default, in the &lt;project_dir&gt;/test/helpers/askui-helper.ts): aui = await UiControlClient.build({ uiControllerUrl: 'http://[::1]:6769', // other client args... }); For example, starting the UI Controller (version latest, for other versions replace the respective part of the path) on macOS from your project's root directory is done like this: ./node_modules/askui/dist/release/latest/darwin/askui-ui-controller.app --args --host ::1 On other operating systems the path is different: # Windows start ./node_modules/askui/dist/release/latest/win32/askui-ui-controller.exe --args --host ::1 # Linux ./node_modules/askui/dist/release/latest/linux/askui-ui-controller --args --host ::1 ","keywords":"","version":"Next"},{"title":"Jest","type":0,"sectionRef":"#","url":"/docs/next/general/Troubleshooting/jest","content":"","keywords":"","version":"Next"},{"title":"Global Hooks Not Executed or Executed in Wrong Order​","type":1,"pageTitle":"Jest","url":"/docs/next/general/Troubleshooting/jest#global-hooks-not-executed-or-executed-in-wrong-order","content":" If you use Jest's global hooks like before*() and after*() that do no reside inside a describe-block you may run into the following issues:  Hooks are not executed at allHooks are executed in wrong order  The solution is to stop using global hooks and do your setup inside a describe-block. Please also consult Jest's docs for a detailed explanation.  /* * DO NOT DO THIS! */ beforeAll(() =&gt; console.log('1 - beforeAll')); // won't work reliably afterAll(() =&gt; console.log('1 - afterAll')); // won't work reliably beforeEach(() =&gt; console.log('1 - beforeEach')); // won't work reliably afterEach(() =&gt; console.log('1 - afterEach')); // won't work reliably it('', () =&gt; console.log('1 - test')); /* * DO THIS INSTEAD */ describe('Scoped / Nested block', () =&gt; { beforeAll(() =&gt; console.log('2 - beforeAll')); // works afterAll(() =&gt; console.log('2 - afterAll')); // works beforeEach(() =&gt; console.log('2 - beforeEach')); // works afterEach(() =&gt; console.log('2 - afterEach')); // works it('', () =&gt; console.log('2 - test')); describe('More deeply scoped / nested block', () =&gt; { beforeAll(() =&gt; console.log('3 - beforeAll')); // works afterAll(() =&gt; console.log('3 - afterAll')); // works beforeEach(() =&gt; console.log('3 - beforeEach')); // works afterEach(() =&gt; console.log('3 - afterEach')); // works it('', () =&gt; console.log('3 - test')); }); });   ","version":"Next","tagName":"h2"},{"title":"Termination Error​","type":1,"pageTitle":"Jest","url":"/docs/next/general/Troubleshooting/jest#termination-error","content":" Jest sometimes has problems terminating correctly. If this happens, you can see the following error message:  Jest did not exit one second after the test run has completed. This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.   As described in the error message Jest has problems stopping because of some processes which are still running. This can cause problems in your CI/CD pipeline because your pipeline can't continue after getting this error.  A solution is to force Jest to stop. For this case Jest provides the --forceExit flag:  npx jest --config ./test/jest.config.ts --forceExit  ","version":"Next","tagName":"h2"},{"title":"Linux","type":0,"sectionRef":"#","url":"/docs/next/general/Troubleshooting/linux","content":"","keywords":"","version":"Next"},{"title":"Wayland​","type":1,"pageTitle":"Linux","url":"/docs/next/general/Troubleshooting/linux#wayland","content":" We do not yet support the windowing system Wayland for any Linux distribution. So you are going to see multiple errors when trying to run AskUI instructions or may not even be able to start the UI Controller.  You can check if you are running on Wayland with  echo $XDG_SESSION_TYPE   If it says &quot;wayland&quot;, you guessed it, you are running on Wayland.  As a solution, you can switch to Xorg instead of Wayland (how to switch to Xorg).  ","version":"Next","tagName":"h2"},{"title":"libfuse2​","type":1,"pageTitle":"Linux","url":"/docs/next/general/Troubleshooting/linux#libfuse2","content":" If you are using Ubuntu 22.04 or later, you need to install libfuse before using AskUI lib since it's no longer installed by default.  libfuse2 can be installed with:  sudo apt-get update sudo apt-get install libfuse2  ","version":"Next","tagName":"h2"},{"title":"macOS","type":0,"sectionRef":"#","url":"/docs/next/general/Troubleshooting/mac-os","content":"","keywords":"","version":"Next"},{"title":"Elements Can't Be Found / Annotated Screen Empty / UI Controller not starting​","type":1,"pageTitle":"macOS","url":"/docs/next/general/Troubleshooting/mac-os#elements-cant-be-found--annotated-screen-empty--ui-controller-not-starting","content":"   Our UiController needs the permission for Screen Recording and Accessibility on macOS.  Here is a step-by-step guide on how to fix missing permissions:  Head over to System Preferences &gt; Security &amp; Privacy. Open the Privacy tab and check if you can find the askui-ui-controller under Screen Recording and Accessibility (See next picture for reference).    1.1 If askui-ui-controller does NOT have the permissions, give it to it and restart your workflow. Make sure to reopen your terminal you run workflow from. If it still does not work go on with step 1.2 below.  1.2. If askui-ui-controller has the permissions, revoke them by unchecking the corresponding checkboxes and removing the application from each list by clicking the minus (-) button.  By default AskUI starts the UiController in the background which sometimes messes up the permissions. Now you will start the UiController manually which triggers the permission prompt of macOS. Therefore you need to execute the UiController executable that was downloaded into your AskUI project when you ran your workflow. Head over to the folder where your initialized AskUI. Navigate to node_modules/askui/dist/release/&lt;version&gt;/darwin.&lt;version&gt; may be latest or a semantic version like v0.8.0. In there, you should find a ``askui-controller.appdirectory which is your installation of the AskUI UI Controller. Open theaskui-controller.app` directory in your Finder by right-clicking it and select Reveal in Finder (See screenshot below). Then start it by double-clicking it in the Finder.    The application should ask for Screen Recording permissions which you have to grant for it to work.  We are actively searching for a solution to improve the current state of affairs but Apple does not make it easy (which is good for your privacy but not so much for automation frameworks). But be sure that we keep trying!  ","version":"Next","tagName":"h2"},{"title":"Mouse Cursor Not Moving as Expected​","type":1,"pageTitle":"macOS","url":"/docs/next/general/Troubleshooting/mac-os#mouse-cursor-not-moving-as-expected","content":" Apple devices that have a display manufactured by Apple, i.e., Macbook, iMac have a so-called Retina Display, and they have a higher pixel density.  To use the actions such as moveMouse() or moveMouseRelatively(), the coordinates should be doubled in order to move the mouse cursor as expected.  For example, let's say that your screen resolution is of 1920x1080. If you want to move the mouse cursor to the middle of the screen, the correct numeric arguments are as such:  await aui.moveMouse(1920,1080).exec();   The coordinate of the middle of the screen is (960,540). But if you use these numbers, it will move the cursor only half of the expected distance. ","version":"Next","tagName":"h2"},{"title":"Tutorials","type":0,"sectionRef":"#","url":"/docs/next/general/Tutorials","content":"","keywords":"","version":"Next"},{"title":"🤖 Android​","type":1,"pageTitle":"Tutorials","url":"/docs/next/general/Tutorials#-android","content":" Web Search on Android Go to Tutorial Flutter Android App Go to Tutorial  ","version":"Next","tagName":"h2"},{"title":"🕸️ Browser​","type":1,"pageTitle":"Tutorials","url":"/docs/next/general/Tutorials#️-browser","content":" Google Cat Search Go to Tutorial Online Shop Go to Tutorial  ","version":"Next","tagName":"h2"},{"title":"💻 Desktop​","type":1,"pageTitle":"Tutorials","url":"/docs/next/general/Tutorials#-desktop","content":" Spotify Like Go to Tutorial ","version":"Next","tagName":"h2"},{"title":"Windows","type":0,"sectionRef":"#","url":"/docs/next/general/Troubleshooting/windows","content":"","keywords":"","version":"Next"},{"title":"AskUI Remote Device Controller Not Responding to Instructions​","type":1,"pageTitle":"Windows","url":"/docs/next/general/Troubleshooting/windows#askui-remote-device-controller-not-responding-to-instructions","content":" A possible solution is to start the AskUI Remote Device Controller as administrator:  Right-Click the application and click Run as administrator  Background: When you start the AskUI Remote Device Controller and during the execution another process is started AND it is an admin process, the controller stops executing instructions.  ","version":"Next","tagName":"h2"},{"title":"Execution Policy in PowerShell Blocks Commands​","type":1,"pageTitle":"Windows","url":"/docs/next/general/Troubleshooting/windows#execution-policy-in-powershell-blocks-commands","content":" When you try to execute commands inside PowerShell it may not be possible due to a restrictive Execution Policy.  You can set the Execution Policy inside the PowerShell with the following command if you have the necessary permissions:  Set-ExecutionPolicy unrestricted   ","version":"Next","tagName":"h2"},{"title":"AskUI UI Controller​","type":1,"pageTitle":"Windows","url":"/docs/next/general/Troubleshooting/windows#askui-ui-controller","content":" On Windows, the AskUI UI Controller may not terminate after each execution. This may lead to problems when using the AskUI UI Controller in a pipeline like a pipeline's run not coming to an end.  In this case you can force termination of the AskUI UI Controller. The UiController.stop() takes an optional boolean argument which is set to false by default. If we pass true to the UiController.stop() method, e.g., uiController.stop(true), we kill the AskUI UI Controller process.  await uiController.stop(true);   If you are using the Jest framework to execute your instructions, you can also force Jest to exit as described on our Jest-Troubleshooting page. This option terminates all processes which were set up and didn't close properly. The first option explicitly stops the AskUI UI Controller. ","version":"Next","tagName":"h2"},{"title":"Proxy","type":0,"sectionRef":"#","url":"/docs/next/general/Troubleshooting/proxy","content":"","keywords":"","version":"Next"},{"title":"Installing AskUI Through NTLM or Kerberos Proxy Server​","type":1,"pageTitle":"Proxy","url":"/docs/next/general/Troubleshooting/proxy#installing-askui-through-ntlm-or-kerberos-proxy-server","content":" A Windows New Technology LAN Manager (NTLM) or Kerberos proxy requires you to authenticate yourself. This is done via your currently logged in Windows user or the username/password combination (Linux, macOS). The easiest way to do this is to install a local proxy that handles the handshake with the proxy for you.  ","version":"Next","tagName":"h2"},{"title":"Install Local Proxy​","type":1,"pageTitle":"Proxy","url":"/docs/next/general/Troubleshooting/proxy#install-local-proxy","content":" We recommend Px as a local proxy. Install it in your preferred way and start it. The default port it runs on is 3128.  tip Choose the binary option if a package manager is not feasible in your environment.  ","version":"Next","tagName":"h3"},{"title":"Windows Startup​","type":1,"pageTitle":"Proxy","url":"/docs/next/general/Troubleshooting/proxy#windows-startup","content":" You can add Px to the startup for the binary zipped option in Windows like this:  Create a px-start.bat file within the unzipped folder, e.g., c:\\tools\\px with the content: cd c:\\tools\\px (or whatever path you unzipped the archive to) px.exe Double-Click on the px-start.bat file to start Px Optional: Set up Px to autostart on system startup so you don’t have to start it manually each time you want to use it Create a link to px-start.batOpen the startup folder with Windows logo key + R, enter shell:startupMove the link to px-start.bat into this folder  ","version":"Next","tagName":"h3"},{"title":"Create .npmrc file for npm​","type":1,"pageTitle":"Proxy","url":"/docs/next/general/Troubleshooting/proxy#create-npmrc-file-for-npm","content":" Create a .npmrc file in your AskUI project. You want to make sure that:  registry and noproxy point to your companies registry (i.e. Artifactory)proxy and https-proxy point to the local Px proxy  registry=&lt;company-registry-url&gt; proxy=http://127.0.0.1:3128 https-proxy=http://127.0.0.1:3128 noproxy=&lt;company-registry-url&gt;   ","version":"Next","tagName":"h3"},{"title":"Set Environment Variables​","type":1,"pageTitle":"Proxy","url":"/docs/next/general/Troubleshooting/proxy#set-environment-variables","content":" Setting the proxy inside .npmrc does not cover all cases. Sometimes a separate node command spawns a new process which does not inherit the proxy settings. Therefore you need to set the environment variable HTTPS_PROXY like this:  Windows instructions  # Linux and macOS # Add it to your favourite shell # at startup if necessary export HTTPS_PROXY=http://127.0.0.1:3128   ","version":"Next","tagName":"h3"},{"title":"UiController Connection to AskUI Inference​","type":1,"pageTitle":"Proxy","url":"/docs/next/general/Troubleshooting/proxy#uicontroller-connection-to-askui-inference","content":" We describe two ways to connect to our backend AskUI Inference.  ","version":"Next","tagName":"h2"},{"title":"Using Default Configuration with hpagent​","type":1,"pageTitle":"Proxy","url":"/docs/next/general/Troubleshooting/proxy#using-default-configuration-with-hpagent","content":" Per default, our library uses hpagent to support the use of HTTP and HTTPS proxies. hpagent is an open source package which provides HTTP(S) proxies that keeps connections alive. To use it, you need to  install hpagent  npm install --save-dev hpagent   configure which proxies to use by setting the proxies' URLs using the environment variables HTTP_PROXY or HTTPS_PROXY  export HTTP_PROXY=http://&lt;your-proxy-url&gt; export HTTPS_PROXY=https://&lt;your-proxy-url&gt;   ","version":"Next","tagName":"h3"},{"title":"Manually Configuring the HTTP and HTTPS Agent​","type":1,"pageTitle":"Proxy","url":"/docs/next/general/Troubleshooting/proxy#manually-configuring-the-http-and-https-agent","content":" If you need even more control, you can also configure an HTTP agent and HTTPS agent supporting your proxy manually for either one or both,  the UI Controller (configuring the UiController) running on the OS you would like to control andthe Inference API (configuring the UiControlClient) running on our servers and providing the vision to run your tests.  In the following example we are going to use hpagent again but you can use any HTTP and HTTPS agents that support proxies, e.g., the http.Agent or the https.Agent provided by the http and https module of Node.js, respectively.  Install hpagent  npm install --save-dev hpagent   Import hpagent (or the agent(s) you would like to use) and configure the UiController and/or the UiControlClient inside the test/helpers/askui-helper.ts file.  import { HttpProxyAgent, HttpsProxyAgent } from 'hpagent'; // &lt;-- Add imports // other code beforeAll(async () =&gt; { // Add this block const httpProxyUrl = &quot;http://&lt;your-proxy-url&gt;&quot; // &lt;-- Adapt http proxy url const httpsProxyUrl = &quot;https://&lt;your-proxy-url&gt;&quot; // &lt;-- Adapt https proxy url const proxyAgents = { http: new HttpProxyAgent({ proxy: httpProxyUrl, }), https: new HttpsProxyAgent({ proxy: httpsProxyUrl, }), } // other code uiController = new UiController({ proxyAgents // &lt;-- Set proxy agents }); // other code aui = await UiControlClient.build({ proxyAgents // &lt;-- Set proxy agents }); // other code })   Here are some example for the httpProxyUrl (for more details see docs from hpagent)  Proxy Type\tURL\tDescriptionHTTP\te.g. http://proxy.company.com:8293\tA HTTP proxy without authentication HTTP + Basic Auth\te.g. http://username:password@proxy.company.com:8293\tA HTTP proxy with authentication SOCKET Socket proxies are not supported by hpagent  Here are some example for the httpsProxyUrl (for more details see docs from hpagent)  Proxy Type\tURL\tDescriptionHTTPS\te.g. https://proxy.company.com:8293\tA HTTPS proxy without authentication HTTPS + Basic Auth\te.g. https://username:password@proxy.company.com:8293\tA HTTP proxy with authentication. SOCKET Socket proxies are not supported by hpagent  ","version":"Next","tagName":"h3"},{"title":"Deep Package Inspection​","type":1,"pageTitle":"Proxy","url":"/docs/next/general/Troubleshooting/proxy#deep-package-inspection","content":" Company proxies, like Zscalar, use deep package inspection to analyze the network traffic. Such proxies are adding self-signed certificates to the HTTPS request to break up the TLS connection.  This can result in the following error messages:   RequestError: self signed certificate   or   RequestError: unable to verify the first certificate   There are multiple options to deal with this:  Deactivate TLS certificate validation (NOT RECOMMENDED)​  This option deactivates the TLS validation (see here) and is not recommended. Only for testing!  Windows:  set NODE_TLS_REJECT_UNAUTHORIZED 0   macOS/Unix:  export NODE_TLS_REJECT_UNAUTHORIZED=0   Add Self-Signed Certificate as Extra CA Certs (RECOMMENDED)​  The other option is to add the self-signed certificate as extra certificates for Node.js.  Get the certificate and convert it to a .pem file, e.g., by exporting it with Chrome.Set the NODE_EXTRA_CA_CERTS with the following commands:  Windows:  set NODE_EXTRA_CA_CERTS '&lt;path&gt;\\&lt;cert&gt;.pem'   macOS/Unix:  export NODE_EXTRA_CA_CERTS='&lt;path&gt;/&lt;cert&gt;.pem'   Additional information:  Get Zscalar custom certificate ","version":"Next","tagName":"h3"},{"title":"Google Cat Image Search","type":0,"sectionRef":"#","url":"/docs/next/general/Tutorials/google-cat-search","content":"","keywords":"","version":"Next"},{"title":"Setup​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/next/general/Tutorials/google-cat-search#setup","content":" Follow one of the two options under Start to install AskUIOpen a Chrome browser window on your screen If you have multiple screens, configure the used display by setting the display variable in test/helpers/askui-helper.ts  ","version":"Next","tagName":"h2"},{"title":"Setting Up AskUI​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/next/general/Tutorials/google-cat-search#setting-up-askui","content":" 💭 Let’s say we’re on google.com and we want to search for an image of a cat and then download it to our computer.  First, we break this task down into steps that a user would take. Then we can recreate those steps with AskUI instructions in code.  Go to Google Search pageGo to google imagesType “cat” in the search barSelect imageRight-click + save the image  Let us first get an annotated screenshot, where all of the on-screen elements are enclosed within annotated bounding boxes. This will help us select the correct elements with our instructions.  Open the file test/my-first-askui-test-suite.test.ts and replace the it-code block starting in line 4 with the following code:  it('annotate', async () =&gt; { await aui.annotate() });   Run the code from your terminal to create an annotated screenshot. A folder report in your project folder will appear.  npm run askui   If you want to annotate interactively change it to the following:  it('annotate', async () =&gt; { // Hit 'Esc' to stop the annotation // when you are done await aui.annotateInteractively() });   📌 The annotations are basically the substitute for IDs in selector-based frameworks. You can click on them to copy them into your clipboard.  If you are having problems with the execution, have a look at our Troubleshooting page.  ","version":"Next","tagName":"h2"},{"title":"Writing and Debugging an AskUI Workflow​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/next/general/Tutorials/google-cat-search#writing-and-debugging-an-askui-workflow","content":" Now we can start to write our workflow, by locating the elements and then executing an instruction on them. Remember the steps, that we wanted to recreate?  Go to Google Search pageGo to google imagesType “cat” in the search barSelect imageRight-click + save the image  tip Make sure to open your browser on the configured display before the execution and move your mouse over the browser window immediately after starting the execution!  In the end, your code for the workflow looks like this.  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should find a cat image and save it', async () =&gt; { // Make sure the browser window has focus await aui.mouseLeftClick().exec(); // Open a new tab with keyboard shortcut // MacOS: command + t // Windows: control + T // Linux: control + t await aui .pressTwoKeys('command', 't') .exec(); // type google.com into browser bar await aui .typeIn('google.com') .text() .withText('Search Google or type a URL') .exec(); // Hit enter key await aui .pressKey('enter') .exec(); // Click the Images-text to the right of Gmail await aui .click() .text().withTextRegex(&quot;Image*&quot;) .rightOf() .text(&quot;Gmail&quot;) .exec(); // Type in cat into search field // Notice: withText does not have to be 100% equal await aui .typeIn(&quot;cat&quot;) .textfield() .contains() .icon().withText('microphone') .exec(); await aui .pressKey('enter') .exec(); // HINT // withText might need to be changed depending // on your search results! await aui .moveMouseTo() .image() .above() .text() .withText(&quot;pet guru Yuki Hattori explaiinICats&quot;) .exec(); // Save the image with right click await aui .mouseRightClick() .exec() // Find the right dialog entry await aui .click() .text() .withText('save image as') .exec(); // Save it // If it does not work because the button is not found // Remove the '.button()' await aui .click() .button() .withText(&quot;Save&quot;) .exec(); }); });   ","version":"Next","tagName":"h2"},{"title":"Debugging​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/next/general/Tutorials/google-cat-search#debugging","content":" It’s possible that you’ll run into problems with locating elements. For example, when creating the tutorial, we first tried to locate the image nearest to the image title, like this:  await aui .moveMouseTo() .image() .nearestTo() .text() .withText(&quot;pet guru Yuki Hattori explaiinICats&quot;) .exec()   But it turns out, that our model uses a different metric for measuring distance between elements, which is why our workflow failed the first time. Then we substituted this function for above(), which fixed the problem for us.  Another problem regarding font-size occurred with the Images button. The model recognized Image with an s missing at the end. That is why we switched from _withText('Images') to withTextRegex('Image*').  await aui .click() .text().withTextRegex(&quot;Image*&quot;) .rightOf() .text(&quot;Gmail&quot;) .exec();   It is always a good idea to try to play around with the functions and see if you can tackle the problem from a different angle.  If you have a recurring or persisting issue, don’t hesitate to ask the community for help. You can be sure that your questions will be answered there. We’re excited to hear about how you apply AskUI to your projects.  If you have any feature requests, please feel free to post them in our Featurebase board.  Best regards and happy automating! ","version":"Next","tagName":"h2"},{"title":"Web Search on Android","type":0,"sectionRef":"#","url":"/docs/next/general/Tutorials/android-search-in-browser","content":"","keywords":"","version":"Next"},{"title":"Requirements​","type":1,"pageTitle":"Web Search on Android","url":"/docs/next/general/Tutorials/android-search-in-browser#requirements","content":" Android Studio or Android SDK Command-line Tools installed (See Setup Android tutorial).(optional) Android device, if you want to run your app on a real device.    ","version":"Next","tagName":"h2"},{"title":"1. Prepare the AskUI Development Environment​","type":1,"pageTitle":"Web Search on Android","url":"/docs/next/general/Tutorials/android-search-in-browser#1-prepare-the-askui-development-environment","content":" ","version":"Next","tagName":"h2"},{"title":"Install and initialize AskUI​","type":1,"pageTitle":"Web Search on Android","url":"/docs/next/general/Tutorials/android-search-in-browser#install-and-initialize-askui","content":" Please follow the Getting Started tutorial.  Configure AskUI for Android  We need to run the UiController manually with an extra argument to specify the runtime mode, as the current version of AskUI doesn't provide the API for running it with the runtime option yet:  # first, go to the folder that contains the binary cd &lt;YOUR_PROJECT_DIRECTORY&gt;/node_modules/askui/dist/release/latest/&lt;YOUR_PLATFORM&gt; # for example, Mac OS cd node_modules/askui/dist/release/latest/darwin/askui-ui-controller.app/Contents/MacOS/ # then run it ./askui-ui-controller -r android # If you can't find the binary as described above, # then you might have AskUI freshly installed and haven't run it yet. # The binary gets downloaded as the AskUI code runs the first time. # Run the command below to run the AskUI code: npm run askui   If the UiController starts, it will display the log of it on the shell. We can leave it in the background, and prepare a new terminal window for the next step.  💡If you got any errors after running the binary, please check if your android device/emulator is properly connected and recognized by the Android Debug Bridge adb by using this command: adb devices. You should see a list of recognized devices.  Next, we have to change a few lines of the generated code, as the code ships with the part that creates another UiController instance.  Go to helper/jest.setup.ts and comment out every line that is using uiController:  import { UiControlClient, UiController } from 'askui'; // Server for controlling the operating system // let uiController: UiController; // Client is necessary to use the askui API // eslint-disable-next-line import/no-mutable-exports let aui: UiControlClient; jest.setTimeout(60 * 1000 * 60); beforeAll(async () =&gt; { // uiController = new UiController({ // /** // * Select the display you want to run your tests on, display 0 is your main display; // * ignore if you have only one display // */ // display: 0, // }); // await uiController.start(); aui = await UiControlClient.build({ credentials: { workspaceId: myworkspaceid, token: mytoken, } }); await aui.connect(); }); afterAll(async () =&gt; { // await uiController.stop(); aui.disconnect(); }); export { aui };     ","version":"Next","tagName":"h3"},{"title":"2. Try Annotating​","type":1,"pageTitle":"Web Search on Android","url":"/docs/next/general/Tutorials/android-search-in-browser#2-try-annotating","content":" Make sure that your Android device is connected, or if you are using the Android Emulator, make sure that it is open and running on your local machine.  AskUI provides a feature where you can monitor how the visible elements are understood by AskUI. Try to change the code within test/my-first-askui-test-suite.test.ts to the following:  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should show the annotation', async () =&gt; { await aui.annotateInteractively(); }); });   and run,  npm run askui     💡 Annotation is InteractiveTry to hover your mouse on the red bounding box. It will let you know how to manipulate that element via AskUI  ","version":"Next","tagName":"h2"},{"title":"3. Automate Web Searching​","type":1,"pageTitle":"Web Search on Android","url":"/docs/next/general/Tutorials/android-search-in-browser#3-automate-web-searching","content":" Now we are good to go for the actual automation process. The automation consist of three steps:  Open ChromeSelect the search bar and type 'spacecraft'Click on the desired search result  ","version":"Next","tagName":"h2"},{"title":"1) Open Chrome​","type":1,"pageTitle":"Web Search on Android","url":"/docs/next/general/Tutorials/android-search-in-browser#1-open-chrome","content":" To open Chrome, we first have to figure out how we can let AskUI know where to click on.  As we can see in the annotated image above, the Chrome icon is recognized as an icon: undo. Indeed, we could also tell AskUI to select the icon: undo, but we will try to do it in a more precise way.  What we're gonna do is:  (1) Select the search bar  (2) Type 'chrome'  (3) Select the icon above the text 'chrome'  This approach will give us a more consistent result because typing &quot;chrome&quot; in the search bar will give us a more understandable visual element.  Try to change your code according to this:  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should open chrome', async () =&gt; { await aui.click().textfield().exec(); // Type the desired keyword into the search bar await aui.type('chrome').exec(); // We wait for 1500 milliseconds, to make sure that the search result // has been loaded before AskUI start to look for the search result. await aui.waitFor(1500).exec(); // Then click the icon that is above the text 'chrome' await aui.click().icon().above().text('chrome').exec(); }); });   and run,  npm run askui   Now you will be able to see that Chrome has been opened.  ","version":"Next","tagName":"h3"},{"title":"2) Select the Search Bar and Type 'spacecraft'​","type":1,"pageTitle":"Web Search on Android","url":"/docs/next/general/Tutorials/android-search-in-browser#2-select-the-search-bar-and-type-spacecraft","content":" Let's select the search bar of chrome, and type our desired keyword in there.    Add this code block to the bottom of our code:  // We first look for the search bar. Depending on the system language of your device, the default text within the search bar may differ. await aui.click().text('search or type web address').exec(); // Type our desired keyword and hit enter await aui.type('spacecraft').exec(); await aui.pressAndroidKey('enter').exec();   In some cases, when searching in Google, you will be asked to give consent for the cookies. To avoid our execution from failing, we have to examine whether we got a pop-up for the cookie consent or not:  try { // The 'expect()' examines whether a specific element is detected or not. // An instruction starting with 'expect()' must always end with 'exists()' or 'notExists()' await aui.expect().text().containsText('cookies').notExists().exec(); } catch (error) { await aui.click().text('read more').exec(); await aui.waitFor(1000).exec(); // wait until the scrolling animation has been finished await aui.click().text('accept all').exec(); } // From here, we can write our next instructions   ","version":"Next","tagName":"h3"},{"title":"3) Click on the Desired Search Result​","type":1,"pageTitle":"Web Search on Android","url":"/docs/next/general/Tutorials/android-search-in-browser#3-click-on-the-desired-search-result","content":"   After clearing the cookie consent pop-up, we can see and click our desired search result. In our case, we will look for the result from Wikipedia:  // We ask the AskUI to click the text that contains 'wikipedia', // which is the text that is nearest to the text containing 'wikipedia.org' await aui.click() .text() .containsText('wikipedia') .nearestTo() .text() .containsText('wikipedia.org') .exec();   Pay attention to the relational element-description nearestTo() that is interconnecting two different text elements.  AskUI offers several Relational Element-Descriptions, which enable you to select the desired element by their screen position:  above()below()contains()in()leftOf()rightOf()nearestTo()  💡 About withText() and containsText():  You might wonder how withText() and containsText() differ. withText() tries to match the given text as the whole sequence, whereas containsText() tries to match the given text as a sub-text within the elements. Generally speaking, containsText() can be handier to match the text roughly, but you might face a case where you want to find a specific text as a whole sequence.    ","version":"Next","tagName":"h3"},{"title":"4. Complete AskUI Code​","type":1,"pageTitle":"Web Search on Android","url":"/docs/next/general/Tutorials/android-search-in-browser#4-complete-askui-code","content":" import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should search spacecraft in chrome', async () =&gt; { await aui.click().textfield().exec(); // Type the desired keyword into the search bar await aui.type('chrome').exec(); // We wait for 1500 miliseconds, to make sure that the search result has been loaded before AskUI start to look for the search result. await aui.waitFor(1500).exec(); // Then click the icon that is above the text 'chrome' await aui.click().icon().above().text('chrome').exec(); // We wait the Chrome app to be launched await aui.waitFor(1500).exec(); // We first look for the search bar. Depending on the system language of your device, the default text within the search bar may differ. await aui.click().text('search or type web address').exec(); // Type our desired keyword and hit enter await aui.type('spacecraft').exec(); await aui.pressAndroidKey('enter').exec(); // We wait for the search result to be loaded await aui.waitFor(3000).exec(); try { // The 'expect()' examines whether a specific element is detected or not. // An instruction starting with 'expect()' must always end with 'exists()' or 'notExists()' await aui.expect().text().containsText('cookies').notExists().exec(); } catch (error) { await aui.click().text('read more').exec(); await aui.waitFor(1000).exec(); // wait until the scrolling animation has been finished await aui.click().text('accept all').exec(); } // We ask the AskUI to click the text that contains 'wikipedia' which is the text that is nearest to the text containing 'wikipedia.org' await aui.click().text().containsText('wikipedia').nearestTo().text().containsText('wikipedia.org').exec(); }); });     ","version":"Next","tagName":"h2"},{"title":"5. Conclusion​","type":1,"pageTitle":"Web Search on Android","url":"/docs/next/general/Tutorials/android-search-in-browser#5-conclusion","content":" We have covered a use case of AskUI to automate web searching in Android devices. If you got any issues while following the instruction, feel free to ask in our Outverse-Community! ","version":"Next","tagName":"h2"},{"title":"Online Shop Login","type":0,"sectionRef":"#","url":"/docs/next/general/Tutorials/shop-demo","content":"","keywords":"","version":"Next"},{"title":"Setup​","type":1,"pageTitle":"Online Shop Login","url":"/docs/next/general/Tutorials/shop-demo#setup","content":" Follow the AskUI installation guide and write your first instructionOpen a browser on your screen If you have multiple screens, configure the used display by setting the display variable at test/helpers/askui-helper.ts  ","version":"Next","tagName":"h2"},{"title":"Code​","type":1,"pageTitle":"Online Shop Login","url":"/docs/next/general/Tutorials/shop-demo#code","content":" After running the npx askui init command as described in the setup you will have a file test/my-first-askui-test-suite.test.ts. In this file add a new workflow (it-code-block) inside the body of the callback passed to the describe function:  describe(/* a string identifying the test suite */, () =&gt; { ... (other workflows) it('Should log into account', async () =&gt; { }); });   ","version":"Next","tagName":"h2"},{"title":"1. Open the Demo Shop​","type":1,"pageTitle":"Online Shop Login","url":"/docs/next/general/Tutorials/shop-demo#1-open-the-demo-shop","content":" First we need to open the demo shop in the browser. For that we open the browser and then type the URL into the search bar and hit enter.  it('Should log into account', async () =&gt; { // First open the browser. // If it is already open it should focus the current window // macOS: open -a 'Google Chrome' // Windows: start chrome await aui.execOnShell(&quot;start chrome&quot;).exec(); // Open a new tab // macOS: command + t // windows: control + t await aui.pressTwoKeys('control', 't').exec(); // Click the textfield or URL bar that contains // the text 'Search Google or type a URL' await aui.click() .text() .withText('Search Google or type a URL').exec(); // Type the text into the focused element await aui.type('https://askui-demo-shop-6e358.web.app/').exec(); // Navigate to the website await aui.pressKey('enter').exec(); });   When you run this code with npm run askui, you should see the demo online shop opening in the browser you opened.  ","version":"Next","tagName":"h3"},{"title":"2. Navigate to the Login Dialog​","type":1,"pageTitle":"Online Shop Login","url":"/docs/next/general/Tutorials/shop-demo#2-navigate-to-the-login-dialog","content":" Next, to open the login dialog, we need to click the text login at the top of the page. We can do this with the following instruction:  it('Should log into account', async () =&gt; { ... await aui.click().text('Login').exec(); });   ","version":"Next","tagName":"h3"},{"title":"3. Fill out Login Information​","type":1,"pageTitle":"Online Shop Login","url":"/docs/next/general/Tutorials/shop-demo#3-fill-out-login-information","content":" After opening the login dialog, we need to enter an email address and a password. For this we will use the typeIn action. After filling in an email address, depending on the browser used the textfield may open an auto-complete drop-down that overlaps with the password field:    To keep the password field visible, we have to hide the auto-complete drop-down. In order to do this, we have to blur the email input field. We do this by clicking on the headline of the page (&quot;Login&quot;). Afterwards, we can type into the password field.  it('Should log into account', async () =&gt; { ... await aui.typeIn('test@askui.com').textfield().contains().text('Email Address').exec(); await aui.click().text('Login').above().textfield().exec(); await aui.typeIn('passwort').textfield().contains().text('Password').exec(); });   ","version":"Next","tagName":"h3"},{"title":"4. Click on Login Button​","type":1,"pageTitle":"Online Shop Login","url":"/docs/next/general/Tutorials/shop-demo#4-click-on-login-button","content":" After filling in email and password, we need to click the login button. The following instruction does that for us:  it('Should log into account', async () =&gt; { ... await aui.click().button().contains().text('Log in').exec(); });   ","version":"Next","tagName":"h3"},{"title":"5. Check whether Login worked & Log out​","type":1,"pageTitle":"Online Shop Login","url":"/docs/next/general/Tutorials/shop-demo#5-check-whether-login-worked--log-out","content":" Finally, we need to check whether the login worked. We can do this by checking if the text &quot;Logout test@askui.com&quot; is displayed in the header as this is only displayed if we are logged in. We complete the workflow by logging out so that the workflow can easily be rerun without having to log out manually.  it('Should log into account', async () =&gt; { ... await aui.expect().text('Logout test@askui.com').exists().exec(); await aui.click().text('Logout test@askui.com').exec(); });   ","version":"Next","tagName":"h3"},{"title":"Result​","type":1,"pageTitle":"Online Shop Login","url":"/docs/next/general/Tutorials/shop-demo#result","content":" The following code block shows the finished code for the login of the web shop:  it('Should log into account', async () =&gt; { // First open the browser. // If it is already open it should focus the current window // macOS: open -a 'Google Chrome' // Windows: start chrome await aui.execOnShell(&quot;start chrome&quot;).exec(); // Open a new tab // macOS: command + t // windows: control + t await aui.pressTwoKeys('control', 't').exec(); // Click the textfield or URL bar that contains // the text 'Search Google or type a URL' await aui.click() .text() .withText('Search Google or type a URL').exec(); // Type the text into the focused element await aui.type('https://askui-demo-shop-6e358.web.app/').exec(); // Navigate to the website await aui.pressKey('enter').exec(); await aui.click().text('Login').exec(); await aui.typeIn('test@askui.com').textfield().contains().text('Email Address').exec(); await aui.click().text('Login').above().textfield().exec(); await aui.typeIn('passwort').textfield().contains().text('Password').exec(); await aui.click().button().contains().text('Log in').exec(); await aui.expect().text('test@askui.com').exists().exec(); await aui.click().text('Logout test@askui.com').exec(); });   To run this code use the npm run askui command. ","version":"Next","tagName":"h2"},{"title":"click","type":0,"sectionRef":"#","url":"/docs/api/Actions/click","content":"click production Mouse left-clicks/taps on the filtered element by moving the mouse cursor to the filtered element first. If you need a simple mouseleftclick/tap only, use mouseLeftClick. Example: await aui.click().button().withText('Google Search').exec(); ","keywords":"","version":"0.13.1"},{"title":"Like on Spotify Desktop App","type":0,"sectionRef":"#","url":"/docs/next/general/Tutorials/spotify-tutorial","content":"","keywords":"","version":"Next"},{"title":"Setup​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/next/general/Tutorials/spotify-tutorial#setup","content":" Follow the AskUI installation guide and write your first instructionOpen the Spotify desktop application on your screen If you have multiple screens, configure the used display by setting the display variable at test/helpers/askui-helper.ts  ","version":"Next","tagName":"h2"},{"title":"Code​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/next/general/Tutorials/spotify-tutorial#code","content":" After running the npx askui init command as described in the setup you will have a file test/my-first-askui-test-suite.test.ts. In this file add a new workflow (it-code-block) inside the body of the callback passed to the describe function:  describe(/* a string identifying the test suite */, () =&gt; { ... (other tests) it('should like Spotify song', async () =&gt; { }); });   ","version":"Next","tagName":"h2"},{"title":"1. Navigate to the Search Page​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/next/general/Tutorials/spotify-tutorial#1-navigate-to-the-search-page","content":" First, we need to open the search page where we can look for a song:  it('should like Spotify song', async () =&gt; { await aui.click().icon().withText('search').exec(); });   ","version":"Next","tagName":"h3"},{"title":"2. Search for a Song​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/next/general/Tutorials/spotify-tutorial#2-search-for-a-song","content":" Then we can use the search field (a textfield) to search a song:  it('should like Spotify song', async () =&gt; { ... await aui.typeIn('Bohemian Rhapsody').textfield().exec(); await aui.pressKey('enter').exec(); });   ","version":"Next","tagName":"h3"},{"title":"3. Open Menu for a Song​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/next/general/Tutorials/spotify-tutorial#3-open-menu-for-a-song","content":" On the search result page we need to right click a song to open the menu for the song:  it('should like Spotify song', async () =&gt; { ... await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Songs').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Save to your Liked Songs').exec(); });   As the text &quot;Bohemian Rhapsody&quot; is present on the page multiple times, we are specifying the position of the text we want to click further by saying that it is the one below the text &quot;Songs&quot;.  caution We expect that the song has not yet been liked (although we totally understand if this is the case - we like it, too 😉 - but just for the sake of this workflow, let's unlike it or use another song).  ","version":"Next","tagName":"h3"},{"title":"4. Check Whether the Song was Added to Liked Songs​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/next/general/Tutorials/spotify-tutorial#4-check-whether-the-song-was-added-to-liked-songs","content":" Finally, we want to check whether the song was actually added to the liked songs:  it('should like Spotify song', async () =&gt; { ... await aui.click().text('Liked Songs').exec(); await aui.expect().text('Bohemian Rhapsody').exists().exec(); });   ","version":"Next","tagName":"h3"},{"title":"5. Remove Song from Like Songs​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/next/general/Tutorials/spotify-tutorial#5-remove-song-from-like-songs","content":" To be able to run the workflow again, it is necessary to reset the state of Spotify, or more specifically, your liked songs. One option would be to add the following instructions to your code in order to remove the song from the liked songs.  it('should like Spotify song', async () =&gt; { ... await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Title').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Remove from your Liked Songs').exec(); });   ","version":"Next","tagName":"h3"},{"title":"Result​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/next/general/Tutorials/spotify-tutorial#result","content":" The following code block shows the complete code for the Spotify automation:  it('should like Spotify song', async () =&gt; { await aui.click().icon().withText('search').exec(); await aui.typeIn('Bohemian Rhapsody').textfield().exec(); await aui.pressKey('enter').exec(); await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Songs').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Save to your Liked Songs').exec(); await aui.click().text('Liked Songs').exec(); await aui.expect().text('Bohemian Rhapsody').exists().exec(); await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Title').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Remove from your Liked Songs').exec(); });   To run this workflow use the npm run askui command. ","version":"Next","tagName":"h2"},{"title":"expect","type":0,"sectionRef":"#","url":"/docs/api/Actions/expect","content":"expect production Expects a condition, e.g., exists() or notExits(). Use the structure expect().&lt;your filter&gt;.(exists()|notExists()) as shown in the examples below. Examples: await aui.expect().text('Login').exists().exec() await aui.expect().text('Login').notExists().exec() ","keywords":"","version":"0.13.1"},{"title":"execOnShell","type":0,"sectionRef":"#","url":"/docs/api/Actions/execonshell","content":"execOnShell production Executes a shell command on the device your UiController is connected to. Example: // Open the lastpass app await aui.execOnShell('monkey -p com.lastpass.authenticator 1').exec(); // Open Google Chrome on Windows await aui.execOnShell(&quot;start chrome&quot;).exec() ;// Open Google Chrome on macOS await aui.execOnShell(&quot;open -a 'Google Chrome'&quot;).exec(); // Open Google Chrome on Linux await aui.execOnShell(&quot;chrome&quot;).exec(); @param {string} shell_command - A shell command which is executed.","keywords":"","version":"0.13.1"},{"title":"Flutter Sample Android App","type":0,"sectionRef":"#","url":"/docs/next/general/Tutorials/flutter-android-sample-app","content":"","keywords":"","version":"Next"},{"title":"Live Demo in Action (playback speed x3)​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/next/general/Tutorials/flutter-android-sample-app#live-demo-in-action-playback-speed-x3","content":"   ","version":"Next","tagName":"h2"},{"title":"Setup​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/next/general/Tutorials/flutter-android-sample-app#setup","content":" The source code for the Flutter demo app used in this tutorial is provided in this repository.  ","version":"Next","tagName":"h2"},{"title":"1. Build and Run Flutter Demo App​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/next/general/Tutorials/flutter-android-sample-app#1-build-and-run-flutter-demo-app","content":" Install Flutter Clone this repository and run flutter create demo_app within the directory:  git clone https://github.com/askui/flutter-example-automation cd flutter-example-automation flutter create demo_app cd demo_app   Install dependencies for the Flutter demo app:  # run this command inside the flutter project # directory `demo_app/` flutter pub add camera intl   To use the camera, we need to set the minSdkVersion in android/app/build.gradle:  // inside the 'android/app/build.gradle' // set the 'minSdkVersion' to 21 default config { ... minSdkVersion 21 ... }   (optional) The app is ready to be built but will throw deprecation warnings. If you want to clear the deprecation warnings, follow this step (See also this issue.).  # change the respective part inside the 'pubspec.yaml' dependencies: camera: git: url: https://github.com/flutter/plugins path: packages/camera/camera ref: 9e46048ad2e1f085c1e8f6c77391fa52025e681f   Run the Android Emulator. Run the demo app:  flutter run   Now you should see the demo app running on your Android device.  Setup ADBKeyboard In this example, we are going to automate the typing on the Android device. To let AskUI fluently type as desired, we will use a virtual keyboard that handles the keyboard input via adb: ADBKeyboard.apk  ‍  Download the ADBKeyboard package (Important: Version 2.0): Link to GitHub Repository Unzip it. Find your device:  # Make sure that your Android device is connected, and the USB debugging mode is enabled adb devices   Install the ADBKeyboard on the device:  # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; install ADBKeyboard.apk   Configure the ADB Keyboard:  # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; shell settings put secure default_input_method com.android.adbkeyboard/.AdbIME   Enable the ADB Keyboard:  # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; shell ime enable com.android.adbkeyboard/.AdbIME   To check if it is enabled:  Click on a textfield in an app and see if the ADB Keyboard {ON} notification is shown at the bottom of the screen.  ","version":"Next","tagName":"h3"},{"title":"3. Setup AskUI​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/next/general/Tutorials/flutter-android-sample-app#3-setup-askui","content":" Setup AskUI by following the Getting Started Guide. We need to run the UiController directly with an extra argument to specify the runtime mode, as the current version of AskUI(version 0.7.2) doesn't provide the API for running it with the runtime argument yet. From within your npm project path, go to the directory that contains the askui-ui-controller binary:  cd &lt;YOUR_PROJECT_DIRECTORY&gt;/node_modules/askui/dist/release/latest/&lt;YOUR_PLATFORM&gt; ./askui-ui-controller -r android # for example, macOS: cd node_modules/askui/dist/release/latest/darwin/askui-ui-controller.app/Contents/MacOS/./askui-ui-controller -r android # If you can't find the binary as described above, # then you might have AskUI freshly installed and haven't run it yet. # The binary gets downloaded as the AskUI code runs. # Run the command below to run the AskUI code: npm run askui   If you got them both (emulator and UiController) running, then we are ready to go for the UI automation.  ‍ 3) You need to deactivate a few lines of the code in test/helpers/askui-helper.ts that is running the UiController, because we are already running it manually in the previous step:  // file location: test/helpers/askui-helper.ts // comment out every line that uses uiController import { UiControlClient, UiController } from 'askui'; // uiController: UiController; let aui: UiControlClient; jest.setTimeout(60 * 1000 * 60); beforeAll(async () =&gt; { // uiController = new UiController({ // /** // * Select the display you want to run your tests on, display 0 is your main display; // * ignore if you have only one display // */ // display: 0, // }); // await uiController.start(); aui = await UiControlClient.build({ credentials:{ workspaceId: 'YOUR_WORKSPACEID_FROM_ASKUI_STUDIO', token: 'YOUR_TOKEN_FROM_ASKUI_STUDIO', } }); await aui.connect(); }); afterAll(async () =&gt; { // await uiController.stop(); aui.disconnect(); }); export { aui };   ","version":"Next","tagName":"h2"},{"title":"Breaking Down the AskUI Code​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/next/general/Tutorials/flutter-android-sample-app#breaking-down-the-askui-code","content":" This chapter will walk you through the provided askui-test/demo-automation.ts step by step. The code is divided into three parts, and each part automates a different tab within the demo app:  Outline tab: Find a textfield and type in characters.Datepicker tab: Select a desired date within the date picker widget.Camera tab: Open the camera and push the record button.  ","version":"Next","tagName":"h2"},{"title":"0. General Tips for Using AskUI as a More Friendly Tool:​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/next/general/Tutorials/flutter-android-sample-app#0-general-tips-for-using-askui-as-a-more-friendly-tool","content":" Try to annotate : Use await aui.annotateInteractively() or await aui.annotate() in order to see how AskUI is understanding the visible elements on your screen. By using await aui.annotate(), the result of the annotation will be saved in the folder report/ as an HTML file. Be aware of the screen size of your device: AskUI understands your application based on the screen shown and captured. Therefore, on some occasions, you may want to know your screen size to e.g. properly scroll or swipe within your application. You may need to change the numbers for the input swipe command within the provided code so that it suits the screen size of your device. Try to select the elements by their text  tip: If you are using a device with a bigger screen e.g. Tablet, then the screen of your device (real Android device or emulator) might be big enough to see the whole page without scrolling.  ","version":"Next","tagName":"h2"},{"title":"1. Click and Type​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/next/general/Tutorials/flutter-android-sample-app#1-click-and-type","content":" The code is within the file askui-test/demo-automation.ts. Copy and paste the code into your AskUI code.  We start the run from the very first tab of our demo app.    To type into a textfield, we first need to get focus on the desired textfield. We can achieve it by running the code below:  // click on the textfield and type characters // repeat this as many times as the textfields await aui.click().text('Enter your username').exec(); await aui.type('askui').exec();   As we have multiple of textfields in our demo app, we can iterate the same procedure for each of them:  // click on the textfield and type characters // repeat this as many times as the textfields await aui.click().text('Enter your username').exec(); await aui.type('askui').exec(); // click and type the email address await aui.click().text('Enter your email').exec(); await aui.type('askui@askui.com').exec(); // Click and type the address await aui.click().text('Enter your address').exec(); await aui.type('Haid-und-Neu-Straße 18').exec(); // Pressing enter is the equivalent of pressing the return button on the on-screen-keyboard // This gets rid of the focus from the textfield await aui.pressAndroidKey('enter').exec();   After filling up the textfields, we can push the buttons at the bottom of the page:  // Press the 'Submit' button await aui.click().text('Submit').exec(); // We will have a popup window that has two buttons. Press the 'Refuse' button await aui.click().text('Refuse').exec(); // Here we press multiple toggle buttons one by one await aui.click().text('Banana').exec(); await aui.click().text('Mango').exec(); await aui.click().text('Sunny').exec(); await aui.click().text('Rainy').exec(); await aui.click().text('Windy').exec(); // Attention for swiping! /* Swipe/scroll within the page - execOnShell() can run shell commands within the device via adb. - Note that, you have to adjust the four numeric parameters, in order to make it fit to your device's screen. - The syntax is: input swipe &lt;startX&gt; &lt;startY&gt; &lt;endX&gt; &lt;endY&gt; - Depending on the screen size of your device, the coordinates should stay within the scrollable/swipeable area of the app. i.e. the 'Tabbar' at the top of the demo app is not scrollable. */ // Here we swipe the page two times in a row await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); await aui.execOnShell('input swipe 1000 1000 100 1000').exec();   ","version":"Next","tagName":"h3"},{"title":"Datepicker​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/next/general/Tutorials/flutter-android-sample-app#datepicker","content":" After running the code above, we should see the demo app swiped to the Datepicker tab.    First, we select and type characters into two different textfields:  // First, we type in the desired values into the textfields. await aui.click().text('Title').exec(); await aui.type('My vacation plan').exec(); await aui.click().text('Description').exec(); await aui.type('0. Drink a lot of water').exec(); await aui.pressAndroidKey('tab').exec();   Thereafter, we interact with two different date picker widgets that are represented with edit buttons:  // Second, we select a desired date from the Datepicker widget. // Notice how we select the icon 'chevron right/left' to shift the calendar month. await aui.click().text('edit').nearestTo().text('Depature').exec(); // this will open up the calendar await aui.click().icon().withText('chevron right').exec(); // within the calendar, we push the &gt; icon on the top right corner await aui.click().icon().withText('chevron right').exec(); await aui.click().text('7').exec(); // select 7 await aui.click().text('ok').exec(); // then, press OK // Repeat the step for the next Datepicker widget. await aui.click().text('edit').nearestTo().text('Return').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().text('5').exec(); await aui.click().text('ok').exec();   Let's go further below to the bottom of the page, and then interact with more interfaces:  // click and check the checkbox await aui.click().checkboxUnchecked().nearestTo().text('Brushed Teeth').exec(); // finally, we turn on the switch await aui.click().switchDisabled().nearestTo().text('Enable feature').exec(); // Swipe the page to the Camera tab await aui.execOnShell('input swipe 1000 1000 100 1000').exec();   ","version":"Next","tagName":"h2"},{"title":"Take a Picture with the Camera​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/next/general/Tutorials/flutter-android-sample-app#take-a-picture-with-the-camera","content":" In the final tab Camera, we can launch the device's camera and take a picture by pressing the record button. ‍  // Click on the button 'Take a Picture', then it will launch the camera await aui.click().button().contains().text('Take a Picture').exec(); // Notice how we select the record button. // Our demo-app intends to have the record button in a circular shape. // So we can look for an icon which is a 'circle' // It might be different in other applications. await aui.click().icon().containsText('circle').exec();   ","version":"Next","tagName":"h2"},{"title":"Complete AskUI Code​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/next/general/Tutorials/flutter-android-sample-app#complete-askui-code","content":" This is the complete code that runs AskUI to automate our workflow:  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { xit('annotate', async () =&gt; { await aui.annotateInteractively(); }); it('should fill up the textfields and push buttons', async () =&gt; { // click on the textfield and type characters // repeat this as many times as the textfields await aui.click().text('Enter your username').exec(); await aui.type('askui').exec(); // click on the textfield and type the email await aui.click().text('Enter your email').exec(); await aui.type('askui@askui.com').exec(); // Click and type the address await aui.click().text('Enter your address').exec(); await aui.type('Haid-und-Neu-Straße 18').exec(); // Pressing enter is the equivelant to pressing the return button on the on-screen-keyboard // This gets rid of the focus from the textfield await aui.pressAndroidKey('enter').exec(); // Press the 'Submit' button await aui.click().text('Submit').exec(); // We will have a popup window that has two buttons. Press the 'Refuse' button await aui.click().text('Refuse').exec(); // Here we press multiple of toggle buttons one by one await aui.click().text('Banana').exec(); await aui.click().text('Mango').exec(); await aui.click().text('Sunny').exec(); await aui.click().text('Rainy').exec(); await aui.click().text('Windy').exec(); // Attention for swiping! /* Swipe/scroll within the page - execOnShell() can run shell commands within the device via adb. - Note that, you have to adjust the four numeric parameters, in order to make it fit to your device's screen. - The syntax is: input swipe &lt;startX&gt; &lt;startY&gt; &lt;endX&gt; &lt;endY&gt; - Depending on the screen size of your device, the coordinates should stay within the scrollable/swipeable area of the app. i.e. the 'Tabbar' at the top of the demo app is not scrollable. */ // Here we swipe the page two times in a row await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); }); it('should pick the dates', async () =&gt; { // First, we type in the desired values into the textfields. await aui.click().text('Title').exec(); await aui.type('My vacation plan').exec(); await aui.click().text('Description').exec(); await aui.type('0. Drink a lot of water').exec(); await aui.pressAndroidKey('tab').exec(); // Second, we select a desired date from the Datepicker widget. // Notice how we select the icon 'chevron right/left' to shift the calendar month. await aui.click().text('edit').nearestTo().text('Depature').exec(); // this will open up the calendar await aui.click().icon().withText('chevron right').exec(); // within the calendar, we push the &gt; icon on the top right corner await aui.click().icon().withText('chevron right').exec(); await aui.click().text('7').exec(); // select 7 await aui.click().text('ok').exec(); // then, press OK // Repeat the step for the next Datepicker widget. await aui.click().text('edit').nearestTo().text('Return').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().text('5').exec(); await aui.click().text('ok').exec(); // click and check the checkbox await aui.click().checkboxUnchecked().nearestTo().text('Brushed Teeth').exec(); // finally, we turn on the switch await aui.click().switchDisabled().nearestTo().text('Enable feature').exec(); // Swipe the page to the Camera tab await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); }); it('should take a picture', async ()=&gt;{ // Click on the button 'Take a Picture', then it will launch the camera await aui.click().button().contains().text('Take a Picture').exec(); // Notice how we select the record button. // Our demo-app intends to have the record button in a circular shape. // So we can look for an icon which is a 'circle' // It might be different in other applications. await aui.click().icon().containsText('circle').exec(); }); });   ","version":"Next","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/next/general/Tutorials/flutter-android-sample-app#conclusion","content":" After following through this tutorial, you should be able to automate the interaction with the provided demo app. Although this example specifically provides a demo app built with Flutter, the overall method of using AskUI should also work with any mobile app running on an Android device.  If you got an issue while following this example, or in case you would like to share your use case, don't hesitate to join our community on Outverse! ","version":"Next","tagName":"h2"},{"title":"mouseDoubleMiddleClick","type":0,"sectionRef":"#","url":"/docs/api/Actions/mousedoublemiddleclick","content":"mouseDoubleMiddleClick production Double-clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleMiddleClick().exec(); ","keywords":"","version":"0.13.1"},{"title":"mouseDoubleRightClick","type":0,"sectionRef":"#","url":"/docs/api/Actions/mousedoublerightclick","content":"mouseDoubleRightClick production Double-clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleRightClick().exec(); ","keywords":"","version":"0.13.1"},{"title":"mouseDoubleLeftClick","type":0,"sectionRef":"#","url":"/docs/api/Actions/mousedoubleleftclick","content":"mouseDoubleLeftClick production Double-clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouse(500,500).exec(); await aui.mouseDoubleLeftClick().exec(); ","keywords":"","version":"0.13.1"},{"title":"mouseLeftClick","type":0,"sectionRef":"#","url":"/docs/api/Actions/mouseleftclick","content":"mouseLeftClick production Clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseLeftClick().exec(); ","keywords":"","version":"0.13.1"},{"title":"mouseMiddleClick","type":0,"sectionRef":"#","url":"/docs/api/Actions/mousemiddleclick","content":"mouseMiddleClick production Clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseMiddleClick().exec(); ","keywords":"","version":"0.13.1"},{"title":"mouseRightClick","type":0,"sectionRef":"#","url":"/docs/api/Actions/mouserightclick","content":"mouseRightClick production Clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseRightClick().exec(); ","keywords":"","version":"0.13.1"},{"title":"mouseToggleDown","type":0,"sectionRef":"#","url":"/docs/api/Actions/mousetoggledown","content":"mouseToggleDown production Toggles mouse down (Left mouse key/tap). This is equivalent to mouse-left-press-and-hold. It holds the mouse button until the mouseToggleUp() is called. Often combined with mouseToggleUp()to automate drag-and-drop. Example: await aui.mouseToggleDown().exec(); await aui.moveMouseRelatively(-400,0).exec(); await aui.mouseToggleUp().exec(); ","keywords":"","version":"0.13.1"},{"title":"moveMouse","type":0,"sectionRef":"#","url":"/docs/api/Actions/movemouse","content":"moveMouse production Moves the mouse to an arbitrary absolute x and y coordinates. If you want to move your mouse cursor to an element, use moveMouseTo(). caution macOS only: Due to the higher pixel density of the retina display, the input coordinates must be doubled in order to move the mouse as expected. For example, if you want to move the mouse for 100 pixels, use 200. Example: await aui.moveMouse(500, 500).exec(); @param {number} x_coordinate - A (positive/negative) x coordinate.@param {number} y_coordinate - A (positive/negative) y coordinate.","keywords":"","version":"0.13.1"},{"title":"moveMouseRelatively","type":0,"sectionRef":"#","url":"/docs/api/Actions/movemouserelatively","content":"moveMouseRelatively production Moves the mouse from the current position (relative) in x and y direction. caution macOS only: Due to the higher pixel density of the retina display, the input coordinates must be doubled in order to move the mouse as expected. For example, if you want to move the mouse for 100 pixels, use 200. Example: await aui.moveMouseRelatively(0, 50).exec(); @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction.","keywords":"","version":"0.13.1"},{"title":"moveMouseRelativelyTo","type":0,"sectionRef":"#","url":"/docs/api/Actions/movemouserelativelyto","content":"moveMouseRelativelyTo production Moves the mouse relatively to an element in the direction. This can be used when the mouse should not hover over an element anymore. caution macOS only: Due to the higher pixel density of the retina display, the input coordinates must be doubled in order to move the mouse as expected. For example, if you want to move the mouse for 100 pixels, use 200. Examples: // Move mouse 30 pixels below button await aui.moveMouseRelativelyTo(0, 30).button().withText('Submit').exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction.","keywords":"","version":"0.13.1"},{"title":"mouseToggleUp","type":0,"sectionRef":"#","url":"/docs/api/Actions/mousetoggleup","content":"mouseToggleUp production Toggles mouse up (Left mouse key/tap).This is equivalent to releasing the pressing mouse left button. Often combined with mouseToggleDown()to automate drag-and-drop. Example: await aui.mouseToggleDown().exec(); await aui.moveMouseRelatively(-400,0).exec(); await aui.mouseToggleUp().exec(); ","keywords":"","version":"0.13.1"},{"title":"moveMouseTo","type":0,"sectionRef":"#","url":"/docs/api/Actions/movemouseto","content":"moveMouseTo production Move mouse over the filtered element. Example: await aui.moveMouseTo().text('Grinning_Face').exec() ","keywords":"","version":"0.13.1"},{"title":"pressAndroidThirdKey","type":0,"sectionRef":"#","url":"/docs/api/Actions/pressandroidthirdkey","content":"pressAndroidThirdKey production Press three Android keys like CTRL+ALT+DEL @param {ANDROID_KEY} first_key - A Android key@param {ANDROID_KEY} second_key - A Android key@param {ANDROID_KEY} third_key - A Android key","keywords":"","version":"0.13.1"},{"title":"pressAndroidKey","type":0,"sectionRef":"#","url":"/docs/api/Actions/pressandroidkey","content":"pressAndroidKey production Press one Android key like del. Details Available keyshome, back, call, endcall, star, pound, dpad_up, dpad_down, dpad_left, dpad_right, dpad_center, volume_up, volume_down, power, camera, clear, comma, period, alt_left, alt_right, shift_left, shift_right, tab, space, sym, explorer, envelope, enter, del, grave, minus, equals, left_bracket, right_bracket, backslash, semicolon, apostrophe, slash, at, num, headsethook, focus, plus, menu, notification, search, media_play_pause, media_stop, media_next, media_previous, media_rewind, media_fast_forward, mute, page_up, page_down, switch_charset, escape, forward_del, ctrl_left, ctrl_right, caps_lock, scroll_lock, function, break, move_home, move_end, insert, forward, media_play, media_pause, media_close, media_eject, media_record, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, num_lock, numpad_0, numpad_1, numpad_2, numpad_3, numpad_4, numpad_5, numpad_6, numpad_7, numpad_8, numpad_9, numpad_divide, numpad_multiply, numpad_subtract, numpad_add, numpad_dot, numpad_comma, numpad_enter, numpad_equals, numpad_left_paren, numpad_right_paren, volume_mute, info, channel_up, channel_down, zoom_in, zoom_out, window, guide, bookmark, captions, settings, app_switch, language_switch, contacts, calendar, music, calculator, assist, brightness_down, brightness_up, media_audio_track, sleep, wakeup, pairing, media_top_menu, last_channel, tv_data_service, voice_assist, help, navigate_previous, navigate_next, navigate_in, navigate_out, dpad_up_left, dpad_down_left, dpad_up_right, dpad_down_right, media_skip_forward, media_skip_backward, media_step_forward, media_step_backward, soft_sleep, cut, copy, paste, all_apps, refresh, as well as the digits from 0 to 9 and English alphabets. Example: await aui.pressAndroidKey('notification').exec; @param {ANDROID_KEY} key - An Android key","keywords":"","version":"0.13.1"},{"title":"pressKey","type":0,"sectionRef":"#","url":"/docs/api/Actions/presskey","content":"pressKey production Press one keys like del Operating system specific mappings: Windows: command-key maps to windows-key Example: await aui.pressKey('tab').exec(); @param {PC_AND_MODIFIER_KEY} key - A key","keywords":"","version":"0.13.1"},{"title":"pressThreeKeys","type":0,"sectionRef":"#","url":"/docs/api/Actions/pressthreekeys","content":"pressThreeKeys production Press three keys like CTRL+ALT+DEL Operating system specific mappings: Windows: command-key maps to windows-key Example: await aui.pressThreeKeys('control', 'command' 'space').exec(); @param {MODIFIER_KEY} first_key - A modifier key@param {MODIFIER_KEY} second_key - A modifier key@param {PC_KEY} third_key - A key","keywords":"","version":"0.13.1"},{"title":"pressAndroidTwoKey","type":0,"sectionRef":"#","url":"/docs/api/Actions/pressandroidtwokey","content":"pressAndroidTwoKey production Press two Android keys like volume_down+power. Details Available keyshome, back, call, endcall, star, pound, dpad_up, dpad_down, dpad_left, dpad_right, dpad_center, volume_up, volume_down, power, camera, clear, comma, period, alt_left, alt_right, shift_left, shift_right, tab, space, sym, explorer, envelope, enter, del, grave, minus, equals, left_bracket, right_bracket, backslash, semicolon, apostrophe, slash, at, num, headsethook, focus, plus, menu, notification, search, media_play_pause, media_stop, media_next, media_previous, media_rewind, media_fast_forward, mute, page_up, page_down, switch_charset, escape, forward_del, ctrl_left, ctrl_right, caps_lock, scroll_lock, function, break, move_home, move_end, insert, forward, media_play, media_pause, media_close, media_eject, media_record, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, num_lock, numpad_0, numpad_1, numpad_2, numpad_3, numpad_4, numpad_5, numpad_6, numpad_7, numpad_8, numpad_9, numpad_divide, numpad_multiply, numpad_subtract, numpad_add, numpad_dot, numpad_comma, numpad_enter, numpad_equals, numpad_left_paren, numpad_right_paren, volume_mute, info, channel_up, channel_down, zoom_in, zoom_out, window, guide, bookmark, captions, settings, app_switch, language_switch, contacts, calendar, music, calculator, assist, brightness_down, brightness_up, media_audio_track, sleep, wakeup, pairing, media_top_menu, last_channel, tv_data_service, voice_assist, help, navigate_previous, navigate_next, navigate_in, navigate_out, dpad_up_left, dpad_down_left, dpad_up_right, dpad_down_right, media_skip_forward, media_skip_backward, media_step_forward, media_step_backward, soft_sleep, cut, copy, paste, all_apps, refresh, as well as the digits from 0 to 9 and English alphabets. Example: await aui.pressAndroidTwoKey('volume_down', 'power').exec() @param {ANDROID_KEY} first_key - An Android key@param {ANDROID_KEY} second_key - An Android key","keywords":"","version":"0.13.1"},{"title":"scroll","type":0,"sectionRef":"#","url":"/docs/api/Actions/scroll","content":"scroll production Scrolls based on the current mouse position in the x and y direction. Important: Mouse must be positioned in a scrollable area. macOS: May not work as expected! Example: // Scroll 500 pixels down in y direction await aui.scroll(0, -500).exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction.","keywords":"","version":"0.13.1"},{"title":"pressTwoKeys","type":0,"sectionRef":"#","url":"/docs/api/Actions/presstwokeys","content":"pressTwoKeys production Press two keys like ALT+F4 Operating system specific mappings: Windows: command-key maps to windows-key @param {MODIFIER_KEY} first_key - A modifier key@param {PC_KEY} second_key - A key","keywords":"","version":"0.13.1"},{"title":"swipe","type":0,"sectionRef":"#","url":"/docs/api/Actions/swipe","content":"swipe production Swipe an element in the x and y direction. Holds the left mouse button down on Windows, Linux and macOS and drags the element. On touch devices it taps the element and then drags it. Example: // Swipe the element 500 to the right await aui.swipe(500, 0).image().exec() @param {number} x_offset - A x direction. positive and negative values are accepted@param {number} y_offset - A y direction. positive and negative values are accepted","keywords":"","version":"0.13.1"},{"title":"type","type":0,"sectionRef":"#","url":"/docs/api/Actions/type","content":"type production Types a text at the current position. If you need to focus the element first, use typeIn() Note: In the current version it copies the text and pastes it. By default, the text is included in the logs and sent over to the askui Inference server to predict in which context the typing has to occur. You can exclude the text from the logs and the request to the askui Inference server setting options.isSecret to true. This should not change the quality of the prediction of the askui Inference server. In this case, options.secretMask is included in logs and sent over instead of the text. Examples: await aui.type('askui@askui.com').exec() // mask the text so it is not send to the askui-inference server await aui.type('Type some text', { isSecret: true, secretMask: '**' }).exec() @param {string} text - A text to type@param {Object} [options]@param {boolean} [options.isSecret = false] - If set to true, text is neither included in logs of askui nor sent over to askui Inference for prediction.@param {string} [options.secretMask = '****'] - If options.isSecret is set to true, this is included in logs and sent over to askui Inference for prediction instead of the text.","keywords":"","version":"0.13.1"},{"title":"scrollInside","type":0,"sectionRef":"#","url":"/docs/api/Actions/scrollinside","content":"scrollInside production Moves mouse to the filtered element and scrolls in the x and y direction. macOS: May not work as expected! Example: await aui.scrollInside(0,-500).text('Bottom sheet').exec(); @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction.","keywords":"","version":"0.13.1"},{"title":"typeIn","type":0,"sectionRef":"#","url":"/docs/api/Actions/typein","content":"typeIn production Puts the focus on the filtered element and types in the text. Note: In the current version it copies the text and pastes it. By default, the text is included in the logs and sent over to the askui Inference server to predict in which context the typing has to occur. You can exclude the text from the logs and the request to the askui Inference server setting options.isSecret to true. This should not change the quality of the prediction of the askui Inference server. In this case, options.secretMask is included in logs and sent over instead of the text. Examples: await aui.typeIn('Type some text').textfield().exec() // mask the text so it is not send to the askui-inference server await aui.typeIn('Type some text', { isSecret: true, secretMask: '**' }).textfield().exec() @param {string} text - A text to type@param {Object} [options]@param {boolean} [options.isSecret = false] - If set to true, text is neither included in logs of askui nor sent over to askui Inference for prediction.@param {string} [options.secretMask = '****'] - If options.isSecret is set to true, this is included in logs and sent over to askui Inference for prediction instead of the text.","keywords":"","version":"0.13.1"},{"title":"waitFor","type":0,"sectionRef":"#","url":"/docs/api/Actions/waitfor","content":"waitFor production Waits for &lt;delayInMs&gt; ms, e.g., 1000 ms. The exact delay may be a little longer than &lt;delayInMs&gt; but never shorter than that. Examples: await aui.waitFor(500).exec(); @param {number} delayInMs - The delay in ms to wait for.","keywords":"","version":"0.13.1"},{"title":"annotateInteractively","type":0,"sectionRef":"#","url":"/docs/api/Annotation/annotateInteractively","content":"annotateInteractively production caution There is a known bug that can cause a crash when calling annotateInteractively() on Windows. Please use annotate() as a workaround. Creates an annotated version of your screen and shows it to you so you can explore the annotated image. Recognized elements are annotated with a red bounding box. You can copy the filter needed to select the element by left-clicking on the bounding box. See also the detailed explanation to see how you can use it to create instructions. Examples: await aui.annotateInteractively(); ","keywords":"","version":"0.13.1"},{"title":"annotate","type":0,"sectionRef":"#","url":"/docs/api/Annotation/annotate","content":"","keywords":"","version":"0.13.1"},{"title":"Annotate DetectedElements from get()​","type":1,"pageTitle":"annotate","url":"/docs/api/Annotation/annotate#annotate-detectedelements-from-get","content":" The method also accepts an optional parameter of type AnnotationRequest. You can use this to annotate only the elements that where returned with a get().  Example:  const detectedElements = await aui.get().text().withText(&quot;User Interfaces?&quot;).exec(); await aui.annotate({ elements: detectedElements });   Resulting annotation from a screen displaying the website askui.com where only the text User Interfaces? has a bounding box:   ","version":"0.13.1","tagName":"h2"},{"title":"exists","type":0,"sectionRef":"#","url":"/docs/api/Checks/exists","content":"exists production Expects that filtered element exists. Always use together with expect(). Note Throws an error and stops the execution when the element is not found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does not exist. await aui.expect().text('Login').exists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').exists().exec() } catch (error) { console.log('Too bad we could not find the element!'); } ","keywords":"","version":"0.13.1"},{"title":"notExists","type":0,"sectionRef":"#","url":"/docs/api/Checks/notexists","content":"notExists production Expects that filtered element not exists. Always use together with expect(). Note Throws an error and stops the execution when the element is found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does exist. await aui.expect().text('Login').notExists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').notExists().exec() } catch (error) { console.log('Too bad we could find the element!'); } ","keywords":"","version":"0.13.1"},{"title":"AskUI Runner","type":0,"sectionRef":"#","url":"/docs/api/AskUI-Runner","content":"","keywords":"","version":"0.13.1"},{"title":"Requirements​","type":1,"pageTitle":"AskUI Runner","url":"/docs/api/AskUI-Runner#requirements","content":" Python 3.10 or higherNode.js 16 or higher  ","version":"0.13.1","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"AskUI Runner","url":"/docs/api/AskUI-Runner#installation","content":" We recommend using a virtual environment for Python. Make sure python --version returns 3.10 or higher:  python -m venv venv source venv/bin/activate   We have not yet published the AskUI Runner to PyPI. For now, you can install it directly from GitHub:  pip install git+https://github.com/askui/askui-runner.git   Currently, the standard logging output of the AskUI runner is minimal - we are soon going to change that. But you should see the runner starting the running of workflows as soon as you schedule some runs through the AskUI Studio.  ","version":"0.13.1","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"AskUI Runner","url":"/docs/api/AskUI-Runner#usage","content":" Create a configuration file (.y{a}ml or .json) in a directory of your choosing. The configuration file should contain at least some credentials and the command with which you start the runner without the config file flag:  credentials: workspace_id: &lt;workspace id&gt; # replace with your workspace id access_token: &lt;access token&gt; # replace with your access token runner: exec: python -m askui_runner # update if your command is different tags: [&lt;tag 1&gt;, &lt;tag 2&gt;, ..] # replace with your own runner tags   See Generating up-to-date Configuration Schema  Start the runner using  python -m askui_runner -c &lt;path to your config file, e.g., askui-runner.config.yaml&gt;   ","version":"0.13.1","tagName":"h2"},{"title":"Start UiController​","type":1,"pageTitle":"AskUI Runner","url":"/docs/api/AskUI-Runner#start-uicontroller","content":" If you want to run your workflows on the same system as the runner you need to start an UiController that listens on port 6769. Please download the one for your operating system and start it:  WindowsWindows (new version - beta release) More about the new versionLinux  info macOS After installation to Applications remove the quarantine flag with the following command run from a terminal: xattr -d com.apple.quarantine /Applications/askui-ui-controller.app  macOS(Intel)macOS(Apple silicon)  ","version":"0.13.1","tagName":"h2"},{"title":"Execute Workflows on a Remote System: Change UiController URL​","type":1,"pageTitle":"AskUI Runner","url":"/docs/api/AskUI-Runner#execute-workflows-on-a-remote-system-change-uicontroller-url","content":" You can change the UiController-URL so the runner can talk to a UiController that runs on a remote machine or on a different port:  ... runner: ... controller: host: &quot;127.0.0.1&quot; port: 7000   ","version":"0.13.1","tagName":"h3"},{"title":"Generating up-to-date Configuration Schema​","type":1,"pageTitle":"AskUI Runner","url":"/docs/api/AskUI-Runner#generating-up-to-date-configuration-schema","content":" Requirements:  PDM 2.8 or higher for contributing and creating the JSON schema of the config  Find out about all configuration options by taking a look at the JSON schema of the configuration. You can generate an up-to-date JSON schema by cloning this repository and running the following commands.  ## Install and initialize pdm pip install pdm pdm install pdm run python -m scripts.generate_config_schema_json  ","version":"0.13.1","tagName":"h2"},{"title":"AskUI UI Control Client","type":0,"sectionRef":"#","url":"/docs/api/Configuration/askui-ui-control-client","content":"","keywords":"","version":"0.13.1"},{"title":"Log Level​","type":1,"pageTitle":"AskUI UI Control Client","url":"/docs/api/Configuration/askui-ui-control-client#log-level","content":" Set the log level of the AskUI UI Control Client using the LOG_LEVEL environment variable. The following log levels are available:  &quot;fatal&quot;&quot;error&quot;&quot;warn&quot;&quot;info&quot;&quot;debug&quot;&quot;trace&quot;&quot;silent&quot;&quot;verbose&quot;.  The log level defaults to &quot;info&quot;. and it can be changed with the following command:  Bash or similar:  export LOG_LEVEL=verbose   Powershell  $env:LOG_LEVEL=&quot;verbose&quot;   ","version":"0.13.1","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"AskUI UI Control Client","url":"/docs/api/Configuration/askui-ui-control-client#properties","content":" ","version":"0.13.1","tagName":"h2"},{"title":"uiControllerUrl​","type":1,"pageTitle":"AskUI UI Control Client","url":"/docs/api/Configuration/askui-ui-control-client#uicontrollerurl","content":" uiControllerUrl: string - Default: http://127.0.0.1:6769  The url of the AskUI UI Controller controlling the OS.    ","version":"0.13.1","tagName":"h3"},{"title":"inferenceServerUrl​","type":1,"pageTitle":"AskUI UI Control Client","url":"/docs/api/Configuration/askui-ui-control-client#inferenceserverurl","content":" inferenceServerUrl: string - Default: https://inference.askui.com  The address of the AskUI Inference server.    ","version":"0.13.1","tagName":"h3"},{"title":"resize​","type":1,"pageTitle":"AskUI UI Control Client","url":"/docs/api/Configuration/askui-ui-control-client#resize","content":" resize: number? - Default: undefinedThe side length of the target image to resize to in px. Your screenshot image will be resized with the original aspect ratio, and the lengths image side will be equal to this number. This can be used to reduce the inference time by reducing the request size in case of a bad internet connection. But it can cause a decrease in the prediction quality. The resizing will be skipped if it's undefined.    ","version":"0.13.1","tagName":"h3"},{"title":"credentials​","type":1,"pageTitle":"AskUI UI Control Client","url":"/docs/api/Configuration/askui-ui-control-client#credentials","content":" credentials: Credentials Your user credentials - Optional. workspaceId: string Your workspace idtoken: string An access token for authentication with the AskUI Inference Server  Provide credentials for authentication with the AskUI Inference Server if you would like to use dedicated, more powerful and stable resources instead of public resources. Credentials can also be provided using the environment variables ASKUI_WORKSPACE_ID and ASKUI_TOKEN but in-code configuration takes precedence over these environment variables. Independent of how you configure the credentials, make sure to use one way to configure all the credentials, i.e., if you set the workspace id via setting the ASKUI_WORKSPACE_ID environment variable, you need to set token with environment variables as well.  Setting credentials in code:   let aui = await UiControlClient.build({ credentials: { workspaceId: '&lt;your workspace id&gt;', token: '&lt;your access token&gt;', } });   Setting credentials using environment variables (Powershell):  $env:ASKUI_WORKSPACE_ID = &lt;your workspace id&gt; $env:ASKUI_TOKEN = &lt;your access token&gt;   Setting credentials using environment variables (Bash or similar):  export ASKUI_WORKSPACE_ID=&lt;your workspace id&gt; export ASKUI_TOKEN=&lt;your access token&gt;     ","version":"0.13.1","tagName":"h3"},{"title":"reporter​","type":1,"pageTitle":"AskUI UI Control Client","url":"/docs/api/Configuration/askui-ui-control-client#reporter","content":" reporter: Reporter or Reporter[] the reporter(s) to report on step runs/executions - optional.  Set one or multiple AskUI step reporters that implement AskUI's Reporter interface. We provide step reporters through the askui-reporters package. See our reporting page for instructions on how to implement your own reporter.  Setting multiple reporters in code (example):  aui = await UiControlClient.build({ reporter: [ new AskUIAnnotationStepReporter( AnnotationLevel.ALL, &quot;annotation_report&quot;, &quot;_annotation&quot; ), new AskUIJestHtmlStepReporter({ withScreenshots: 'always' as const, withDetectedElements: 'always' as const, }) ], });   See our reporting page for a comprehensive overview. ","version":"0.13.1","tagName":"h3"},{"title":"askui UI Controller","type":0,"sectionRef":"#","url":"/docs/api/Configuration/askui-ui-controller","content":"","keywords":"","version":"0.13.1"},{"title":"Properties​","type":1,"pageTitle":"askui UI Controller","url":"/docs/api/Configuration/askui-ui-controller#properties","content":" ","version":"0.13.1","tagName":"h2"},{"title":"binaryVersion​","type":1,"pageTitle":"askui UI Controller","url":"/docs/api/Configuration/askui-ui-controller#binaryversion","content":" binaryVersion: string - Default: latest  There are different versions of the askui UI Controller. Not all versions are supported for all operating systems. You can specify which binary version of server you want to download and use. The default value is latest which will download the newest version.    ","version":"0.13.1","tagName":"h3"},{"title":"display​","type":1,"pageTitle":"askui UI Controller","url":"/docs/api/Configuration/askui-ui-controller#display","content":" display: number - Default: 0  You can choose on which display you want to excecute all tests. You can only perform all tests on one display. The application which you want to automate should be open and selected on your chosen display.  The default value of display is 0 which is your main monitor. If you want to use your second monitor you can change the value to 1 (2 for your third monitor etc.).  There is also a possibility to detect the value of your monitors. After the start of the askui UI Controller you should see an askui icon. After clicking on this icon you can choose the option Show. You will see the same window as the following image.    Now you can identify the order of your monitors and you can also select the monitor in this configuration.    ","version":"0.13.1","tagName":"h3"},{"title":"host​","type":1,"pageTitle":"askui UI Controller","url":"/docs/api/Configuration/askui-ui-controller#host","content":" host: string - Default: 127.0.0.1  The host the askui UI Controller is running on.  ","version":"0.13.1","tagName":"h3"},{"title":"logFilePath​","type":1,"pageTitle":"askui UI Controller","url":"/docs/api/Configuration/askui-ui-controller#logfilepath","content":" logFilePath: string - Default: &lt;temp-dir&gt;/askui/askui-server.log  It is possible to specify a path for your log files. Per default we create the askui-server.log file and askui folder in your temp folder.    ","version":"0.13.1","tagName":"h3"},{"title":"logLevel​","type":1,"pageTitle":"askui UI Controller","url":"/docs/api/Configuration/askui-ui-controller#loglevel","content":" logLevel: LogLevels - Default: debug  You can set the log level using the LogLevels. The following values are available: &quot;fatal&quot;, &quot;error&quot;, &quot;warn&quot;, &quot;info&quot;, &quot;debug&quot;, &quot;trace&quot;, &quot;silent&quot;, &quot;verbose&quot;. All log levels are defined in an LogLevels enum.    ","version":"0.13.1","tagName":"h3"},{"title":"minimize​","type":1,"pageTitle":"askui UI Controller","url":"/docs/api/Configuration/askui-ui-controller#minimize","content":" minimize: boolean - Default: true  The default value of this property is true. This means that askui UI Controller will be started as minimized window.    ","version":"0.13.1","tagName":"h3"},{"title":"overWriteBinary​","type":1,"pageTitle":"askui UI Controller","url":"/docs/api/Configuration/askui-ui-controller#overwritebinary","content":" overWriteBinary: boolean - Default: false  Download the provided Version of askui UI Controller. If a version is already downloaded. This version will be overwritten.    ","version":"0.13.1","tagName":"h3"},{"title":"port​","type":1,"pageTitle":"askui UI Controller","url":"/docs/api/Configuration/askui-ui-controller#port","content":" port: number - Default: 6769  The port the askui UI Controller is running on.    ","version":"0.13.1","tagName":"h3"},{"title":"actionDelayInMs​","type":1,"pageTitle":"askui UI Controller","url":"/docs/api/Configuration/askui-ui-controller#actiondelayinms","content":" actionDelayInMs: number - Default: 1000  actionDelayInMs is the time that the askui UI controller waits between actions. This can be used to slow down or speed up the execution.  Let's say, you want to click on the login button and then navigate to the home page by clicking on the home button but you have to wait 2s before clicking it because it takes some time logging in. You can increase the actionDelayInMs to 2000 in this case. But be careful, as it is going to slow down all your instructions. It may be better to use waitFor() between the two clicking actions.  ","version":"0.13.1","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"askui UI Controller","url":"/docs/api/Configuration/askui-ui-controller#example","content":" import { UiControlClient, UiController, LogLevels } from 'askui'; describe('jest with askui', () =&gt; { // Server for controlling the operating system let uiController: UiController; beforeAll(async () =&gt; { uiController = new UiController({ // choosing the second monitor display: 1, // download the latest version of the server binaryVersion: 'latest', // start askui UI Controller as minimized application minimize: true, // using error loglevel logLevel: LogLevels.ERROR, // Set the action delay lower than the default actionDelayInMs: 500, }); }) })   ","version":"0.13.1","tagName":"h2"},{"title":"Download​","type":1,"pageTitle":"askui UI Controller","url":"/docs/api/Configuration/askui-ui-controller#download","content":" Download the binary/binaries for the respective platform(s):  WindowsWindows (new version - beta release) More about the new versionLinux  info macOS After installation to Applications remove the quarantine flag with the following command run from a terminal: xattr -d com.apple.quarantine /Applications/askui-ui-controller.app  macOS(Intel)macOS(Apple silicon) ","version":"0.13.1","tagName":"h2"},{"title":"button","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/button","content":"button production Filters for a UI element 'button'. Examples: await aui.click().button().contains().text('Google Search').exec() ","keywords":"","version":"0.13.1"},{"title":"checkbox","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/checkbox","content":"checkbox production Filters for a UI element 'checkbox'. Example: await aui.moveMouseTo().checkbox().leftOf().text('Save the world').exec(); ","keywords":"","version":"0.13.1"},{"title":"container","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/container","content":"container production Filters for a UI element 'container'. Example: await aui.moveMouseTo().container().contains().text('typography').exec(); ","keywords":"","version":"0.13.1"},{"title":"containsText","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/containstext","content":"containsText production Filters for text containing the text provided as an argument. Examples: 'This is a text' === containsText('text') =&gt; true 'This is a text' === containsText('other text') =&gt; false 'This is a text' === containsText('other') =&gt; false @param {string} text - A text to be matched.","keywords":"","version":"0.13.1"},{"title":"icon","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/icon","content":"icon production Filters for a UI element 'icon'. You can combine it with the element-description 'withText()' to look for a specific icon. Examples: await aui.click().icon().withText('camera').exec(); Note: This is an alpha feature. The prediction of the icon name is sometimes unstable. Use custom elements as an alternative.","keywords":"","version":"0.13.1"},{"title":"element","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/element","content":"element production Filters for any UI element on the screen. Since the element() itself doesn't describe any particular property of the element, in most cases, it must be used in combination with relational descriptions such as above(), below() or nearestTo() etc. Examples: await aui.moveMouseTo().element().below().text('Layers').exec(); ","keywords":"","version":"0.13.1"},{"title":"customElement","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/customelement","content":"customElement production Filters for a 'custom element', that is a UI element which is defined by providing an image and other parameters such as degree of rotation. It allows filtering for a UI element that is not recognized by our machine learning models by default. It can also be used for pixel assertions of elements using classical template matching. See the tutorial - Custom Element for more detail. Example await aui .click() .customElement({ customImage: './logo.png', // required name: 'myLogo', // optional threshold: 0.9, // optional, defaults to 0.9 rotationDegreePerStep: 0, // optional, defaults to 0 imageCompareFormat: 'grayscale', // optional, defaults to 'grayscale' // mask:{x:0, y:0}[] // optional, a polygon to match only a certain area of the custom element }) .exec(); Arguments customImage (string, required): A cropped image in the form of a base64 string or file path. name (string, optional): A unique name that can be used for filtering for the custom element. If not given, any text inside the custom image will be detected via OCR. threshold (number, optional): A threshold for how much a UI element needs to be similar to the custom element as defined. Takes values between 0.0 (== all elements are recognized as the custom element which is probably not what you want) and 1.0 (== elements need to look exactly like the customImage which is unlikely to be achieved as even minor differences count). Defaults to 0.9. rotationDegreePerStep (number, optional): Step size in rotation degree. Rotates the custom image by this step size until 360° is exceeded. The range is from 0 to 360. Defaults to 0. imageCompareFormat ('RGB' | 'grayscale', optional): The color compare style. 'greyscale' compares the brightness of each pixel whereas 'RGB' compares all three color. Defaults to 'grayscale'. @param {CustomElementJson} customElement - The custom element to filter for.","keywords":"","version":"0.13.1"},{"title":"otherElement","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/otherelement","content":"otherElement production Filters for a UI element 'other element'.","keywords":"","version":"0.13.1"},{"title":"image","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/image","content":"image production Filters for a UI element 'image'. Examples: // Works if there is only one image visible on the screen await aui.click().image().exec(); // Works if you have an image with // a text below await aui.click().image().above().text('Automating WebGL').exec(); ","keywords":"","version":"0.13.1"},{"title":"matching","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/matching","content":"","keywords":"","version":"0.13.1"},{"title":"What Should I Write as Matching Text​","type":1,"pageTitle":"matching","url":"/docs/api/Element-Descriptions/matching#what-should-i-write-as-matching-text","content":" The text description inside the matching() should describe the element visually. It understands color, some famous company/product names, general descriptions.  Important: Matching only returns the best matching element when you use it with get()  A bit of playing around to find a matching description is sometimes needed: E.g., puzzle piece can fail while an icon showing a puzzle piece might work. Generally, the more detail the better.  We also recommend to not restrict the type of element by using the general selector element() as shown in the examples below.  Examples:  // Select the black sneaker from a bunch of sneakers await aui.click().element().matching('a black sneaker shoe').exec(); // Select an image that has text in it await aui.click().element().matching('has Burger King in it').exec(); await aui.click().element().matching('has adidas in it').exec(); // Target a logo/image by describing it await aui.click().element().matching('a mask on purple background and a firefox logo').exec(); await aui.click().element().matching('logo looking like an apple with one bite bitten off').exec(); await aui.click().element().matching('logo looking like a seashell').exec();   @param {string} text - A description of the target element. ","version":"0.13.1","tagName":"h2"},{"title":"special","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/special","content":"special production Filters special elements defined over a specifically trained custom element descriptor. Custom element descriptors are trained on your elements that were not detected with our default models. Please contact us for further details on how to do this. We are working on a solution to provide this in our User Portal. In the example below circle refers to a circle shaped icon with specific properties. Examples: await aui.moveMouseTo().element().special(&quot;circle&quot;).exec() @param {string} text - A text to be matched.","keywords":"","version":"0.13.1"},{"title":"switch","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/switch","content":"switch production Filters for a UI element 'switch'. Example: await aui.click().switch().rightOf() .text('Allow notification snoozing').exec(); ","keywords":"","version":"0.13.1"},{"title":"table","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/table","content":"table production Filters for a UI element 'table'.","keywords":"","version":"0.13.1"},{"title":"text","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/text","content":"text production Filters for an UI element 'text'. Takes an optional parameter to filter for a specific text. See the examples below. See also the filters withTextRegex() and withExactText() Examples: await aui.click().text().exec(); await aui.click().text('Username').exec(); // Matching with an exact text await aui.click().text().withExactText('Username').exec(); // Matching with a regex await aui.click().text().withTextRegex('\\b[Ss]\\w+').exec(); @param {string} [text] - A text to be matched.","keywords":"","version":"0.13.1"},{"title":"withExactText","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/withexacttext","content":"withExactText production Filters for equal text. Note: This should be only used in cases where the similarity comparison of {@link FluentFilters.withText()} allows not for a specific enough filtering (too many similar elements). Examples: 'text' === withExactText('text') =&gt; true 'test' === withExactText('text') =&gt; false 'other' === withExactText('text') =&gt; false await aui.moveMouseTo().text().withExactText('Basketball').exec() @param {string} text - A text to be matched.","keywords":"","version":"0.13.1"},{"title":"textfield","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/textfield","content":"textfield production Filters for a UI element 'textfield'. Examples: // Works if there is only one textfield visible on the screen await aui.typeIn('Oh yeah').textfield().exec(); // Works if you have a labeled textfield // Label is above the textfield await aui.typeIn('Oh yeah').textfield().below().text('E-Mail Address').exec(); ","keywords":"","version":"0.13.1"},{"title":"get","type":0,"sectionRef":"#","url":"/docs/api/Getters/get","content":"get production Returns an array with all filtered elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const text = await aui.get().text('Sign').exec(); console.log(text); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 } } ] ","keywords":"","version":"0.13.1"},{"title":"withTextRegex","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/withtextregex","content":"withTextRegex production Filters for texts, which match the regex pattern. Examples: 'The rain in Spain' === withTextRegex('\\b[Ss]\\w+') =&gt; true 'The rain in Portugal' === withTextRegex('\\b[Ss]\\w+') =&gt; false 'The rain in switzerland' === withTextRegex('\\b[Ss]\\w+') =&gt; true // this filters any text that contains 'pie' or 'cake' or 'Pie' or 'Cake' await aui.get().text().withTextRegex('.*([Pp]ie|[Cc]ake).*').exec(); @param {string} regex_pattern - A regex pattern","keywords":"","version":"0.13.1"},{"title":"withText","type":0,"sectionRef":"#","url":"/docs/api/Element-Descriptions/withtext","content":"withText production Filters for similar -- meaning &gt;70% similar -- text. Takes an optional parameter to specify the similarity. Usually you need the optional parameter for long texts you want to match precisely. We use RapidFuzz which calculates the similarity like this: 1 - (distance / (lengthString1 + lengthString2)) Examples: 'text' === withText('text') =&gt; true 'test' === withText('text') =&gt; true 'Test' === withText('text') =&gt; true 'Text' === withText('text') =&gt; true 'TEXT' === withText('text') =&gt; true 'texst' === withText('text') =&gt; true 'texts' === withText('text') =&gt; true 'atebxtc' === withText('text') =&gt; false 'other' === withText('text') =&gt; false // optional parameter: similarity_score '978-0-201-00650-6' == withText(&quot;978-0-201-00&quot;, 90) =&gt; false with 82.76 &lt; 90 similarity '978-0-201-00650-6' == withText(&quot;978-0-201-00650&quot;, 90) =&gt; true with 93.75 &gt; 90 similarity @param {string} text - A text to be matched.","keywords":"","version":"0.13.1"},{"title":"getAll","type":0,"sectionRef":"#","url":"/docs/api/Getters/getall","content":"getAll production Returns an array with all detected elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const detectedElements = await aui.getAll().exec(); console.log(detectedElements); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 250.8204241071428, ymin: 300.21332310267857, xmax: 450.6304241071428, ymax: 950.47812834821428 }, ... 381 more items } ] ","keywords":"","version":"0.13.1"},{"title":"above","type":0,"sectionRef":"#","url":"/docs/api/Relations/above","content":"above production Filters for an element above another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text1 | -------------- -------------- | text0 | -------------- -------------- | button | -------------- // Returns text0 because text0 is the first element above button ...text().above().button() ...text().above(0).button() // Returns text1 because text1 is the second element above button ...text().above(1).button() // Returns no element because button is below text ...button().above().text() @param {number} [optionalIndex=0] - element index","keywords":"","version":"0.13.1"},{"title":"and","type":0,"sectionRef":"#","url":"/docs/api/Relations/and","content":"and production Logic and operator Examples: example scene: --------------- ---------------- | icon user | | icon search | --------------- ---------------- const icons = await aui.get().icon().exec(); console.log(icons); Using only the element-description icon, the get will return both icons console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 1000, ymin: 1010, xmax: 1020, ymax: 1030 } }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] You can combine element-descriptions with the and() relation and specify exactly which icon you want. const icons = await aui.get().icon().and().withText('user').exec() console.log(icons) The get returns only the user icon although both elements are icons. console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] ","keywords":"","version":"0.13.1"},{"title":"below","type":0,"sectionRef":"#","url":"/docs/api/Relations/below","content":"below production Filters for an element below another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text | -------------- -------------- | button0 | -------------- -------------- | button1 | -------------- // Returns button0 because button0 is the first button below text ...button().below().text() ...button().below(0).text() // Returns button1 because button1 is the second button below text ...button().below(1).text() // Returns no element because text is above button ...text().below().button() @param {number} [optionalIndex=0] - element index","keywords":"","version":"0.13.1"},{"title":"contains","type":0,"sectionRef":"#","url":"/docs/api/Relations/contains","content":"contains production Filters for an element containing another element. Example: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns outerEl because outerEl contains innerEl ...outerEl().contains().innerEl() // Returns no element because innerEl contains no outerEl ...innerEl().contains().outerEl() ","keywords":"","version":"0.13.1"},{"title":"nearestTo","type":0,"sectionRef":"#","url":"/docs/api/Relations/nearestto","content":"nearestTo production Filters for an element nearest to another element. Examples: -------------- | button 1 | -------------- -------------- | text | -------------- -------------- | button 2 | -------------- // Returns button 1 because button 1 is nearer to the text than button 2 ...button().nearestTo().text() ","keywords":"","version":"0.13.1"},{"title":"in","type":0,"sectionRef":"#","url":"/docs/api/Relations/in","content":"in production Filters for an element inside another element. Examples: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns innerEl because innerEl is inside outerEl ...innerEl().in().outerEl() // Returns nothing because innerEl is not inside outerEl ...outerEl().in().innerEl() ","keywords":"","version":"0.13.1"},{"title":"leftOf","type":0,"sectionRef":"#","url":"/docs/api/Relations/leftof","content":"leftOf production Filters for an element left of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl1 | | leftEl0 | | rightEl | -------------- -------------- -------------- // Returns leftEl0 because leftEl0 is the first element left of rightEl ...leftEl().leftOf().rightEl() ...leftEl().leftOf(0).rightEl() // Returns leftEl1 because leftEl1 is the second element left of rightEl ...leftEl().leftOf(1).rightEl() // Returns no element because rightEl is left of leftEl ...rightEl().leftOf().leftEl() @param {number} [optionalIndex=0] - element index","keywords":"","version":"0.13.1"},{"title":"or","type":0,"sectionRef":"#","url":"/docs/api/Relations/or","content":"or production Logic or operator Examples: scene 1 -------------- --------------- | button | | icon | -------------- --------------- scene 2 -------------- --------------- | button | | text | -------------- --------------- In case, that your reference element can have multiple values, in the following example, the element right of the button can be either icon or text. You can use the or() relation, so your instruction is valid for both scenes const button = await aui.get().button().rightOf().icon().or().text().exec(); console.log(button); Returns the same button for both cases console output: [ DetectedElement { name: 'BUTTON', text: 'button', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] ","keywords":"","version":"0.13.1"},{"title":"rightOf","type":0,"sectionRef":"#","url":"/docs/api/Relations/rightof","content":"rightOf production Filters for an element right of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl | | rightEl0 | | rightEl1 | -------------- -------------- -------------- // Returns rightEl0 because rightEl0 is the first element right of leftEl ...rightEl().rightOf().leftEl() ...rightEl().rightOf(0).leftEl() // Returns rightEl1 because rightEl1 is the second element right of leftEl ...rightEl().rightOf(1).leftEl() // Returns no element because leftEl is left of rightEl ...leftEl().rightOf().rightEl() @param {number} [optionalIndex=0] - element index","keywords":"","version":"0.13.1"},{"title":"Remote Device Controller","type":0,"sectionRef":"#","url":"/docs/api/Remote-Device-Controller","content":"","keywords":"","version":"0.13.1"},{"title":"Introduction & Setup​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/api/Remote-Device-Controller#introduction--setup","content":" ","version":"0.13.1","tagName":"h2"},{"title":"Installer​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/api/Remote-Device-Controller#installer","content":" Download the installer from here. Start the installer and follow the installation process. Note: Installation requires administrator rights. Create a new AskUI project as described in our documentation. Open file test/helpers/askui-helper.ts in the AskUI project. Remove await uiController.start(); in beforeAll function. Remove await uiController.stop(); in afterAll function. Start the installed Remote Device Controller manually and select the screen you want to use. Note: Either through the start menu, desktop shortcut or the executable in the install directory. You should be good to go now to run your workflows as described in documentation. Note: Ensure that the Remote Device Controller is running before you start a workflow.  ","version":"0.13.1","tagName":"h3"},{"title":"Manual Update of Remote Device Controller​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/api/Remote-Device-Controller#manual-update-of-remote-device-controller","content":" Make use of our preview build to use the latest features by following the mentioned steps below.  Go to function beforeAll there you must modify in file test/helpers/askui-helper.ts. Ensure that you have the required import UiController. import { UiController } from 'askui'; Also add the global variable if it is missing: let uiController: UiController; Modify the creation of uiController in file test/helpers/jest.setup.ts: uiController = new UiController({ /** Select the display you want to run your tests on, display 0 is your main display; ignore if you have only one display */ display: &lt;YOUR_DISPLAY_ID&gt;, binaryVersion: &quot;tdk-23.10.1-preview-release-1&quot; }); Note: The ui controller creation starts typically with uiController = await UiController({ ... but the instance name might be different. Replace \\&lt;YOUR_DISPLAY_ID&gt; with the display (starting with 0 for the first display) that you want to use: display: &lt;YOUR_DISPLAY_ID&gt;, Ensure that the controller gets started before the UI controller client tries (aui) to connect. Therefore the last two lines of the function should do: await uiController.start(); await aui.connect(); Note: The ui controller client creation starts typically with aui = await UiControlClient.build({ ... but the instance name might be different. Ensure that in function afterAll the controller gets stopped after the ui controller client closes the connection: aui.disconnect(); await uiController.stop(true); You should be good to go now to run your workflows as described in documentation.  Note: New features are only supported on Windows 10/11.  ","version":"0.13.1","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/api/Remote-Device-Controller#features","content":" ","version":"0.13.1","tagName":"h2"},{"title":"Type Like a Human​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/api/Remote-Device-Controller#type-like-a-human","content":" Together with the asynchronous execution of actions we also introduce natural typing. The first iteration of this feature uses the typical typing speed of a human.  ","version":"0.13.1","tagName":"h3"},{"title":"Android on Windows​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/api/Remote-Device-Controller#android-on-windows","content":" AskUI automation works on an Android device that is controlled from a Windows machine. It allows you to run a workflow on an Android device, including recording the session. Instructions how to setup the Android workflow can be found in our documentation.  Please also read the knows issues section since this is just a preview feature.  ","version":"0.13.1","tagName":"h3"},{"title":"Known Issues​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/api/Remote-Device-Controller#known-issues","content":" ","version":"0.13.1","tagName":"h2"},{"title":"Mouse Movement​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/api/Remote-Device-Controller#mouse-movement","content":" You may encounter issues when mouse pointer acceleration is enabled.  ","version":"0.13.1","tagName":"h3"},{"title":"Log Files​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/api/Remote-Device-Controller#log-files","content":" Log files are stored under &lt;YOUR_USER_FOLDER&gt;/.askui/.  ","version":"0.13.1","tagName":"h3"},{"title":"Android​","type":1,"pageTitle":"Remote Device Controller","url":"/docs/api/Remote-Device-Controller#android","content":" Recording on an Android device is not stable.Recorded resolution might be lower than the device resolution.Recorded video might be empty or single frame in cases no screen updates occurred during recording.We don't support landscape mode on Android.Devices with high DPI screen might not work as expected. ","version":"0.13.1","tagName":"h3"},{"title":"Table of Contents","type":0,"sectionRef":"#","url":"/docs/api/API/table-of-contents","content":"","keywords":"","version":"0.13.1"},{"title":"Actions​","type":1,"pageTitle":"Table of Contents","url":"/docs/api/API/table-of-contents#actions","content":" Nameclick() production Mouse left-clicks/taps on the filtered element by moving the mouse cursor to the filtered element first. If you need a simple mouseleftclick/tap only, use mouseLeftClick. Example: await aui.click().button().withText('Submit').exec() execOnShell() production Executes a shell command on the device your UiController is connected to. Example: // Open the lastpass app await aui.execOnShell('monkey -p com.lastpass.authenticator 1').exec(); // Open Google Chrome on Windows await aui.execOnShell(&quot;start chrome&quot;).exec() ;// Open Google Chrome on macOS await aui.execOnShell(&quot;open -a 'Google Chrome'&quot;).exec(); // Open Google Chrome on Linux await aui.execOnShell(&quot;chrome&quot;).exec(); @param {string} shell_command - A shell command which is executed. expect() production Expects a condition, e.g., exists() or notExits(). Use the structure expect().&lt;your filter&gt;.(exists()|notExists()) as shown in the examples below. Examples: await aui.expect().text('Login').exists().exec() await aui.expect().text('Login').notExists().exec() mouseDoubleLeftClick() production Double-clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleLeftClick().exec(); mouseDoubleMiddleClick() production Double-clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleMiddleClick().exec(); mouseDoubleRightClick() production Double-clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseDoubleRightClick().exec(); mouseLeftClick() production Clicks with left mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseLeftClick().exec(); mouseMiddleClick() production Clicks with middle mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseMiddleClick().exec(); mouseRightClick() production Clicks with right mouse key. If you need to move the mouse first, use moveMouseTo(). Examples: // Optional: Move mouse to an element first await aui.moveMouseTo().button().withText('Login').exec(); await aui.mouseRightClick().exec(); mouseToggleDown() production Toggles mouse down (Left mouse key/tap). Example: await aui.mouseToggleDown().exec(); mouseToggleUp() production Toggles mouse up (Left mouse key/tap). Example: await aui.mouseToggleUp().exec(); moveMouse() production Moves the mouse to the absolute x and y coordinates. If you want to move your mouse cursor to an element, use moveMouseTo(). Example: await aui.moveMouse(500, 500).exec(); @param {number} x_coordinate - A (positive/negative) x coordinate.@param {number} y_coordinate - A (positive/negative) y coordinate. moveMouseRelatively() production Moves the mouse from the current position (relative) in x and y direction. Example: await aui.moveMouseRelatively(20, 20).exec(); @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. moveMouseRelativelyTo() production Moves the mouse relatively to an element in the direction. This can be used when the mouse should not hover over an element anymore. Examples: // Move mouse 30 pixels below button await aui.moveMouseRelativelyTo(0, 30).button().withText('Submit').exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. moveMouseTo() production Move mouse over the filtered element. Example: await aui.moveMouseTo().button().withText('Submit').exec() pressAndroidKey() production Press one Android key like DEL @param {ANDROID_KEY} key - A Android key pressAndroidThirdKey() production Press three Android keys like CTRL+ALT+DEL @param {ANDROID_KEY} first_key - A Android key@param {ANDROID_KEY} second_key - A Android key@param {ANDROID_KEY} third_key - A Android key pressAndroidTwoKey() production Press two Android keys like ALT+F4 @param {ANDROID_KEY} first_key - A Android key@param {ANDROID_KEY} second_key - A Android key pressKey() production Press one keys like DEL Operating system specific mappings: Windows: command-key maps to windows-key @param {PC_AND_MODIFIER_KEY} key - A key pressThreeKeys() production Press three keys like CTRL+ALT+DEL Operating system specific mappings: Windows: command-key maps to windows-key @param {MODIFIER_KEY} first_key - A modifier key@param {MODIFIER_KEY} second_key - A modifier key@param {PC_KEY} third_key - A key pressTwoKeys() production Press two keys like ALT+F4 Operating system specific mappings: Windows: command-key maps to windows-key @param {MODIFIER_KEY} first_key - A modifier key@param {PC_KEY} second_key - A key scroll() production Scrolls based on the current mouse position in the x and y direction. Important: Mouse must be positioned in a scrollable area. macOS: May not work as expected! Example: // Scroll 10 up in y direction await aui.scroll(0, 10).exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. scrollInside() production Moves mouse to the filtered element and scrolls in the x and y direction. macOS: May not work as expected! Example: await aui.scroll(0, 10).textarea().exec() @param {number} x_offset - A (positive/negative) x direction.@param {number} y_offset - A (positive/negative) y direction. swipe() production Swipe an element in the x and y direction. Holds the left mouse button down on Windows, Linux and macOS and drags the element. On touch devices it taps the element and then drags it. Example: // Swipe the element 500 to the right await aui.swipe(500, 0).image().exec() @param {number} x_offset - A x direction. positive and negative values are accepted@param {number} y_offset - A y direction. positive and negative values are accepted type() production Types a text at the current position. If you need to focus the element first, use typeIn() Note: In the current version it copies the text and pastes it. Examples: await aui.type('Type some text').exec() // mask the text so it is not send to the askui-inference server await aui.type('Type some text', \\{ isSecret: true, secretMask: '**' }).exec() @param {string} text - A text to type typeIn() production Puts the focus on the filtered element and types in the text. Note: In the current version it copies the text and pastes it. Examples: await aui.typeIn('Type some text').textfield().exec() // mask the text so it is not send to the askui-inference server await aui.typeIn('Type some text', \\{ isSecret: true, secretMask: '**' }).textfield().exec() @param {string} text - A text to type  ","version":"0.13.1","tagName":"h2"},{"title":"Element-descriptions​","type":1,"pageTitle":"Table of Contents","url":"/docs/api/API/table-of-contents#element-descriptions","content":" Namebutton() production Filters for a UI element 'button'. Examples: await aui.moveMouseTo().button().exec() checkbox() production Filters for a UI element 'checkbox'. container() production Filters for a UI element 'container'. containsText() production Filters for text containing the text provided as an argument. Examples: 'This is a text' === containsText('text') =&gt; true 'This is a text' === containsText('other text') =&gt; false 'This is a text' === containsText('other') =&gt; false @param {string} text - A text to be matched. customElement() production Filters for a 'custom element', that is a UI element which is defined by providing an image and other parameters such as degree of rotation. It allows filtering for a UI element that is not recognized by our machine learning models by default. It can also be used for pixel assertions of elements using classical template matching. Example await aui .click() .customElement({ customImage: './logo.png', // required name: 'myLogo', // optional threshold: 0.9, // optional, defaults to 0.9 rotationDegreePerStep: 0, // optional, defaults to 0 imageCompareFormat: 'grayscale', // optional, defaults to 'grayscale' // mask:{x:0, y:0}[] // optional, a polygon to match only a certain area of the custom element }) .exec(); Arguments customImage (string, required): A cropped image in the form of a base64 string or file path. name (string, optional): A unique name that can be used for filtering for the custom element. If not given, any text inside the custom image will be detected via OCR. threshold (number, optional): A threshold for how much a UI element needs to be similar to the custom element as defined. Takes values between 0.0 (== all elements are recognized as the custom element which is probably not what you want) and 1.0 (== elements need to look exactly like the customImage which is unlikely to be achieved as even minor differences count). Defaults to 0.9. rotationDegreePerStep (number, optional): Step size in rotation degree. Rotates the custom image by this step size until 360° is exceeded. The range is from 0 to 360. Defaults to 0. imageCompareFormat ('RGB' | 'grayscale', optional): The color compare style. 'greyscale' compares the brightness of each pixel whereas 'RGB' compares all three color. Defaults to 'grayscale'. of the given custom image. @param {CustomElementJson} customElement - The custom element to filter for. element() production Filters for any UI element on the screen. Examples: await aui.moveMouseTo().element().exec() icon() production Filters for a UI element 'icon'. You can combine it with the element-description 'withText()' to look for a specific icon. Examples: icon().withText('plus') Note: This is an alpha feature. The prediction of the icon name is sometimes unstable. Use custom elements as an alternative. image() production Filters for a UI element 'image'. Examples: // Works if there is only one image visible on the screen await aui.click().image().exec(); // Works if you have an image with // a caption text below await aui.click().image().above().text('The caption').exec(); matching() experimental Filters elements based on a textual description. What Should I Write as Matching Text The text description inside the matching() should describe the element visually. It understands color, some famous company/product names, general descriptions. Important: Matching only returns the best matching element when you use it with get() A bit of playing around to find a matching description is sometimes needed: E.g., puzzle piece can fail while an icon showing a puzzle piece might work. Generally, the more detail the better. We also recommend to not restrict the type of element by using the general selector element() as shown in the examples below. Examples: // Select the black sneaker from a bunch of sneakers await aui.click().element().matching('a black sneaker shoe').exec(); // Select an image that has text in it await aui.click().element().matching('has Burger King in it').exec(); await aui.click().element().matching('has adidas in it').exec(); // Target a logo/image by describing it await aui.click().element().matching('a mask on purple background and a firefox logo').exec(); await aui.click().element().matching('logo looking like an apple with one bite bitten off').exec(); await aui.click().element().matching('logo looking like a seashell').exec(); @param {string} text - A description of the target element. otherElement() production Filters for a UI element 'other element'. special() production Filters special elements defined over a specifically trained custom element descriptor. Custom element descriptors are trained on your elements that were not detected with our default models. Please contact us for further details on how to do this. We are working on a solution to provide this in our User Portal. In the example below circle refers to a circle shaped icon with specific properties. Examples: await aui.moveMouseTo().element().special(&quot;circle&quot;).exec() @param {string} text - A text to be matched. switch() production Filters for a UI element 'switch'. table() production Filters for a UI element 'table'. text() production Filters for an UI element 'text'. Takes an optional parameter to filter for a specific text. See the examples below. See also the filters withTextRegex() and withExactText() Examples: await aui.click().text().exec(); await aui.click().text('Username').exec(); await aui.click().text().withTextRegex('\\b[Ss]\\w+').exec(); @param {string} [text] - A text to be matched. textfield() production Filters for a UI element 'textfield'. Examples: // Works if there is only one textfield visible on the screen await aui.typeIn('Oh yeah').textfield().exec(); // Works if you have a labeled textfield // Label is above the textfield await aui.typeIn('Oh yeah').textfield().below().text('E-Mail Address').exec(); withExactText() production Filters for equal text. Note: This should be only used in cases where the similarity comparison of {@link FluentFilters.withText()} allows not for specific enough filtering (too many elements). Examples: 'text' === withExactText('text') =&gt; true 'test' === withExactText('text') =&gt; false 'other' === withExactText('text') =&gt; false await aui.moveMouseTo().text().withExactText('Password').exec() @param {string} text - A text to be matched. withText() production Filters for similar -- meaning &gt;70% similar -- text. Takes an optional parameter to specify the similarity. Usually you need the optional parameter for long texts you want to match precisely. We use RapidFuzz which calculates the similarity like this: 1 - (distance / (lengthString1 + lengthString2)) Examples: 'text' === withText('text') =&gt; true 'test' === withText('text') =&gt; true 'Test' === withText('text') =&gt; true 'Text' === withText('text') =&gt; true 'TEXT' === withText('text') =&gt; true 'texst' === withText('text') =&gt; true 'texts' === withText('text') =&gt; true 'atebxtc' === withText('text') =&gt; false 'other' === withText('text') =&gt; false // optional parameter: similarity_score '978-0-201-00650-6' == withText(&quot;978-0-201-00&quot;, 90) =&gt; false with 82.76 &lt; 90 similarity '978-0-201-00650-6' == withText(&quot;978-0-201-00650&quot;, 90) =&gt; true with 93.75 &gt; 90 similarity @param {string} text - A text to be matched. withTextRegex() production Filters for texts, which match the regex pattern. Examples: 'The rain in Spain' === withTextRegex('\\b[Ss]\\w+') =&gt; true 'The rain in Portugal' === withTextRegex('\\b[Ss]\\w+') =&gt; false 'The rain in switzerland' === withTextRegex('\\b[Ss]\\w+') =&gt; true await aui.get().text().withTextRegex('\\b[Ss]\\w+').exec() @param {string} regex_pattern - A regex pattern  ","version":"0.13.1","tagName":"h2"},{"title":"Relations​","type":1,"pageTitle":"Table of Contents","url":"/docs/api/API/table-of-contents#relations","content":" Nameabove() production Filters for an element above another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text1 | -------------- -------------- | text0 | -------------- -------------- | button | -------------- // Returns text0 because text0 is the first element above button ...text().above().button() ...text().above(0).button() // Returns text1 because text1 is the second element above button ...text().above(1).button() // Returns no element because button is below text ...button().above().text() @param {number} [optionalIndex=0] - element index and() production Logic and operator Examples: example scene: --------------- ---------------- | icon user | | icon search | --------------- ---------------- const icons = await aui.get().icon().exec(); console.log(icons); Using only the element-description icon, the get will return both icons console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 1000, ymin: 1010, xmax: 1020, ymax: 1030 } }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] You can combine element-descriptions with the and() relation and specify exactly which icon you want. const icons = await aui.get().icon().and().withText('user').exec() console.log(icons) The get returns only the user icon although both elements are icons. console output: [ DetectedElement { name: 'ICON', text: 'user', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] below() production Filters for an element below another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- | text | -------------- -------------- | button0 | -------------- -------------- | button1 | -------------- // Returns button0 because button0 is the first button below text ...button().below().text() ...button().below(0).text() // Returns button1 because button1 is the second button below text ...button().below(1).text() // Returns no element because text is above button ...text().below().button() @param {number} [optionalIndex=0] - element index contains() production Filters for an element containing another element. Example: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns outerEl because outerEl contains innerEl ...outerEl().contains().innerEl() // Returns no element because innerEl contains no outerEl ...innerEl().contains().outerEl() in() production Filters for an element inside another element. Examples: -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | -------------------- // Returns innerEl because innerEl is inside outerEl ...innerEl().in().outerEl() // Returns nothing because innerEl is not inside outerEl ...outerEl().in().innerEl() leftOf() production Filters for an element left of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl1 | | leftEl0 | | rightEl | -------------- -------------- -------------- // Returns leftEl0 because leftEl0 is the first element left of rightEl ...leftEl().leftOf().rightEl() ...leftEl().leftOf(0).rightEl() // Returns leftEl1 because leftEl1 is the second element left of rightEl ...leftEl().leftOf(1).rightEl() // Returns no element because rightEl is left of leftEl ...rightEl().leftOf().leftEl() @param {number} [optionalIndex=0] - element index nearestTo() production Filters for an element nearest to another element. Examples: -------------- | button 1 | -------------- -------------- | text | -------------- -------------- | button 2 | -------------- // Returns button 1 because button 1 is nearer to the text than button 2 ...button().nearestTo().text() or() production Logic or operator Examples: scene 1 -------------- --------------- | button | | icon | -------------- --------------- scene 2 -------------- --------------- | button | | text | -------------- --------------- In case, that your reference element can have multiple values, in the following example, the element right of the button can be either icon or text. You can use the or() relation, so your instruction is valid for both scenes const button = await aui.get().button().rightOf().icon().or().text().exec(); console.log(button); Returns the same button for both cases console output: [ DetectedElement { name: 'BUTTON', text: 'button', bndbox: BoundingBox { xmin: 900, ymin: 910, xmax: 920, ymax: 930 } } ] rightOf() production Filters for an element right of another element. Takes an optional parameter index to select the nth element (starting with 0) Examples: -------------- -------------- -------------- | leftEl | | rightEl0 | | rightEl1 | -------------- -------------- -------------- // Returns rightEl0 because rightEl0 is the first element right of leftEl ...rightEl().rightOf().leftEl() ...rightEl().rightOf(0).leftEl() // Returns rightEl1 because rightEl1 is the second element right of leftEl ...rightEl().rightOf(1).leftEl() // Returns no element because leftEl is left of rightEl ...leftEl().rightOf().rightEl() @param {number} [optionalIndex=0] - element index  ","version":"0.13.1","tagName":"h2"},{"title":"Checks​","type":1,"pageTitle":"Table of Contents","url":"/docs/api/API/table-of-contents#checks","content":" Nameexists() production Expects that filtered element exists. Always use together with expect(). Note Throws an error and stops the execution when the element is not found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does not exist. await aui.expect().text('Login').exists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').exists().exec() } catch (error) { console.log('Too bad we could not find the element!'); } notExists() production Expects that filtered element not exists. Always use together with expect(). Note Throws an error and stops the execution when the element is found. You can catch the error and decide what to do as in the examples below. Examples: // Stops execution at this point when the element does exist. await aui.expect().text('Login').notExists().exec() // This will catch the error and log a message // But the execution will continue afterwards try { await aui.expect().text('Login').notExists().exec() } catch (error) { console.log('Too bad we could find the element!'); }   ","version":"0.13.1","tagName":"h2"},{"title":"Getters​","type":1,"pageTitle":"Table of Contents","url":"/docs/api/API/table-of-contents#getters","content":" Nameget() production Returns an array with all filtered elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const text = await aui.get().text('Sign').exec(); console.log(text); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 } } ] getAll() production Returns an array with all detected elements. A detected element has the following properties: name of the elementtext content of elementbndbox: location of element described with coordinates of a bounding box Examples: const detectedElements = await aui.getAll().exec(); console.log(detectedElements); console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 }, DetectedElement { name: 'ICON', text: 'search', bndbox: BoundingBox { xmin: 250.8204241071428, ymin: 300.21332310267857, xmax: 450.6304241071428, ymax: 950.47812834821428 }, ... 381 more items } ]  ","version":"0.13.1","tagName":"h2"},{"title":"Annotations, Screenshots and Videos","type":0,"sectionRef":"#","url":"/docs/general/Element Selection/annotations-and-screenshots","content":"","keywords":"","version":"0.13.1"},{"title":"Interactive Annotation​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/general/Element Selection/annotations-and-screenshots#interactive-annotation","content":" info Windows Users Please use annotate() as explained in the section below. The interactive annotation aui.annotateInteractively() currently leads to an error on Windows.  An interactive annotation is in essence three components:  A screenshot of whatever the AskUI controller is told to see, as defined in the config file:    Annotations, marked by the red boxes you see, which are added by the machine learning model.    Element-Descriptions, which are labels applied to the annotations of the screenshot.  Clicking an element will copy this element-description, which we can then use in the step 3 of Write Your First Instruction, which is actually using that run instructions.    ","version":"0.13.1","tagName":"h2"},{"title":"Static Annotation​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/general/Element Selection/annotations-and-screenshots#static-annotation","content":" The helper function annotate() creates an annotated HTML file of the given image and saves it into the given path. If no image is given, then it captures the specified screen and annotates the captured image.  Synopsis and Arguments Synopsis UiControlClient.annotate(); // or UiControlClient.annotate({ imagePath: '&lt;your-image-path&gt;', outputPath: '&lt;path-of-the-generated-html&gt;', fileNamePrefix: '&lt;prefix-of-the-output-file&gt;', customElements: CustomElementJson[] // more details in the example below }); Arguments If no argument is given, A screenshot of your specified screen will be taken, and annotated. Thereafter, it will be saved as an interactive HTML file into the report/ folder. imagePath: If defined, the image at the path is loaded and annotated.If not defined, a screenshot of your specified screen is taken and annotated. outputPath: If defined, the generated HTML report will be saved in this path.If not defined, a folder report/ will be created in the project root. fileNamePrefix: The prefix for the resulting HTML report. customElements: A list of custom elements. The AI model will use them to detect elements similar to them. elements: A list of detected elements obtained with get(). Only the bounding boxes for those elements will be rendered.  Example  /* Takes a screenshot of your selected display, and produces an HTML report file inside the default output path &lt;project_root&gt;/report. */ await aui.annotate(); /* Loads the image 'my-screenshot.png' and produces an HTML report file inside the output path 'annotation-reports/' */ await aui.annotate( { imagePath: 'my-screenshot.png', outputPath: 'annotation-reports/' }); /* Loads the image 'my-screenshot.png' together with the custom elements and produces an HTML report file inside the output path 'annotation-reports/' */ await aui.annotate( { imagePath: 'my-screenshot.png', outputPath: 'annotaion-reports/', customElements: [ { customImage: '&lt;custom_image_path|base64Image&gt;', imageCompareFormat: 'grayscale', name: 'custom element 1' }, { /* for this custom element the OCR AI model will be used to extract text from the image, since no name was given. */ customImage: '&lt;custom_image2_path|base64Image&gt;', imageCompareFormat: 'RGB', } ] }); /* Annotates only the text elements with the text 'User Interfaces?' */ const detectedElements = await aui.get().text().withText(&quot;User Interfaces?&quot;).exec(); await aui.annotate( { elements: detectedElements });   ","version":"0.13.1","tagName":"h2"},{"title":"Taking Screenshots​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/general/Element Selection/annotations-and-screenshots#taking-screenshots","content":" If you want to see what AskUI sees at a specific point in the execution you can use TypeScript to create a screenshot. Here is a code-snippet you can copy and paste into your code that saves an image with the name screenshot.png to the root-folder of your project.  info Do not forget the import mentioned at the start of the snippet!  // Add this to the start of your AskUI-file containing your workflows/instructions import * as fs from 'fs'; // First, get all the information from the annotation // This will also save an interactive HTML file to the 'report/' folder const annotation = await aui.annotate(); // The screenshot is contained as a string in 'base64' format // Create a buffer with the base64 image let buf = Buffer.from(annotation.image.split('base64,')[1], 'base64'); // Write the file fs.writeFileSync(&quot;./test.png&quot;, buf);   ","version":"0.13.1","tagName":"h2"},{"title":"Recording Videos​","type":1,"pageTitle":"Annotations, Screenshots and Videos","url":"/docs/general/Element Selection/annotations-and-screenshots#recording-videos","content":" caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly. ","version":"0.13.1","tagName":"h2"},{"title":"Assertions","type":0,"sectionRef":"#","url":"/docs/general/Element Selection/assertions","content":"","keywords":"","version":"0.13.1"},{"title":"Assert the (non) Existence of Elements​","type":1,"pageTitle":"Assertions","url":"/docs/general/Element Selection/assertions#assert-the-non-existence-of-elements","content":" To validate if an element exists or not we use expect() in combination with exists() or notExists.  // Expect that a button with text 'Go for it' exists await aui.expect().text('Login').exists().exec(); // Expect that a text 'Do not go for it' not exists await aui.expect().text('Login').notExists().exec();   ","version":"0.13.1","tagName":"h2"},{"title":"Assert the Correctness of Values​","type":1,"pageTitle":"Assertions","url":"/docs/general/Element Selection/assertions#assert-the-correctness-of-values","content":" Let's say you want to check if your automation actually wrote something into a textfield. You can do two things:  ","version":"0.13.1","tagName":"h2"},{"title":"1. Use expect() to check if the text in the textfield matches​","type":1,"pageTitle":"Assertions","url":"/docs/general/Element Selection/assertions#1-use-expect-to-check-if-the-text-in-the-textfield-matches","content":" This technique is useful if the text you entered is unique on the screen.  // Type something into a textfield await aui.typeIn(&quot;Please find me&quot;).textfield().contains().text(&quot;Enter email&quot;).exec(); // Assert if the textfield contains the value await aui.expect().textfield().contains().text('Please find me').exists().exec();   ","version":"0.13.1","tagName":"h3"},{"title":"2. Retrieve the element with get() and use an assertions library​","type":1,"pageTitle":"Assertions","url":"/docs/general/Element Selection/assertions#2-retrieve-the-element-with-get-and-use-an-assertions-library","content":" If your value is not unique on your screen you can retrieve the element with get() and a different selector. For example with a relational selector like below(). With an assertion library you can assert if the value is correct.  Jest comes with assertions. You only have to import them into your AskUI-file.  info Do not forget the import mentioned at the start of the snippet!  // Add this to the start of your AskUI-file containing your workflows/instructions import {expect, jest, test} from '@jest/globals'; // Type something into a textfield await aui.typeIn(&quot;Please find me&quot;).textfield().contains().text(&quot;Enter email&quot;).exec(); // You have to retrieve the text you wrote inside the textfield here // If you retrieve the textfield it does not contain the text inside of it const textfield = await aui.get().text().below().text(&quot;User email&quot;).exec(); // below() returns an array. We want the first element of that array! expect(textfield[0].text).toBe(&quot;Please find me&quot;);  ","version":"0.13.1","tagName":"h3"},{"title":"Supported Keys","type":0,"sectionRef":"#","url":"/docs/api/Supported-Keys","content":"Supported Keys Scroll the table to the right if the table is not shown completely 🙃. Names\tDescription\tPress\tRelease\tGroupalt\tALT key\tspecial case\tspecial case\t🪄 Modifier capslock\tCAPS LOCK key\tspecial case\tspecial case\t🪄 Modifier command\tRight Windows key (Natural keyboard)\tspecial case\tspecial case\t🪄 Modifier command\tLeft Windows key (Natural keyboard)\tspecial case\tspecial case\t🪄 Modifier control\tCTRL key\tspecial case\tspecial case\t🪄 Modifier left_control\tLeft CONTROL key\tspecial case\tspecial case\t🪄 Modifier numpad_lock\tNUM LOCK key\tspecial case\tspecial case\t🪄 Modifier right_alt\tRight ALT key\tspecial case\tspecial case\t🪄 Modifier right_control\tRight CONTROL key\tspecial case\tspecial case\t🪄 Modifier right_shift\tRight SHIFT key\tspecial case\tspecial case\t🪄 Modifier shift\tSHIFT key\tspecial case\tspecial case\t🪄 Modifier Left ALT key\tspecial case\tspecial case\t🪄 Modifier Left SHIFT key\tspecial case\tspecial case\t🪄 Modifier 0\t0 key\tworks\tworks\t🔠 Alphanumeric 1\t1 key\tworks\tworks\t🔠 Alphanumeric 2\t2 key\tworks\tworks\t🔠 Alphanumeric 3\t3 key\tworks\tworks\t🔠 Alphanumeric 4\t4 key\tworks\tworks\t🔠 Alphanumeric 5\t5 key\tworks\tworks\t🔠 Alphanumeric 6\t6 key\tworks\tworks\t🔠 Alphanumeric 7\t7 key\tworks\tworks\t🔠 Alphanumeric 8\t8 key\tworks\tworks\t🔠 Alphanumeric 9\t9 key\tworks\tworks\t🔠 Alphanumeric a\tA key\tworks\tworks\t🔠 Alphanumeric b\tB key\tworks\tworks\t🔠 Alphanumeric c\tC key\tworks\tworks\t🔠 Alphanumeric d\tD key\tworks\tworks\t🔠 Alphanumeric e\tE key\tworks\tworks\t🔠 Alphanumeric f\tF key\tworks\tworks\t🔠 Alphanumeric g\tG key\tworks\tworks\t🔠 Alphanumeric h\tH key\tworks\tworks\t🔠 Alphanumeric i\tI key\tworks\tworks\t🔠 Alphanumeric j\tJ key\tworks\tworks\t🔠 Alphanumeric k\tK key\tworks\tworks\t🔠 Alphanumeric l\tL key\tworks\tworks\t🔠 Alphanumeric m\tM key\tworks\tworks\t🔠 Alphanumeric n\tN key\tworks\tworks\t🔠 Alphanumeric o\tO key\tworks\tworks\t🔠 Alphanumeric p\tP key\tworks\tworks\t🔠 Alphanumeric q\tQ key\tworks\tworks\t🔠 Alphanumeric r\tR key\tworks\tworks\t🔠 Alphanumeric s\tS key\tworks\tworks\t🔠 Alphanumeric t\tT key\tworks\tworks\t🔠 Alphanumeric u\tU key\tworks\tworks\t🔠 Alphanumeric v\tV key\tworks\tworks\t🔠 Alphanumeric w\tW key\tworks\tworks\t🔠 Alphanumeric x\tX key\tworks\tworks\t🔠 Alphanumeric y\tY key\tworks\tworks\t🔠 Alphanumeric z\tZ key\tworks\tworks\t🔠 Alphanumeric backspace\tBACKSPACE key\tworks\tworks\t⚙️ Controls delete\tDEL key\tworks\tworks\t⚙️ Controls enter\tENTER key\tworks\tworks\t⚙️ Controls escape\tESC key\tworks\tworks\t⚙️ Controls space\tSPACEBAR key\tworks\tworks\t⚙️ Controls tab\tTAB key\tworks\tworks\t⚙️ Controls &quot;The &lt; &gt; keys on the US standard keyboard, or the \\\\| key on the non-US 102-key keyboard&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols Used for miscellaneous characters; it can vary by keyboard.\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the 'single-quote/double-quote' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the ']}' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '\\|' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '[' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '`~' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '/?' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;For any country/region, the '.' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;For any country/region, the '-' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;For any country/region, the ',' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;For any country/region, the '+' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols &quot;Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the ';:' key&quot;\tUnsupported\tUnsupported\t#️⃣ Symbols down\tDOWN ARROW key\tbroken\tbroken\t➡️ Arrows left\tLEFT ARROW key\tworks\tworks\t➡️ Arrows right\tRIGHT ARROW key\tworks\tworks\t➡️ Arrows up\tUP ARROW key\tworks\tworks\t➡️ Arrows f1\tF1 key\tworks\tworks\t⚡️ Function keys f10\tF10 key\tbroken\tbroken\t⚡️ Function keys f11\tF11 key\tworks\tworks\t⚡️ Function keys f12\tF12 key\tworks\tworks\t⚡️ Function keys f13\tF13 key\tworks\tworks\t⚡️ Function keys f14\tF14 key\tworks\tworks\t⚡️ Function keys f15\tF15 key\tworks\tworks\t⚡️ Function keys f16\tF16 key\tworks\tworks\t⚡️ Function keys f17\tF17 key\tworks\tworks\t⚡️ Function keys f18\tF18 key\tworks\tworks\t⚡️ Function keys f19\tF19 key\tworks\tworks\t⚡️ Function keys f2\tF2 key\tworks\tworks\t⚡️ Function keys f20\tF20 key\tworks\tworks\t⚡️ Function keys f21\tF21 key\tworks\tworks\t⚡️ Function keys f22\tF22 key\tworks\tworks\t⚡️ Function keys f23\tF23 key\tworks\tworks\t⚡️ Function keys f24\tF24 key\tworks\tworks\t⚡️ Function keys f3\tF3 key\tworks\tworks\t⚡️ Function keys f4\tF4 key\tworks\tworks\t⚡️ Function keys f5\tF5 key\tworks\tworks\t⚡️ Function keys f6\tF6 key\tworks\tworks\t⚡️ Function keys f7\tF7 key\tworks\tworks\t⚡️ Function keys f8\tF8 key\tworks\tworks\t⚡️ Function keys f9\tF9 key\tworks\tworks\t⚡️ Function keys audio_forward Unsupported\tUnsupported\t⏯️ Media controls audio_mute\tVolume Mute key\tworks\tworks\t⏯️ Media controls audio_next\tNext Track key\tworks\tworks\t⏯️ Media controls audio_pause Unsupported\tUnsupported\t⏯️ Media controls audio_play\tPlay/Pause Media key\tbroken\tbroken\t⏯️ Media controls audio_prev\tPrevious Track key\tworks\tworks\t⏯️ Media controls audio_random Unsupported\tUnsupported\t⏯️ Media controls audio_repeat Unsupported\tUnsupported\t⏯️ Media controls audio_rewind Unsupported\tUnsupported\t⏯️ Media controls audio_stop\tStop Media key\tworks\tworks\t⏯️ Media controls audio_vol_down\tVolume Down key\tworks\tworks\t⏯️ Media controls audio_vol_up\tVolume Up key\tworks\tworks\t⏯️ Media controls Play key\tUnsupported\tUnsupported\t⏯️ Media controls Select Media key\tUnsupported\tUnsupported\t⏯️ Media controls PAUSE key\tUnsupported\tUnsupported\t⏯️ Media controls numpad_*\tMultiply key\tworks\tworks\t🔢 Keypad keys numpad_+\tAdd key\tworks\tworks\t🔢 Keypad keys numpad_-\tSubtract key\tworks\tworks\t🔢 Keypad keys numpad_.\tDecimal key\tworks\tworks\t🔢 Keypad keys numpad_/\tDivide key\tbroken\tbroken\t🔢 Keypad keys numpad_0\tNumeric keypad 0 key\tworks\tworks\t🔢 Keypad keys numpad_1\tNumeric keypad 1 key\tworks\tworks\t🔢 Keypad keys numpad_2\tNumeric keypad 2 key\tworks\tworks\t🔢 Keypad keys numpad_3\tNumeric keypad 3 key\tworks\tworks\t🔢 Keypad keys numpad_4\tNumeric keypad 4 key\tworks\tworks\t🔢 Keypad keys numpad_5\tNumeric keypad 5 key\tbroken\tbroken\t🔢 Keypad keys numpad_6\tNumeric keypad 6 key\tworks\tworks\t🔢 Keypad keys numpad_7\tNumeric keypad 7 key\tworks\tworks\t🔢 Keypad keys numpad_8\tNumeric keypad 8 key\tworks\tworks\t🔢 Keypad keys numpad_9\tNumeric keypad 9 key\tworks\tworks\t🔢 Keypad keys IME PROCESS key\tUnsupported\tUnsupported\t🈯️ International IME mode change request\tUnsupported\tUnsupported\t🈯️ International IME accept\tUnsupported\tUnsupported\t🈯️ International IME nonconvert\tUnsupported\tUnsupported\t🈯️ International IME convert\tUnsupported\tUnsupported\t🈯️ International IME Off\tUnsupported\tUnsupported\t🈯️ International IME Kanji mode\tUnsupported\tUnsupported\t🈯️ International IME Hanja mode\tUnsupported\tUnsupported\t🈯️ International IME final mode\tUnsupported\tUnsupported\t🈯️ International IME Junja mode\tUnsupported\tUnsupported\t🈯️ International IME On\tUnsupported\tUnsupported\t🈯️ International IME Hangul mode\tUnsupported\tUnsupported\t🈯️ International IME Hanguel mode (maintained for compatibility; use VK_HANGUL)\tUnsupported\tUnsupported\t🈯️ International IME Kana mode\tUnsupported\tUnsupported\t🈯️ International X2 mouse button\tUnsupported\tUnsupported\t🖱️Mouse X1 mouse button\tUnsupported\tUnsupported\t🖱️Mouse Middle mouse button (three-button mouse)\tUnsupported\tUnsupported\t🖱️Mouse Left mouse button\tUnsupported\tUnsupported\t🖱️Mouse Right mouse button\tUnsupported\tUnsupported\t🖱️Mouse end\tEND key\tworks\tworks\t🦄 Special purpose home\tHOME key\tworks\tworks\t🦄 Special purpose insert\tINS key\tworks\tworks\t🦄 Special purpose lights_kbd_down Unsupported\tUnsupported\t🦄 Special purpose lights_kbd_toggle Unsupported\tUnsupported\t🦄 Special purpose lights_kbd_up Unsupported\tUnsupported\t🦄 Special purpose lights_mon_down Unsupported\tUnsupported\t🦄 Special purpose lights_mon_up Unsupported\tUnsupported\t🦄 Special purpose pagedown\tPAGE DOWN key\tworks\tworks\t🦄 Special purpose pageup\tPAGE UP key\tworks\tworks\t🦄 Special purpose printscreen\tPRINT SCREEN key\tbroken\tbroken\t🦄 Special purpose Clear key\tUnsupported\tUnsupported\t🦄 Special purpose PA1 key\tUnsupported\tUnsupported\t🦄 Special purpose Zoom key\tUnsupported\tUnsupported\t🦄 Special purpose Erase EOF key\tUnsupported\tUnsupported\t🦄 Special purpose ExSel key\tUnsupported\tUnsupported\t🦄 Special purpose CrSel key\tUnsupported\tUnsupported\t🦄 Special purpose Attn key\tUnsupported\tUnsupported\t🦄 Special purpose &quot;Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP&quot;\tUnsupported\tUnsupported\t🦄 Special purpose Start Application 2 key\tUnsupported\tUnsupported\t🦄 Special purpose Start Application 1 key\tUnsupported\tUnsupported\t🦄 Special purpose Start Mail key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Start and Home key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Favorites key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Search key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Stop key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Refresh key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Forward key\tUnsupported\tUnsupported\t🦄 Special purpose Browser Back key\tUnsupported\tUnsupported\t🦄 Special purpose SCROLL LOCK key\tUnsupported\tUnsupported\t🦄 Special purpose Separator key\tUnsupported\tUnsupported\t🦄 Special purpose Computer Sleep key\tUnsupported\tUnsupported\t🦄 Special purpose Applications key (Natural keyboard)\tUnsupported\tUnsupported\t🦄 Special purpose HELP key\tUnsupported\tUnsupported\t🦄 Special purpose EXECUTE key\tUnsupported\tUnsupported\t🦄 Special purpose PRINT key\tUnsupported\tUnsupported\t🦄 Special purpose SELECT key\tUnsupported\tUnsupported\t🦄 Special purpose CLEAR key\tUnsupported\tUnsupported\t🦄 Special purpose Control-break processing\tUnsupported\tUnsupported\t🦄 Special purpose","keywords":"","version":"0.13.1"},{"title":"Automation Recorder","type":0,"sectionRef":"#","url":"/docs/general/Element Selection/automation-recorder","content":"Automation Recorder caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.13.1"},{"title":"Multi Language Support","type":0,"sectionRef":"#","url":"/docs/general/Element Selection/multi-language-support","content":"Multi Language Support caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.13.1"},{"title":"Prompt Selectors","type":0,"sectionRef":"#","url":"/docs/general/Element Selection/prompt-selectors","content":"Prompt Selectors caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.13.1"},{"title":"Tables","type":0,"sectionRef":"#","url":"/docs/general/Element Selection/tables","content":"Tables caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.13.1"},{"title":"Scraping and Storing Elements","type":0,"sectionRef":"#","url":"/docs/general/Element Selection/scraping-and-storing-lements","content":"","keywords":"","version":"0.13.1"},{"title":"Basic Usage​","type":1,"pageTitle":"Scraping and Storing Elements","url":"/docs/general/Element Selection/scraping-and-storing-lements#basic-usage","content":" The get()-Instruction returns an array of all the elements it found. It looks like this example:   console output: [ DetectedElement { name: 'TEXT', text: 'Sign In', bndbox: BoundingBox { xmin: 1128.2720982142857, ymin: 160.21332310267857, xmax: 1178.8204241071428, ymax: 180.83512834821428 } }, ... ]   Usually you do not want every element from your UI returned. So you pair it with an element-selector:  const textFieldText = await aui .get() .text() .in() .textfield() .exec();   [ DetectedElement { name: 'text', text: 'Search', bndbox: BoundingBox { xmin: 488, ymin: 138, xmax: 548, ymax: 164 }, colors: [ '', '', '' ] } ]   ","version":"0.13.1","tagName":"h2"},{"title":"Extract the Value​","type":1,"pageTitle":"Scraping and Storing Elements","url":"/docs/general/Element Selection/scraping-and-storing-lements#extract-the-value","content":" You can extract the value by reading the text-property of the DetectedElement.  Notice: textFieldText is an array. You have to iterate over it or use an index to access the DetectedElement.  // Access by index // textFieldTextValue gets the value 'Search' const textFieldTextValue = textFieldText?.[0]?.text;   ","version":"0.13.1","tagName":"h2"},{"title":"Use Extracted Value as Input​","type":1,"pageTitle":"Scraping and Storing Elements","url":"/docs/general/Element Selection/scraping-and-storing-lements#use-extracted-value-as-input","content":" You can use the extracted value as input for another textfield for example:  await aui .typeIn(textFieldTextValue) .textfield() .contains() .text() .withText(&quot;AskUI&quot;) .exec();  ","version":"0.13.1","tagName":"h2"},{"title":"Desktop Automation","type":0,"sectionRef":"#","url":"/docs/general/Executing Automations/desktop-automation","content":"Desktop Automation caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.13.1"},{"title":"Mobile Automation","type":0,"sectionRef":"#","url":"/docs/general/Executing Automations/mobile-automation","content":"","keywords":"","version":"0.13.1"},{"title":"Android​","type":1,"pageTitle":"Mobile Automation","url":"/docs/general/Executing Automations/mobile-automation#android","content":" In this tutorial, we will walk you through how to set up an Android device for automating mobile apps running on Android devices (physical or emulated).  ","version":"0.13.1","tagName":"h2"},{"title":"Requirements​","type":1,"pageTitle":"Mobile Automation","url":"/docs/general/Executing Automations/mobile-automation#requirements","content":" Android device: real or emulated.  Set up a Real Android Device​  This part is for setting up a real Android device. If you want to use an Android emulator instead, then you can skip it and go directly to the next step.  To use additional development features in an Android device, you need to enable the Developer Options within the device. To enable the Developer Options, tap the Build Number option 7 times. You can find this option in one of the following locations, depending on your Android version:  Android 9 (API level 28) and higher: Settings &gt; About Phone &gt; Build NumberAndroid 8.0.0 (API level 26) and Android 8.1.0 (API level 26): Settings &gt; System &gt; About Phone &gt; Build NumberAndroid 7.1 (API level 25) and lower: Settings &gt; About Phone &gt; Build Number  After enabling the Developer Options, you can enable the USB debugging option. This option will allow the Android Studio and other SDK tools to recognize your Android device via USB. To enable USB debugging, toggle the USB debugging option in the Developer Options menu. You can find this option in one of the following locations, depending on your Android version:  Android 9 (API level 28) and higher: Settings &gt; System &gt; Advanced &gt; Developer Options &gt; USB debuggingAndroid 8.0.0 (API level 26) and Android 8.1.0 (API level 26): Settings &gt; System &gt; Developer Options &gt; USB debuggingAndroid 7.1 (API level 25) and lower: Settings &gt; Developer Options &gt; USB debugging  ","version":"0.13.1","tagName":"h3"},{"title":"Install Android SDK Command-line Tools​","type":1,"pageTitle":"Mobile Automation","url":"/docs/general/Executing Automations/mobile-automation#install-android-sdk-command-line-tools","content":" Download the SDK Platform-Tools from the official site.  Unzip the .zip file. You can find the adb binary within the extracted directory.  cd platform-tools # Show every available Android devices ./adb devices   info The command adb is usually not added to your $PATH and will not be available globally. Please follow the official docs to set it up.  ","version":"0.13.1","tagName":"h3"},{"title":"3. Set Up the ADBKeyboard​","type":1,"pageTitle":"Mobile Automation","url":"/docs/general/Executing Automations/mobile-automation#3-set-up-the-adbkeyboard","content":" Until now, you have prepared your Android device and now you are ready to go for automating our Android app. But before you jump into this phase, you will set up one more utility that will make the procedure easier.  ADBKeyboard is a virtual keyboard that can be installed on Android devices. It enables us to type within the Android device by using command lines commands via adb.  One noticeable advantage of using ADBKeyboard is that it can also handle base64 encoding, which becomes handy if you want to type Unicode characters such as emojis🔥 For more details about this virtual keyboard, see here.  To install the ADBKeyboard on your device,  Download the ADBKeyboard package from this GitHub Repository (Important: Version 2.0) Unzip it. Find your device: # make sure that your Android device is connected. # in case of using the emulator, it should be running adb devices Install the ADBKeyboard on the device: # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; install ADBKeyboard.apk Configure the ADB Keyboard: adb -s &lt;your device id&gt; shell settings put secure default_input_method com.android.adbkeyboard/.AdbIME Enable the ADBKeyboard: adb -s &lt;your device id&gt; shell ime enable com.android.adbkeyboard/.AdbIME To check if it is enabled: Click on a textfield in an app and see if the ADB Keyboard {ON} notification is shown at the bottom of the screen.  ","version":"0.13.1","tagName":"h3"},{"title":"4. Done​","type":1,"pageTitle":"Mobile Automation","url":"/docs/general/Executing Automations/mobile-automation#4-done","content":" We are finally done with the preparation for automating apps running on Android devices.  You can now try your setup in our Automate Web Search on Android Devices Tutorial.  If you have a recurring or persisting issue while following this tutorial, don’t hesitate to ask the Outverse-Community for help!  ","version":"0.13.1","tagName":"h3"},{"title":"iOS Automation​","type":1,"pageTitle":"Mobile Automation","url":"/docs/general/Executing Automations/mobile-automation#ios-automation","content":" caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly. ","version":"0.13.1","tagName":"h2"},{"title":"Relational Selectors","type":0,"sectionRef":"#","url":"/docs/general/Element Selection/relational-selectors","content":"","keywords":"","version":"0.13.1"},{"title":"Selecting an Element by Visual Relation​","type":1,"pageTitle":"Relational Selectors","url":"/docs/general/Element Selection/relational-selectors#selecting-an-element-by-visual-relation","content":" After reading the next section you will know how to use the full power of all the relational element-descriptions. Additionally, you learn what pitfalls you can fall into and how to avoid them in the future.  We will use the Selectorshub practice page for the demonstration.  We’ll discuss the following relational element-descriptions:  above()below()contains()in()leftOf()rightOf()nearestTo()  ","version":"0.13.1","tagName":"h2"},{"title":"above()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/general/Element Selection/relational-selectors#above","content":" When you want to click on a textfield and it is above an element, like for example a button with the text Submit. You can do it with above(). The following code snippet moves the mouse to the textfield above the Submit-button:  await aui .click() .textfield() .above() .button() .withText('Submit') .exec();     ","version":"0.13.1","tagName":"h2"},{"title":"below()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/general/Element Selection/relational-selectors#below","content":" When you want to select a textfield you can do so by finding the correct label, which is often above the textfield. The following code snippet moves the mouse to the textfield below the text Mobile Number:  await aui .moveMouseTo() .textfield() .below() .text() .withText('Mobile Number') .exec();     ","version":"0.13.1","tagName":"h2"},{"title":"contains()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/general/Element Selection/relational-selectors#contains","content":" For selecting an element, that contains another element, contains() is the right candidate. It is especially useful if you want to select a textfield with a placeholder text inside it. The text inside the textfield is annotated as an element itself.  If you have problems with selecting a specific element, always run annotate() to create a screenshot of all the annotations or use annotateInteractively() to see if you need to use contains().  The following snippet moves the mouse to a textfield based on its placeholder text First Crush which is contained in the textfield:  await aui .moveMouseTo() .textfield() .contains() .text() .withText('First Crush') .exec();     ","version":"0.13.1","tagName":"h2"},{"title":"in()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/general/Element Selection/relational-selectors#in","content":" When you want to target an element that is inside another element you can use in().  -------------------- | outerEl | | -------------- | | | innerEl | | | -------------- | | | --------------------   The following code snippet moves the mouse pointer to the text of the first textfield AskUI found:  await aui .moveMouseTo() .text() .in() .textfield() .exec();     ","version":"0.13.1","tagName":"h2"},{"title":"leftOf() and rightOf()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/general/Element Selection/relational-selectors#leftof-and-rightof","content":" If you want to select an element based on its location left or right of another element you have to use leftOf() or rightOf() respectively.  💡 If you do not specify another element-description like withText() then you will get the nearest element. Otherwise, AskUI retrieves the nearest element that matches the element-description!  await aui .moveMouseTo() .text() .leftOf() .text() .withText('Denmark') .exec();     await aui .moveMouseTo() .text() .rightOf() .text() .withExactText('Joe Root') .exec();     ","version":"0.13.1","tagName":"h2"},{"title":"nearestTo()​","type":1,"pageTitle":"Relational Selectors","url":"/docs/general/Element Selection/relational-selectors#nearestto","content":" Filtering with the nearestTo() will return the element nearest to another element. This is useful when the direction is not clear on where to search. Especially responsive designs are prone to wrap elements into a new line where leftOf() and rightOf() would fail.  await aui .moveMouseTo() .textfield() .nearestTo() .text() .withTextRegex('User Em*') .exec();     ","version":"0.13.1","tagName":"h2"},{"title":"Additional Considerations About the Distance Metric​","type":1,"pageTitle":"Relational Selectors","url":"/docs/general/Element Selection/relational-selectors#additional-considerations-about-the-distance-metric","content":" The distance is not entirely based on physical distance. If you use an additional element-description like withText() it optimizes to find the best match. It also considers special cases, for example, modal dialogs. Therefore the element selected by AskUI might sometimes be wrong from a user's point of view.  You can use moveMouseTo() like in the following example to see what element an instruction targets.  await aui .moveMouseTo() .textfield() .above() .button() .withText('Submit') .exec()  ","version":"0.13.1","tagName":"h2"},{"title":"Multi Device Automation","type":0,"sectionRef":"#","url":"/docs/general/Executing Automations/multi-device-automation","content":"","keywords":"","version":"0.13.1"},{"title":"1. Download and Prepare the askui-ui-controller Binary for Each Device​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/general/Executing Automations/multi-device-automation#1-download-and-prepare-the-askui-ui-controller-binary-for-each-device","content":" Download the binary/binaries for the respective platform(s): info macOS After installation to Applications remove the quarantine flag with the following command run from a terminal: xattr -d com.apple.quarantine /Applications/askui-ui-controller.app Windows | macOS(intel) | macOS(silicon) | Linux  macOS and Linux only: If you downloaded the askui-ui-controller manually from the link above, you have to make it executable.  macOS: Mount the downloaded askui-ui-controller.dmg by double-clicking it and copy the askui-ui-controller.app to wherever you want to store it. Then, the executable binary will be within the .app package: askui-ui-controller.app/Contents/MacOS/askui-ui-controller Linux: Run the command below to make it executable: chmod +x askui-ui-controller.AppImage   If the remote devices runs Android, see Android Only.  ","version":"0.13.1","tagName":"h2"},{"title":"Android Only:​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/general/Executing Automations/multi-device-automation#android-only","content":" Prepare your Android device with this tutorial.  Use the commands below, if you want to connect your Android device via adb wirelessly:  # Connect the Android device with a # USB cable, and run this command: # Run this command to confirm that your # Android device is discoverable adb devices # will print the &lt;device-id&gt; # replace &lt;device-id&gt; with your device-id adb -s &lt;device-id&gt; tcpip 9000 # replace the &lt;local-ip-address&gt; adb -s &lt;device-id&gt; connect &lt;local-ip-address&gt;:9000 # Run this command, if you want to check the local # ip address of the android device adb -s &lt;device-id&gt; shell ip -f inet addr show wlan0 # Now you can disconnect the USB cable from the Android device. # Confirm that the Android device is recognised by adb wirelessly. adb devices   ","version":"0.13.1","tagName":"h3"},{"title":"2. Configure the jest.setup.ts​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/general/Executing Automations/multi-device-automation#2-configure-the-jestsetupts","content":" Figure out the local IP address of the remote device, and then change the &lt;local-ip-address&gt; of the jest.setup.ts:  import { UiControlClient, UiController } from 'askui'; let localDevice: UiControlClient; let remoteDevice: UiControlClient; jest.setTimeout(60 * 1000 * 60); beforeAll(async () =&gt; { // Get your AskUI credentials from https://app.askui.com/workspaces const credentials = { workspaceId: '&lt;your-workspace-id&gt;', token: '&lt;your-token&gt;', } // This client will communicate with // the controller running on this local device. localDevice = await UiControlClient.build({ uiControllerUrl: &quot;ws://127.0.0.1:6769&quot;, credentials: credentials, }); await localDevice.connect(); // This client will communicate with // the controller running on the remote device. // Replace the &lt;local-ip-address&gt; // In case of Android device, replace it with 127.0.0.1 remoteDevice = await UiControlClient.build({ uiControllerUrl: &quot;ws://&lt;local-ip-address&gt;:6769&quot;, credentials: credentials, }); await remoteDevice.connect(); }); afterAll(async () =&gt; { localDevice.close(); remoteDevice.close(); }); export { localDevice, remoteDevice };   ","version":"0.13.1","tagName":"h2"},{"title":"3. Run the Controller on Each Device​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/general/Executing Automations/multi-device-automation#3-run-the-controller-on-each-device","content":" danger Change to the directory of the askui-ui-controller binary first: See Download and Prepare step.  Run the binary AskUI UI Controller on the local and remote devices with the following command:  # Windows powershell .\\askui-ui-controller.exe --host 0.0.0.0 -d 0 -m # Windows cmd start askui-ui-controller.exe --host 0.0.0.0 -d 0 -m # macOS ./askui-ui-controller --host 0.0.0.0 -d 0 -m # Linux ./askui-ui-controller.AppImage --host 0.0.0.0 -d 0 -m   If running successfully, you should see the logs printed on the terminal, e.g:  [2023-01-02 17:31:19.634 +0100] DEBUG (AskuiUiController): Window is minimized. [2023-01-02 17:31:19.639 +0100] INFO (AskuiUiController): Selecting display number 0. [2023-01-02 17:31:19.641 +0100] INFO (AskuiUiController): Successfully started.   ","version":"0.13.1","tagName":"h2"},{"title":"Android Only:​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/general/Executing Automations/multi-device-automation#android-only-1","content":" If your remote device is an Android device, run the AskUI UI Controller on the local device (desktop) with an extra option as shown below:  # Windows powershell .\\askui-ui-controller.exe --host 0.0.0.0 -d 0 -m -r android # Windows cmd start askui-ui-controller.exe --host 0.0.0.0 -d 0 -m -r android # macOS ./askui-ui-controller --host 0.0.0.0 -d 0 -m -r android # Linux ./askui-ui-controller.AppImage --host 0.0.0.0 -d 0 -m -r android   Make sure that your local device (desktop) is running TWO DIFFERENT askui-ui-controller, if you want to control the local device and the Android device at the same time.  ","version":"0.13.1","tagName":"h3"},{"title":"4. Write the AskUI Code​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/general/Executing Automations/multi-device-automation#4-write-the-askui-code","content":" Write the AskUI code in test/my-first-askui-test-suite.test.ts:  import { localDevice, remoteDevice } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should work with multiple devices', async () =&gt; { const everyElement_remote = await remoteDevice.getAll().exec(); console.log(everyElement_remote); await localDevice.moveMouse(500,500).exec(); const everyElement_local = await localDevice.getAll().exec(); console.log(everyElement_local); }); });   ","version":"0.13.1","tagName":"h2"},{"title":"5. Run the Code​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/general/Executing Automations/multi-device-automation#5-run-the-code","content":" Run the command below to run the AskUI code:  npm run askui   ","version":"0.13.1","tagName":"h2"},{"title":"6. Conclusion​","type":1,"pageTitle":"Multi Device Automation","url":"/docs/general/Executing Automations/multi-device-automation#6-conclusion","content":" Now you should be able to automate multiple devices in the network. If you got any issues while following this tutorial, don't hesitate to ask our Outverse-Community! ","version":"0.13.1","tagName":"h2"},{"title":"Web Automation","type":0,"sectionRef":"#","url":"/docs/general/Executing Automations/web-automation","content":"Web Automation caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.13.1"},{"title":"Single Device Automation","type":0,"sectionRef":"#","url":"/docs/general/Executing Automations/single-device-automation","content":"Single Device Automation caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.13.1"},{"title":"Framework Configuration","type":0,"sectionRef":"#","url":"/docs/general/Getting Started/configure_test_framework","content":"","keywords":"","version":"0.13.1"},{"title":"Jest​","type":1,"pageTitle":"Framework Configuration","url":"/docs/general/Getting Started/configure_test_framework#jest","content":" You can configure Jest with the jest.config.ts. It should look something like this:  export default { preset: 'ts-jest', testEnvironment: 'node', setupFilesAfterEnv: ['./helper/jest.setup.ts'], sandboxInjectedGlobals: ['Math'] };   In case your Jest tests are executed slowly, make sure you have added 'Math' to sandboxInjectedGlobals.  caution The option sandboxInjectedGlobals was named extraGlobals in Jest v27 and lower. ","version":"0.13.1","tagName":"h2"},{"title":"Enterprise Checklist","type":0,"sectionRef":"#","url":"/docs/general/Getting Started/enterprise-checklist","content":"","keywords":"","version":"0.13.1"},{"title":"Network​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/general/Getting Started/enterprise-checklist#network","content":" This is often a tricky one. So if you experience problems installing AskUI that suggests the problem is missing internet access:  Please check our Troubleshooting - Proxy pageGet help from your IT-department  ","version":"0.13.1","tagName":"h2"},{"title":"Software Needed​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/general/Getting Started/enterprise-checklist#software-needed","content":" ","version":"0.13.1","tagName":"h2"},{"title":"Node.js​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/general/Getting Started/enterprise-checklist#nodejs","content":" Install Node.js from the official download page.  Open a terminal/Powershell and run the following commands to check if you have the correct versions of node and npm:  node --versionnpm --version  ","version":"0.13.1","tagName":"h3"},{"title":"Python​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/general/Getting Started/enterprise-checklist#python","content":" Python 3.10 or higher needs to be installed. Open a terminal/Powershell and run python --version to check if you have the correct version.  Official Download page for WindowsOfficial Download page for macOS  ","version":"0.13.1","tagName":"h3"},{"title":"Windows​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/general/Getting Started/enterprise-checklist#windows","content":" When you want to use the AskUI Runner you will create a virtual environment.  Follow these instruction. And consult your IT-department if you run into problems.  ","version":"0.13.1","tagName":"h3"},{"title":"Install Dependencies​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/general/Getting Started/enterprise-checklist#install-dependencies","content":" You will probably have to install dependencies like node-packages over a company internal repository management system like Artifactory.  Find out how to set up Node.js and Python for your internal repository management system. Consult your IT-department if necessary.Check our proxy troubleshooting page for AskUI specific guidance on how to setup the proxy for Node.js.  ","version":"0.13.1","tagName":"h3"},{"title":"Permissions​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/general/Getting Started/enterprise-checklist#permissions","content":" UiController/Remote Device Controller needs permissions for screen recording and accessibility features to control your machine like a human. Follow the instructions for your operating system.  ","version":"0.13.1","tagName":"h3"},{"title":"macOS​","type":1,"pageTitle":"Enterprise Checklist","url":"/docs/general/Getting Started/enterprise-checklist#macos","content":" Enable screen recording instructionsEnable accessibility instructions ","version":"0.13.1","tagName":"h3"},{"title":"Install AskUI Windows","type":0,"sectionRef":"#","url":"/docs/general/Getting Started/getting-started","content":"","keywords":"","version":"0.13.1"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/general/Getting Started/getting-started#requirements","content":" Node.js version 16 or abovenpm in version 7.10 or above (usually comes with the Node.js installation)A text editor/IDE like Visual Studio Code  ","version":"0.13.1","tagName":"h2"},{"title":"Access Token​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/general/Getting Started/getting-started#access-token","content":" As we need to prevent misuse of our API, we need you to create some credentials through our AskUI Studio (for free).  Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio.  ","version":"0.13.1","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/general/Getting Started/getting-started#installation","content":" Open a directory where you would like to place the AskUI setup and run this command. The command will ask you a few questions on how to customize your setup. If you are unsure which value to select press the Enter-key to select the default value. Also keep your workspace id and your access token ready which you created just before (We hope so 😉).  npx askui@latest init   note To create and serve a static HTML-Report you have to install Allure and then call allure serve ./allure-results from your root-directory.  ","version":"0.13.1","tagName":"h2"},{"title":"Download Remote Device Controller​","type":1,"pageTitle":"Install AskUI Windows","url":"/docs/general/Getting Started/getting-started#download-remote-device-controller","content":" Download the installer here. Start it and follow the installation process.  info You MUST start the Remote Device Controller as administrator: Right-Click the application and click Run as administrator.  Start the installed Remote Device Controller manually and select the screen you want to use.  Note: Either through the start menu, desktop shortcut or the executable in the install directory. ","version":"0.13.1","tagName":"h2"},{"title":"Install AskUI Android","type":0,"sectionRef":"#","url":"/docs/general/Getting Started/getting-started-android","content":"","keywords":"","version":"0.13.1"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI Android","url":"/docs/general/Getting Started/getting-started-android#requirements","content":" AskUI on own machine (See above)Prepared Android deviceAndroid SDK Command-line Tools ","version":"0.13.1","tagName":"h2"},{"title":"Install AskUI Linux","type":0,"sectionRef":"#","url":"/docs/general/Getting Started/getting-started-linux","content":"","keywords":"","version":"0.13.1"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI Linux","url":"/docs/general/Getting Started/getting-started-linux#requirements","content":" Node.js version 16 or abovenpm in version 7.10 or above (usually comes with the Node.js installation)A text editor/IDE like Visual Studio Code⚠️ Information for Wayland.  ","version":"0.13.1","tagName":"h2"},{"title":"Access Token​","type":1,"pageTitle":"Install AskUI Linux","url":"/docs/general/Getting Started/getting-started-linux#access-token","content":" As we need to prevent misuse of our API, we need you to create some credentials through our AskUI Studio (for free).  Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio.  ","version":"0.13.1","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Install AskUI Linux","url":"/docs/general/Getting Started/getting-started-linux#installation","content":" Open a directory where you would like to place the AskUI setup and run this command. The command will ask you a few questions on how to customize your setup. If you are unsure which value to select press the Enter-key to select the default value. Also keep your workspace id and your access token ready which you created just before (We hope so 😉).  npx askui@latest init   note To create and serve a static HTML-Report you have to install Allure and then call allure serve ./allure-results from your root-directory. ","version":"0.13.1","tagName":"h2"},{"title":"Install AskUI macOS","type":0,"sectionRef":"#","url":"/docs/general/Getting Started/getting-started-macos","content":"","keywords":"","version":"0.13.1"},{"title":"Requirements​","type":1,"pageTitle":"Install AskUI macOS","url":"/docs/general/Getting Started/getting-started-macos#requirements","content":" Node.js version 16 or abovenpm in version 7.10 or above (usually comes with the Node.js installation)A text editor/IDE like Visual Studio Code  danger Some users have reported instability running AskUI on macOS with external displays and/or virtual desktops (called Spaces). If you experience similar issues, please disconnect external displays and close virtual desktops, or see documentation on running AskUI in Docker.  ","version":"0.13.1","tagName":"h2"},{"title":"Access Token​","type":1,"pageTitle":"Install AskUI macOS","url":"/docs/general/Getting Started/getting-started-macos#access-token","content":" As we need to prevent misuse of our API, we need you to create some credentials through our AskUI Studio (for free).  Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio.  ","version":"0.13.1","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Install AskUI macOS","url":"/docs/general/Getting Started/getting-started-macos#installation","content":" Open a directory where you would like to place the AskUI setup and run this command. The command will ask you a few questions on how to customize your setup. If you are unsure which value to select press the Enter-key to select the default value. Also keep your workspace id and your access token ready which you created just before (We hope so 😉).  npx askui@latest init   note To create and serve a static HTML-Report you have to install Allure and then call allure serve ./allure-results from your root-directory. ","version":"0.13.1","tagName":"h2"},{"title":"How AskUI Works","type":0,"sectionRef":"#","url":"/docs/general/Getting Started/guide-how-askui-works","content":"","keywords":"","version":"0.13.1"},{"title":"Overview​","type":1,"pageTitle":"How AskUI Works","url":"/docs/general/Getting Started/guide-how-askui-works#overview","content":" In this article, we will give a detailed overview of AskUI`s architecture and how it works under the hood.    AskUI is built on top of a number of components. We will cover what these components are and how they work together to provide a flexible and reliable way to automate interactions with UI elements of any operating system or platform.  By the end of this article, whether you're a software developer, QA engineer, or automation specialist, you'll have a solid understanding of how AskUI works, and be able to use this knowledge to build more efficient automation for your project.  AskUI consists of three building blocks:  AskUI Control ClientAskUI UI ControllerAskUI Inference Server  We will step through each of them and see how they work together to perform UI automation.    ","version":"0.13.1","tagName":"h2"},{"title":"Glossary​","type":1,"pageTitle":"How AskUI Works","url":"/docs/general/Getting Started/guide-how-askui-works#glossary","content":" Throughout this article, we will use some terms that describe certain parts of AskUI. Some of them are used only internally and not exposed by the AskUI Control Client API, but are important for understanding how AskUI works and what it can do. Please refer to this table while reading.  Term\tDescriptionElement-description\tA description for a UI element. In the AskUI Control Client API, for example, it is the coded description like button() or textfield().contains().text('Email'). Action\tA method in the AskUI Control Client API that describes an action to be taken against the operating system. For example click(), type(). InputEvent (internal)\tA specific type of action to be taken against the operating system. For example MouseInputEvent or KeyboardInputEvent. ControlCommand (internal)\tA command sent to the UI controller telling what to perform on the operating system. It consists of one or more InputEvents.    ","version":"0.13.1","tagName":"h2"},{"title":"AskUI Control Client​","type":1,"pageTitle":"How AskUI Works","url":"/docs/general/Getting Started/guide-how-askui-works#askui-control-client","content":"   The AskUI Control Client provides the API that tells AskUI what/how to automate. Once you start using AskUI, you will mostly interact with AskUI via the AskUI Control Client. In most of our tutorials and demonstrations, you will see let aui: UIControlClient is declared and combined with an Action and Element-descriptions which ends up forming an instruction, e.g:  await aui.click().button().withText('login').exec();   As shown above, you form an instruction by chaining an Action with Element-descriptions using the Fluent API of the AskUI Control Client. It is designed as a fluent interface to increase readability and make it more understandable. The AskUI Control Client sends a request to the AskUI UI Controller: to take a screenshot.with a ControlCommand that tells what InputEvent to perform on the operating system. The AskUI Control Client communicates with the AskUI Inference Server: to send a screenshot to be annotated with the instruction.to receive the annotation, e.g. detected elements.  To use the AskUI Control Client, user credentials are required. User credentials can be obtained via our AskUI Studio. Please fill out this form to schedule a demonstration or request a trial to obtain access to AskUI Studio.  See our API documentation for more information on this component.    ","version":"0.13.1","tagName":"h2"},{"title":"AskUI UI Controller​","type":1,"pageTitle":"How AskUI Works","url":"/docs/general/Getting Started/guide-how-askui-works#askui-ui-controller","content":"   The AskUI UI Controller is a binary that controls the operating system. This binary gets automatically downloaded when the UiController is initialized by calling UiController.start(). Once executed, it stays in the background and communicates with the AskUI Control Client on a specific port to receive the ControlCommand. Based on the given ControlCommand, it triggers InputEvents respectively.  The AskUI UI Controller is responsible for: Taking a screenshot.Triggering the InputEvent, i.e MouseInputEvent, KeyboardInputEvent, or shell execution.Running the interactive annotation.  See our API documentation for more information on this component.    ","version":"0.13.1","tagName":"h2"},{"title":"AskUI Inference Server​","type":1,"pageTitle":"How AskUI Works","url":"/docs/general/Getting Started/guide-how-askui-works#askui-inference-server","content":"   The AskUI Inference Server is responsible for the prediction of UI elements within the given screenshot. As soon as it receives a request from the AskUI Control Client, it performs the prediction on the given image and returns the annotation to the AskUI Control Client.  For the inference, we use a machine-learning model that consists of several submodels:  Object Detector: Detects UI elements (e.g button, textfield).Icon Classifier: Predicts the class of an icon based on the detected objects (e.g. a user icon 👤).Optical Character Recognition (OCR): Converts the image of a text into text.Custom Element Detector: Searches for an area in the given screenshot that matches the image given by the Element-description .customElement().    ","version":"0.13.1","tagName":"h2"},{"title":"Them All in Action​","type":1,"pageTitle":"How AskUI Works","url":"/docs/general/Getting Started/guide-how-askui-works#them-all-in-action","content":" Assuming that we run AskUI on the same device we want to automate, the simplest synopsis can be described as such:    When running AskUI,  The AskUI Control Client checks whether it is needed to be processed by the Inference Server. If the code contains any of the Element-description or Getters, then the AskUI Control Client tells the AskUI UI Controller to take a screenshot of the given screen and sends it to the Inference Server. After the AskUI Control Client has retrieved the annotation back from the server, it sends a ControlCommand to the AskUI UI Controller. Afterwards, the AskUI UI Controller triggers the InputEvent on the operating system. // an example of AskUI code containing an element-identifier await aui.click().button().withText('Confirm').exec(); // Here, the element-description 'button()' is used together, // so the client will fire a request to the server. If the code contains an Action but no Element-description, then the AskUI Control Client sends the ControlCommand to the AskUI UI Controller to trigger the InputEvent directly. // an example of AskUI code containing only a command await aui.pressThreeKeys('control','alt','del').exec(); // It uses only a command 'pressThreeKeys()', // so it will be executed by the UI Controller directly.   An Element-description represents a specific type of UI element that can be recognized by inference. Most of the commonly used UI elements such as button, textfield are supported and can be used. An Action represents a specific type of action to be performed, i.e Mouse/Keyboard Input Event or Shell Command. This action can be performed on a specific element when combined with Element-descriptions or can be performed on its own as shown in the example right above.  Please visit our API Docs, if you want to learn more about different types of Element-description and Action.    ","version":"0.13.1","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"How AskUI Works","url":"/docs/general/Getting Started/guide-how-askui-works#conclusion","content":" Here we have seen the three core components of AskUI. If you aim to use AskUI in a more advanced way, e.g. integrating it into your CI/CD pipeline, it may be worthwhile to get an overview of how it is composed. For more practical examples, please refer to our Tutorials and API docs. And don't forget to come over to our Outverse-Community, if you have any questions about AskUI! ","version":"0.13.1","tagName":"h2"},{"title":"Start","type":0,"sectionRef":"#","url":"/docs/general/Getting Started/start","content":"Start Choose what you want to automate. 📦 Quickstart Try AskUI without any hassle in Gitpod. Try it now! 🪟 Windows Learn how to automate on Windows. Get started! 🤖 Android Learn how to automate an Android device. Get started! 👩🏻‍💻 macOS Learn how to automate on macOS Get started! 💻 Linux Learn how to automate on Linux. Get started! 🏢 Enterprise Checklist Setup in an enterprise environment. Get started! 📱 iOS 🚧 Coming soon! 🚧 Get started!","keywords":"","version":"0.13.1"},{"title":"Text and Element Selectors","type":0,"sectionRef":"#","url":"/docs/general/Element Selection/text-and-element-selectors","content":"","keywords":"","version":"0.13.1"},{"title":"Text Selectors​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#text-selectors","content":" When using AskUI for automated tests, text elements are playing a big role, since they typically appear more distinctively than other elements such as icons or text fields. Hence, knowing the benefits of using different text element-description can become critical in scaffolding a robust set of instructions.  AskUI provides four different element-descriptions to handle text elements:  containsText()withExactText()withText()withTextRegex()  For a convenient demonstration, we will use a Flutter web demo provided by Flutter.    ","version":"0.13.1","tagName":"h2"},{"title":"Basic Text Matching​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#basic-text-matching","content":" The simplest way to interact with a text element is to use withText(). Go to the demo app page and run the code below:  await aui.moveMouseTo().text('matrial').exec(); await aui.mouseLeftClick().exec();     withText() tries to find a text that matches the whole sequence. In most cases, you will want to stick to this method, as it supports Fuzzy Matching and tolerates misspelled text. Note that the above example code has two typos. matrial doesn't match the text in the demo app, which is Material, although AskUI will find the text element that roughly matches the text on the screen.    ","version":"0.13.1","tagName":"h3"},{"title":"Match a Sub-string within a Text​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#match-a-sub-string-within-a-text","content":" Even though the withText() is handy and quite reliable, you might face a case where you know only a fraction of the text element that you want to interact with. In such a case, containsText() is the element-description you might want to use:  await aui.moveMouseTo().text().containsText('Bottom').exec(); await aui.mouseLeftClick().exec();     Be aware that even if the containsText() also supports Fuzzy Matching, it won't match the whole sequence by just a few characters. Try to use this code with the given demo app:  // this will fail await aui.moveMouseTo().text().containsText('Bottm').exec();   You will notice that AskUI fails to match the given text Bottm, whereas this code will work:  // this will succeed await aui.moveMouseTo().text().containsText('Bottm appbar').exec(); // this will also succeed await aui.moveMouseTo().text().containsText('Bottom').exec();   The biggest difference between withText() and containsText() is whether it matches the text as a whole sequence or not. Matching many texts with a repeating affix could be a practical use case for the containsText().  It is recommended to experiment enough with these element-descriptions to find a better option that suits your specific case, since it's not easy to predict if the given text can be fuzzy-matched with target texts.    ","version":"0.13.1","tagName":"h3"},{"title":"Match the Exact Text​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#match-the-exact-text","content":" If you already know what text you are looking for, or if there are too many similar text elements, you can use the element-description withExactText().  From the main page of the demo app, go to Material-&gt;Data tables. You will see a table with different foods given with nutrition factors for each of them.  Let's say that we want to click on the items that has exactly 25.0 gm of Fat. In our demo app, only the Doughnut is the matching item. Run this code and see how withText() matches the text:   // Use this helper function to calculate the centroid of the detected elements. function getCentroid(element: any): any { let x = (element.bndbox.xmax - element.bndbox.xmin) / 2.0 + element.bndbox.xmin; let y = (element.bndbox.ymax - element.bndbox.ymin) / 2.0 + element.bndbox.ymin; return { x: x, y: y }; } // Find all the text elements that matches '25.0' const elts = await aui.get().text('25.0').exec(); // Then, iterate through the found elements and click on them for(let i=0; i&lt;elts.length; ++i){ const centroid = getCentroid(elts[i]); await aui.moveMouse(Math.round(centroid.x), Math.round(centroid.y)).exec(); await aui.mouseLeftClick().exec(); }     You will see that AskUI clicks not only the 25.0 but also the 26.0, which is the fat of the Apple pie. The result of this test code may differ in your case, because of the different screen resolution and the rendered-size of the demo app.  It will give you a clear idea where you will need to use the element-description withExactText() instead of withText(). Try to run the same code after replacing the withText() to withExactText():  // Find all the text elements that matches '25.0' exactly const elts = await aui.get().text().withExactText('25.0').exec(); // Then, iterate through the found elements and click on them for(let i=0; i&lt;elts.length; ++i){ const centroid = getCentroid(elts[i]); await aui.moveMouse(Math.round(centroid.x), Math.round(centroid.y)).exec(); await aui.mouseLeftClick().exec(); }     ","version":"0.13.1","tagName":"h3"},{"title":"Match Text with Regular Expression​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#match-text-with-regular-expression","content":" The element-description withTextRegex() supports Regular Expression to match any text in the most flexible way. Although it might be tricky to use regex due to its esoteric appearance, it is maybe one of the most versatile solutions when it comes to character matching.  On the same page of the demo app, let's say that we want to click on the items whose Calorie is between 300 and 500 (cal&gt;=300 &amp;&amp; cal&lt;500). Since regex doesn't support numeric comparison, we will try to match the digits in a sequence:  // Find all the text that matches the expression const cals = await aui.get().text().withTextRegex('[3-4][0-9]{2}').exec(); // Then, iterate through the found elements and click on them for(let i=0; i&lt;cals.length; ++i){ const coord = getCentroid(cals[i]); console.log(cals[i].text, coord); await aui.moveMouse(Math.round(coord.x), Math.round(coord.y)).exec(); await aui.mouseLeftClick().exec(); }     The regular expression [3-4][0-9]{2} means,  [3-4]: Match one character between 3 and 4.[0-9]: Match one character between 0 and 9.2: Repeat the previous expression ([0-9]) two times.  As the result, it will try to match every text that has a sequence starting with the digit 3 or 4, and then has any two digits in a row.  ","version":"0.13.1","tagName":"h3"},{"title":"Element Selectors​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#element-selectors","content":" caution This page is currently under construction. If you have any questions, please feel free to reach out to info@AskUI.com or book a meeting with Jonas over Calendly.  ","version":"0.13.1","tagName":"h2"},{"title":"Custom Elements​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#custom-elements","content":" caution Important: This increases the runtime quite a bit. So use it only if absolutely necessary.  ","version":"0.13.1","tagName":"h2"},{"title":"Overview​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#overview","content":" Custom Element Selection is a feature in AskUI that enables you to create custom element-descriptions for elements on the screen, instead of relying on the standard element-descriptions provided such as Button, Textfield, etc.  With this feature, you can define a custom element-description based on how the element is displayed on the screen. This can be particularly useful in situations where standard element-descriptions are unreliable due to the non-standard properties of the element. It provides greater flexibility and control, allowing you to tailor the automation to meet the specific needs of your application.  Here we will demonstrate how to use a custom element to explore Google Street View.  ","version":"0.13.1","tagName":"h3"},{"title":"Demonstration​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#demonstration","content":"   ","version":"0.13.1","tagName":"h3"},{"title":"Requirements​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#requirements","content":" AskUI - Follow this tutorial if you haven't installed it yet.Web Browser - We use Safari in this demonstration, but you can use any web browser you have.  ","version":"0.13.1","tagName":"h3"},{"title":"Understanding the customElement() in AskUI​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#understanding-the-customelement-in-askui","content":" customElement() is an element to look for on the screen that is defined by the user with a given image.  // Example of customElement() await aui .click() .customElement({ customImage: './logo.png', // required name: 'myLogo', // optional threshold: 0.9, // optional, defaults to 0.9 rotationDegreePerStep: 0, // optional, defaults to 0 imageCompareFormat: 'grayscale', // optional, defaults to 'grayscale' }) .exec();   Arguments​  customImage (string, required): A cropped image in the form of a base64 string or file path. name (string, optional): A unique name that can be used for filtering for the custom element. If not given, any text inside the custom image will be detected via OCR. threshold (number, optional): A threshold for how much a UI element needs to be similar to the custom element as defined. Takes values between 0.0 (== all elements are recognized as the custom element which is probably not what you want) and 1.0 (== elements need to look exactly like the customImage which is unlikely to be achieved as even minor differences count). Defaults to 0.9. rotationDegreePerStep (number, optional): Step size in rotation degree. Rotates the custom image by this step size until 360° is exceeded. The range is from 0 to 360. Defaults to 0. imageCompareFormat ('RGB' | 'grayscale', optional): The color compare style. grayscale compares the brightness of each pixel whereas RGB compares all three color. Defaults to grayscale.  Two Things to be Aware of When Using customElement()​  1) Create the Custom Image by Cropping it From The Actual Screen  To find a matching element from the screen, the custom image must be the same as it is displayed on the screen. By saying same in this sense, includes the size, rotation as well as the overlapping object, if there is any.    Note the left-bottom case of the illustration. A rotated element can be also matched, but only if everything else except the rotation are staying the same as it is displayed on the screen. If you can assure that your custom image is exactly the same as it is displayed on the screen + if you know the degree of the rotation, then you could consider using the rotationDegreePerStep parameter. And because AskUI will try to rotate the custom element for the whole revolution, a divisor of the rotated degree could be also used, e.g in the illustrated case, we can use not only 90 but also 45, 30, 15, etc. But since smaller degrees will require more iteration steps, it will increase the runtime by a notable amount. The simplest way to accomplish it might be to screen capture and crop the desired image from your screen directly. In Windows and macOS, you can use the built-in screen capture tool: Windows: Press windows + shift + s (Windows 10 or higher)macOS: Press cmd + shift + 4 In both cases, you will be asked to select a certain portion of the screen. On Windows, the captured image will be stored in the clipboard, so you will need to save it to an image file. On macOS, the image will be saved in the ~/Desktop by default.  tip The quality of the crop-out determines how good the element will be recognized. Make sure to: Save it as a PNG to avoid artifacts from compressionCrop it out as tight as possible. At best with no pixel space on the borders.  2) The Time of the Execution will Increase by a Notable Amount  To examine whether the custom image matches the given screen, AskUI iterates through the whole pixels of the given screen as well as the custom image. So it is likely to increase the runtime by a notable amount. Therefore, if the task could be accomplished with other element-descriptions such as icon(), button(), or text(), then it's maybe better to avoid using the customElement().  ","version":"0.13.1","tagName":"h3"},{"title":"Capture the Custom Element​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#capture-the-custom-element","content":" In this demonstration, we will search for a certain area in Google Street View. This can be enabled by pressing a button at the right corner of the Google Maps:    Can you see the yellow tiny human in the corner? We need an image of this human figure to interact with it. Let's make a screen capture of it. It shall look like this: Then save the image in your project's root directory with the name human-figure.png. The file tree of your project's root directory will be like this:  project_root/ ├─ node_modules/ ├─ test/ ├─ package.json ├─ tsconfig.json ├─ human-figure.png   ","version":"0.13.1","tagName":"h3"},{"title":"Write the AskUI Code​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#write-the-askui-code","content":" If you are prepared with the image above, let's jump into our code:  import { aui } from './helper/jest.setup'; describe('Explore the world in google maps', ()=&gt;{ it('open web browser and go to google maps', async ()=&gt;{ // open the start menu/spotlight to search for the web browser await aui.pressTwoKeys('command', 'space').exec(); // for macOS // await aui.pressKey('command').exec(); // for Windows await aui.waitFor(250).exec(); // wait for the start menu to open await aui.type('safari').exec(); // type the name of the web browser // await aui.type('chrome').exec(); // if you are using another web browser, replace the name to it await aui.pressKey('enter').exec(); // open the web browser await aui.waitFor(1000).exec(); // wait for the web browser to open await aui.type('https://maps.google.com').exec(); // type the url of the website await aui.pressKey('enter').exec(); // open the website await aui.waitFor(1000).exec(); // wait for the website to load }); it('search for a location', async ()=&gt;{ await aui.type('machu picchu').exec(); // type the name of the location await aui.pressKey('enter').exec(); // search for the location await aui.waitFor(2000).exec(); // wait for the map to load await aui.pressKey(',').exec(); // hide the side panel }); it('enable street view', async ()=&gt;{ // now we look for our custom element on the map // move the mouse to the custom element await aui.moveMouseTo() .customElement({ customImage: &quot;./human-figure.png&quot;, name: &quot;street-view-icon&quot;, threshold: 0.9, }) .exec(); // click and hold on the custom element await aui.mouseToggleDown().exec(); // drag the custom element(our human) to the location we want to explore // note the offset of -50 pixels along the y axis // we drag the human 10 pixels higher than the location Aguas Calientes await aui.moveMouseRelativelyTo(0, -10).text('Aguas Calientes').exec(); // release the mouse button await aui.mouseToggleUp().exec(); }); });   After successfully running the code, you will be able to see the landscape of Machu Picchu, the most iconic citadel of the lost empire Inca. It is possible that you end up with a plain Google Map without having the Street View enabled. It might be caused by various reasons, but the most likely scenario is due to the different resolutions of the screen (your display can have a different resolution than mine). You could try to adjust the amount of the pixel offset that is given to the moveMouseRelativelyTo(), for example, try with moveMouseRelativelyTo(-5, -15).  ","version":"0.13.1","tagName":"h3"},{"title":"Breaking Down the Code​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#breaking-down-the-code","content":" 1) Open the Web Browser and Go To the Desired Website​  One notable part of this step is the waitFor() after each execution. We have used it in three different lines of this code block. Check out the respective parts and adjust the amount of time to wait until the process is finished. It may take more or less time depending on the condition of your device and internet connection:  it('open web browser and go to google maps', async ()=&gt;{ // open the start menu/spotlight to search for the web browser await aui.pressTwoKeys('command', 'space').exec(); // for macOS // await aui.pressKey('command').exec(); // for Windows await aui.waitFor(250).exec(); // wait for the start menu to open await aui.type('safari').exec(); // type the name of the web browser await aui.pressKey('enter').exec(); // open the web browser await aui.waitFor(1000).exec(); // wait for the web browser to open await aui.type('https://maps.google.com').exec(); // type the url of the website await aui.pressKey('enter').exec(); // open the website await aui.waitFor(1000).exec(); // wait for the website to load });   Also, don't forget to change the key to press and the name of the web browser based on your condition.  2) Search for the Location​  Here we type our desired keyword into the textfield of Google Maps. As the textfield gets focused automatically, we can directly type in the keyword to the textfield:  it('search for a location', async ()=&gt;{ await aui.type('machu picchu').exec(); // type the name of the location await aui.pressKey('enter').exec(); // search for the location await aui.waitFor(2000).exec(); // wait for the map to load await aui.pressKey(',').exec(); // hide the side panel });   Note that we also press the ,(comma) key to hide the side panel of Google Maps. This is for hiding unnecessary information from the screen.  ","version":"0.13.1","tagName":"h3"},{"title":"Drag the Human Icon to the Desired Location​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#drag-the-human-icon-to-the-desired-location","content":" Finally, we drag our human, which we defined as our Custom Element, to the desired location.Firstly, we move the mouse cursor to our custom element.For dragging the mouse, we use the mouseToggleDown() to press-and-hold the mouse left button.After that, we move the mouse to the desired location.Thereafter, we use mouseToggleUp() to release the mouse button.  it('enable street view', async ()=&gt;{ // now we look for our custom element on the map // move the mouse to the custom element await aui.moveMouseTo() .customElement({ customImage: &quot;./human-figure.png&quot;, name: &quot;maps&quot;, threshold: 0.9, }) .exec(); // click and hold on the custom element await aui.mouseToggleDown().exec(); // drag the custom element(our human) to the location we want to explore // note the offset of -10 pixels in the y axis // we drag the human to 10 pixels higher than the location Aguas Calientes await aui.moveMouseRelativelyTo(0,-10).text('Aguas Calientes').exec(); // release the mouse button await aui.mouseToggleUp().exec(); });   Note the optional parameters for the customElement(), especially the threshold that is set to 0.9.This parameter can be set from 0.0 up to 1.0. 0.0 will consider every element on the screen as matched with the given image.1.0 will examine the given elements as strict as possible, so you might end up without any matching element found. So, the best scenario to set the threshold might be: Make the custom image to be as precise as possible (cropping from the screen). Keep the threshold relatively higher, but below 1.0  ","version":"0.13.1","tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#conclusion","content":" If you plan to program an automation where you have elements with non-standard properties, you might want to consider using the custom element feature of AskUI. But as mentioned above, keep in mind that, as a trade-off, it consumes more time than other features. Taking it into account, using a custom element to interact with the given UI can be a huge help, especially if the element lacks standard properties such as tag or appearance.  If you got any issues while following this article, don't hesitate to ask for help in our Outverse-Community. We are more than glad to hear about your experience and help!  ","version":"0.13.1","tagName":"h3"},{"title":"Recommended Practices​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#recommended-practices","content":" This page will give you examples of how to use AskUI efficiently and effectively.  ","version":"0.13.1","tagName":"h2"},{"title":"General Considerations on Speed of Inference for Different Element-Descriptions​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#general-considerations-on-speed-of-inference-for-different-element-descriptions","content":" Submodel\tTasks\tSpeedObject Detector\tCommon elements, e.g. a button or textfield\tfast 🚀 Icon Classifier\tPredict the class of an icon, e.g., a user icon\tfast 🚀 Optical Character Recognition (OCR)\tRecognize text\tfast 🚀 Custom Element Detector\tSearch via an image inside the screen\tslow 🐌  Avoid Optical Character Recognition (OCR) on Too Many Element​  If you use containsText(), withText(), withExactText() or withTextRegex() OCR is applied to all elements detected on your screen. This can slow down AskUI. It is more efficient to narrow down the elements first. For example, if you want to click a button with a specific text you should select all buttons first.  // Do this await aui.click().button('See here').exec(); await aui.click().text('Sign in').exec(); // And NOT this await aui.click('See here').exec(); await aui.click('Sign in').exec();   Avoid Custom Element Detection if Possible​  If you use customElement() you are doing an image-in-image search. Use this sparingly only for specific custom elements as the execution time is slow!  // Do this await aui.click().button().withText('Login').exec(); await aui.click().text('Overview').exec(); // And NOT this await aui.click().customElement({ customImage: '.../login_button.png', name: 'login button', }).exec(); await aui.click().customElement({ customImage: '.../text_overview.png', name: 'overview button', }).exec();   ","version":"0.13.1","tagName":"h3"},{"title":"Scrolling​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#scrolling","content":" When you use AskUI you can only interact with elements that you can see on your screen. Therefore you have to scroll down/sideways to interact with currently invisible elements.  Scrolling on Touch Displays​  On touch displays you have to recreate the swipe gesture:  // Touch the display with your finger, move finger to the left, release await aui.mouseToggleDown().exec() await aui.moveMouseRelatively(-1500, 0).exec() await aui.mouseToggleUp().exec()   Scrolling With Mouse Wheel​  If you want to scroll with your mouse wheel you can use the scroll() action:  // Scroll 10 down in y direction&lt;&gt; await aui.scroll(0, -10).exec()   Scrolling With Key Press​  If you want to scroll with a key press you could use your arrow keys (up, down, left, right ) or the pagedown-key.  // Press down arrow key await aui.pressKey('down').exec() // Press up arrow key await aui.pressKey('up').exec() // Scroll down a page await aui.pressKey('pagedown').exec() // Scroll up a page await aui.pressKey('pageup').exec()   ","version":"0.13.1","tagName":"h3"},{"title":"Wait for an Element to Appear​","type":1,"pageTitle":"Text and Element Selectors","url":"/docs/general/Element Selection/text-and-element-selectors#wait-for-an-element-to-appear","content":" AskUI implements a conservative retry strategy to wait for an element to appear. But sometimes this is not long enough. You can wait for an element to appear with the following helper function:  // Retry the command 5 times with a // wait time of 2 seconds between each try async function waitUntil(AskUICommand: () =&gt; Promise&lt;void&gt;, maxTry = 5) { try { await AskUICommand(); } catch (error) { if (maxTry == 0) { throw error } console.log(`Retry predicting command, ${maxTry} tries left`) await aui.waitFor(2000).exec(); await waitUntil(AskUICommand, maxTry - 1) } } // Wait for the text 'Github' to be displayed await waitUntil( async () =&gt; aui.expect().text('Github').exists().exec() );  ","version":"0.13.1","tagName":"h3"},{"title":"Continuous Integration","type":0,"sectionRef":"#","url":"/docs/general/Integrations/continuous-integration","content":"","keywords":"","version":"0.13.1"},{"title":"Github Actions​","type":1,"pageTitle":"Continuous Integration","url":"/docs/general/Integrations/continuous-integration#github-actions","content":" ","version":"0.13.1","tagName":"h2"},{"title":"AskUI-Runner Container: Get Workflows from AskUI Studio​","type":1,"pageTitle":"Continuous Integration","url":"/docs/general/Integrations/continuous-integration#askui-runner-container-get-workflows-from-askui-studio","content":" When you want to get the latest version of your workflows from AskUI Studio, the AskUI-Runner container needs a configuration file config.yaml to know where to pull them from.  The AskUI-Runner container downloads the workflows and runs them inside a docker container. You do not have to take care of any installation of tools on your side 🥳.  Set these environment variables for your pipeline:  ASKUI_WORKSPACE_ID=&lt;Your workspace id from AskUI Studio&gt; ASKUI_TOKEN=&lt;An access token from your AskUI Studio workspace&gt; ASKUI_INFERENCE_SERVER_URL=&lt;Use https://inference.askui.com if your are not on-premise&gt; ASKUI_WORKFLOW_ENDPOINT_URL=https://app-gateway-api.askui.com/prod/api/v1 DOCKER_USERNAME=&lt;Your Docker Hub username&gt; DOCKER_PASSWORD=&lt;Your Docker Hub password&gt;   Create a config.yaml inside your pipeline like this:  cat &lt;&lt; EOF &gt; config.yaml access_token: ${{ secrets.ASKUI_TOKEN }} inference_server_url: ${{ secrets.ASKUI_INFERENCE_SERVER_URL }} workspace_id: ${{ secrets.ASKUI_WORKSPACE_ID }} workflow_endpoint: prefixes: - workspaces/${{ secrets.ASKUI_WORKSPACE_ID }}/test-cases url: ${{ secrets.ASKUI_WORKFLOW_ENDPOINT_URL }}/workspaces/${{ secrets.ASKUI_WORKSPACE_ID }}/objects EOF   Execute your workflows with our AskUI-Runner container. Do not forget to login into Docker Hub 😉.  docker run --shm-size=&quot;2g&quot; --rm -v ${{ github.workspace }}/config.yaml:/home/askui/config.yaml -v ${{ github.workspace }}/allure-results:/home/askui/test_project/allure-results askuigmbh/askui-runner:v0.13.1-github   Generate Allure report: The run results are placed in allure-results where you can render your report from. Check the detailed examples for your pipeline technology.  Please check the full example file on GitHub.  ","version":"0.13.1","tagName":"h3"},{"title":"Without AskUI-Runner Container​","type":1,"pageTitle":"Continuous Integration","url":"/docs/general/Integrations/continuous-integration#without-askui-runner-container","content":" Download the workflows from AskUI Studio and place the folder test in the root of your repository.  Then implement the following steps in your pipeline:  Optional: Set up AskUI Controller as serviceSetup node in version 16.xInstall all dependencies: npm installRun tests with npm run test Set the environment variables: ASKUI_WORKSPACE_IDASKUI_TOKENASKUI_INFERENCE_SERVER_URLOptional: UI_CONTROLLER_URL if the UiController is running on a remote machine and not localhost or as a service inside your pipeline. For reports: Generate reportsDeploy/Send reports  Please check the full example file on GitHub.  ","version":"0.13.1","tagName":"h3"},{"title":"Gitlab CI​","type":1,"pageTitle":"Continuous Integration","url":"/docs/general/Integrations/continuous-integration#gitlab-ci","content":" ","version":"0.13.1","tagName":"h2"},{"title":"AskUI-Runner Container: Get Workflows from AskUI Studio​","type":1,"pageTitle":"Continuous Integration","url":"/docs/general/Integrations/continuous-integration#askui-runner-container-get-workflows-from-askui-studio-1","content":" When you want to get the latest version of your workflows from AskUI Studio, the AskUI-Runner container needs a configuration file config.yaml to know where to pull them from.  The AskUI-Runner container downloads the workflows and runs them inside a docker container. You do not have to take care of any installation of tools on your side 🥳.  Set these Gitlab variables for your pipeline:  ASKUI_WORKSPACE_ID=&lt;Your workspace id from AskUI Studio&gt; ASKUI_TOKEN=&lt;An access token from your AskUI Studio workspace&gt; ASKUI_INFERENCE_SERVER_URL=&lt;Use https://inference.askui.com if your are not on-premise&gt; ASKUI_WORKFLOW_ENDPOINT_URL=https://app-gateway-api.askui.com/prod/api/v1 DOCKER_USERNAME=&lt;Your Docker Hub username&gt; DOCKER_PASSWORD=&lt;Your Docker Hub password&gt;   Create a config.yaml inside your pipeline like this:  cat &lt;&lt; EOF &gt; config.yaml access_token: $ASKUI_TOKEN inference_server_url: $ASKUI_INFERENCE_SERVER_URL workspace_id: $ASKUI_WORKSPACE_ID workflow_endpoint: prefixes: - workspaces/${ASKUI_WORKSPACE_ID}/test-cases url: ${ASKUI_WORKFLOW_ENDPOINT_URL}/workspaces/${ASKUI_WORKSPACE_ID}/objects EOF   Do not forget to login into Docker Hub and enable Docker-In-Docker like this 😉:  services: - docker:dind before_script: - docker info - echo &quot;$DOCKER_PASSWORD&quot; | docker login --username $DOCKER_USERNAME --password-stdin   Execute your workflows with our AskUI-Runner container.  docker run --shm-size=&quot;2g&quot; --rm -v ./config.yaml:/home/askui/config.yaml -v ./allure-results:/home/askui/test_project/allure-results askuigmbh/askui-runner:v0.13.1-github   Generate Allure report: The run results are placed in allure-results where you can render your report from.  Check the detailed examples for your pipeline technology.  Please check the full example file on Gitlab.com.  ","version":"0.13.1","tagName":"h3"},{"title":"Without AskUI-Runner Container​","type":1,"pageTitle":"Continuous Integration","url":"/docs/general/Integrations/continuous-integration#without-askui-runner-container-1","content":" Download the workflows from AskUI Studio and place the folder test in the root of your repository.  Then implement the following steps in your pipeline:  Optional: Set up AskUI Controller as serviceSetup node in version 16.xInstall all dependencies: npm installRun tests with npm run test Set the environment variables: ASKUI_WORKSPACE_IDASKUI_TOKENASKUI_INFERENCE_SERVER_URLOptional: UI_CONTROLLER_URL if the UiController is running on a remote machine and not localhost or as a service inside your pipeline. For reports: Generate reportsDeploy/Send reports  Please check the full example file on Gitlab.com.  ","version":"0.13.1","tagName":"h3"},{"title":"Azure DevOps​","type":1,"pageTitle":"Continuous Integration","url":"/docs/general/Integrations/continuous-integration#azure-devops","content":" ","version":"0.13.1","tagName":"h2"},{"title":"AskUI-Runner Container: Get Workflows from AskUI Studio​","type":1,"pageTitle":"Continuous Integration","url":"/docs/general/Integrations/continuous-integration#askui-runner-container-get-workflows-from-askui-studio-2","content":" When you want to get the latest version of your workflows from AskUI Studio, the AskUI-Runner container needs a configuration file config.yaml to know where to pull them from.  The AskUI-Runner downloads the workflows and runs them inside a docker container. You do not have to take care of any installation of tools on your side 🥳.  Set these variables for your pipeline:  ASKUI_WORKSPACE_ID=&lt;Your workspace id from AskUI Studio&gt; ASKUI_TOKEN=&lt;An access token from your AskUI Studio workspace&gt; ASKUI_INFERENCE_SERVER_URL=&lt;Use https://inference.askui.com if your are not on-premise&gt; ASKUI_WORKFLOW_ENDPOINT_URL=https://app-gateway-api.askui.com/prod/api/v1 DOCKER_USERNAME=&lt;Your Docker Hub username&gt; DOCKER_PASSWORD=&lt;Your Docker Hub password&gt;   Create a config.yaml inside your pipeline like this:  cat &lt;&lt; EOF &gt; config.yaml access_token: $(ASKUI_TOKEN) inference_server_url: $(ASKUI_INFERENCE_SERVER_URL) workspace_id: $(ASKUI_WORKSPACE_ID) workflow_endpoint: prefixes: - workspaces/$(ASKUI_WORKSPACE_ID)/test-cases url: $(ASKUI_WORKFLOW_ENDPOINT_URL)/workspaces/$(ASKUI_WORKSPACE_ID)/objects EOF   Execute your workflows with our AskUI-Runner container. Do not forget to login into Docker Hub 😉.  echo &quot;$(DOCKER_PASSWORD)&quot; | docker login --username $(DOCKER_USERNAME) --password-stdin docker run --shm-size=&quot;2g&quot; --rm -v &quot;/$(pwd)/config.yaml:/home/askui/config.yaml&quot; -v &quot;/$(pwd)/allure-results:/home/askui/test_project/allure-results&quot; askuigmbh/askui-runner:v0.13.1-github   Generate Allure report: The run results are placed in allure-results where you can render your report from. Check the detailed examples for your pipeline technology.  - bash: | curl -o allure-commandline-2.10.0.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.10.0/allure-commandline-2.10.0.tgz sudo tar -zxf allure-commandline-2.10.0.tgz -C . echo &quot;Creating allure-report&quot; ./allure-2.10.0/bin/allure generate allure-results -o allure-report echo &quot;allure-report created&quot; # Install https://github.com/mclay/azure-pipeline-allure-report first - task: PublishAllureReport@1 displayName: 'Publish Allure Report' inputs: reportDir: 'allure-report'   Please check the full example file on GitHub.  ","version":"0.13.1","tagName":"h3"},{"title":"Without AskUI-Runner Container​","type":1,"pageTitle":"Continuous Integration","url":"/docs/general/Integrations/continuous-integration#without-askui-runner-container-2","content":" Download the workflows from AskUI Studio and place the folder test in the root of your repository.  Then implement the following steps in your pipeline:  Set the pipeline variables: ASKUI_WORKSPACE_IDASKUI_TOKENASKUI_INFERENCE_SERVER_URLOptional: UI_CONTROLLER_URL if the UiController is running on a remote machine and not localhost or as a service inside your pipeline. Setup docker and node in version 16.x  - task: DockerInstaller@0 inputs: dockerVersion: '17.09.0-ce' - task: NodeTool@0 inputs: versionSpec: '16.x' displayName: 'Install Node.js'   Start the UiController from our Docker image  - bash: | sudo ufw disable echo 'Start UIController' docker run -d -p 6769:6769 --cidfile container.cid askuigmbh/askui-ui-controller:v0.11.2-chrome-100.0.4896.60-amd64   Install all dependencies and run the workflow:  echo 'Run npm install' npm install echo 'Run AskUI' export ASKUI_TOKEN=$(ASKUI_TOKEN) export ASKUI_WORKSPACE_ID=$(ASKUI_WORKSPACE_ID) npm run test   For reports: Generate reportsDeploy/Send reports  - bash: | curl -o allure-commandline-2.10.0.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.10.0/allure-commandline-2.10.0.tgz sudo tar -zxf allure-commandline-2.10.0.tgz -C . echo &quot;Creating allure-report&quot; ./allure-2.10.0/bin/allure generate allure-results -o allure-report echo &quot;allure-report created&quot; # Install https://github.com/mclay/azure-pipeline-allure-report first - task: PublishAllureReport@1 displayName: 'Publish Allure Report' inputs: reportDir: 'allure-report'   Please check the full example file on GitHub. ","version":"0.13.1","tagName":"h3"},{"title":"Write Your First Instruction","type":0,"sectionRef":"#","url":"/docs/general/Getting Started/write-your-first-instruction","content":"","keywords":"","version":"0.13.1"},{"title":"Run Your First Instruction​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/general/Getting Started/write-your-first-instruction#run-your-first-instruction","content":" Writing and executing an instruction in AskUI can be done in three steps:  Execute an (interactive) annotation.Extract from the (interactive) annotation the element-description which identifies target element.Execute an instruction to control the keyboard and mouse to take action on target element.  ","version":"0.13.1","tagName":"h2"},{"title":"Step 1: Execute an (Interactive) Annotation​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/general/Getting Started/write-your-first-instruction#step-1-execute-an-interactive-annotation","content":" info Before executing the instructions, open askui_example/my-first-askui-test-suite.test.ts on your main display. The code in this file is shown below. Windows Users Please use annotate() as outlined in the code below. The interactive annotation aui.annotateInteractively() currently leads to an error on Windows. macOS Users Some users have reported instability running AskUI on macOS with external displays and/or virtual desktops (called Spaces). If you experience similar issues, please disconnect external displays and close virtual desktops, or see documentation on running AskUI in Docker.  WindowsmacOSLinux askui_example/my-first-askui-test-suite.test.ts import { aui } from './helpers/askui-helper'; describe('jest with askui', () =&gt; { it('should generate an (interactive) annotation', async () =&gt; { // Use annotate() to create an annotated HTML file // of your screen that is saved under &lt;project_root&gt;/report await aui.annotate(); }); });   To execute the instructions, enter into your terminal.  npm run askui   A few seconds later an (interactive) annotation will be generated.  If you’d like a longer explanation as to what an (interactive) annotation is, read about it here. Explanation of (Interactive) Annotations  ","version":"0.13.1","tagName":"h3"},{"title":"Step 2: Extract the Element-Description​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/general/Getting Started/write-your-first-instruction#step-2-extract-the-element-description","content":" Extract from the (interactive) annotation the element-description which identifies target element. Locate any element you’d like the mouse to move to and copy the element-description by clicking on it: Clicking an element will copy this element-description, which we can then use in the step 3.  To close out the interactive annotation, use CMD/CTRL + W or ESC.  ","version":"0.13.1","tagName":"h3"},{"title":"Step 3: Execute an Instruction​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/general/Getting Started/write-your-first-instruction#step-3-execute-an-instruction","content":" Add this instruction code block to the describe block in your test file just under your (interactive) annotation instruction, taking note to also add your copied element-description from the annotation:  test/my-first-askui-test-suite.test.ts it('should click on my element', async () =&gt; { await aui .click() // &lt;INSERT YOUR COPIED ELEMENT-DESCRIPTION HERE AND UNCOMMENT THIS AND THE NEXT LINE&gt; // .exec(); });   Be sure to xit out the (interactive) annotation, as that is no longer needed. The final version should look like this, taking exception of course to whatever element-description text you chose:  WindowsmacOSLinux askui_example/my-first-askui-test-suite.test.ts describe('jest with askui', () =&gt; { xit('should generate an (interactive) annotation', async () =&gt; { // Use annotate() to create an annotated HTML file // of your screen that is saved under &lt;project_root&gt;/report await aui.annotate(); }); it('should click on my element', async () =&gt; { await aui .click() .text(&quot;node_nodu&quot;) .exec(); }); });   As before, run your code with npm run askui.  You should see AskUI take over your mouse, mouse over the element you chose and click.  Congratulations! You’ve just built your first instruction using AskUI. 🎉  ","version":"0.13.1","tagName":"h3"},{"title":"What other instructions are available?​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/general/Getting Started/write-your-first-instruction#what-other-instructions-are-available","content":" Actions APIElement-Descriptions APIRelations APIChecks APIGetters API  ","version":"0.13.1","tagName":"h3"},{"title":"Troubleshooting​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/general/Getting Started/write-your-first-instruction#troubleshooting","content":" ","version":"0.13.1","tagName":"h2"},{"title":"AskUI moves to the wrong element?​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/general/Getting Started/write-your-first-instruction#askui-moves-to-the-wrong-element","content":" Have a look at Relational Selectors to select elements via a visual relation instead.  ","version":"0.13.1","tagName":"h3"},{"title":"Technical​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/general/Getting Started/write-your-first-instruction#technical","content":" For technical problems with the execution, take a look at our Troubleshooting page  ","version":"0.13.1","tagName":"h3"},{"title":"Where to Go Next?​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/general/Getting Started/write-your-first-instruction#where-to-go-next","content":" Our Outverse-Community is there to help you out!  ","version":"0.13.1","tagName":"h2"},{"title":"Tutorials​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/general/Getting Started/write-your-first-instruction#tutorials","content":" If you are unsure on how/what to do yet, try to follow our tutorials. They cover some of use cases of AskUI in depth:  Search Image in GoogleLogin at an Online ShopAutomate Spotify on DesktopAutomate an Android App  ","version":"0.13.1","tagName":"h3"},{"title":"Annotation​","type":1,"pageTitle":"Write Your First Instruction","url":"/docs/general/Getting Started/write-your-first-instruction#annotation","content":" Read Debug with Annotation to learn how to use the Image Annotation Feature. ","version":"0.13.1","tagName":"h3"},{"title":"Docker","type":0,"sectionRef":"#","url":"/docs/general/Integrations/containers","content":"","keywords":"","version":"0.13.1"},{"title":"AskUI UI Controller Docker Images​","type":1,"pageTitle":"Docker","url":"/docs/general/Integrations/containers#askui-ui-controller-docker-images","content":" We maintain Docker images for running instructions with AskUI inside a Docker Container, e.g., locally or in a CI/CD pipeline. The images are based on Ubuntu (amd64) images and contain the askui UI Controller (also known as the UiController) and a browser. The AskUI SDK connects to the UI Controller inside the Docker container to execute workflows inside it.  You can find our images on DockerHub.  caution If you are on an ARM architecture such as Apple Silicon, you can NOT run the images at the moment!  ","version":"0.13.1","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Docker","url":"/docs/general/Integrations/containers#configuration","content":" The following environment variables can be used for configuring the Docker Container started from one of our Docker Images:  Variable\tDefault Value\tDescriptionSE_SCREEN_WIDTH\t1360\tSets the screen width SE_SCREEN_HEIGHT\t1020\tSets the screen height SE_SCREEN_DEPTH\t24 GOOGLE_CHROME_ARGS\tempty ASKUI_CONTROLLER_ARGS\tempty VERBOSE\tempty\t  ","version":"0.13.1","tagName":"h3"},{"title":"Tag Naming Schema​","type":1,"pageTitle":"Docker","url":"/docs/general/Integrations/containers#tag-naming-schema","content":" We use the following tag schema:  &lt;controller-version&gt;-&lt;browser-name&gt;-&lt;browser-version&gt;-amd64 # browser-name: chrome only for now # Example 0.11.2-chrome-119.0.6045.123-amd64   ❗️ &lt;controller-version&gt; is NOT the AskUI SDK version ❗️  ","version":"0.13.1","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Docker","url":"/docs/general/Integrations/containers#usage","content":" ","version":"0.13.1","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Docker","url":"/docs/general/Integrations/containers#prerequisites","content":" Docker (Download here)AskUI Development Environment (Windows, Linux, macOS)  You will only need the Docker CLI but you can install Docker Desktop, too if you want.  ","version":"0.13.1","tagName":"h3"},{"title":"Starting Container Manually​","type":1,"pageTitle":"Docker","url":"/docs/general/Integrations/containers#starting-container-manually","content":" You can pull an image using docker pull, e.g.,  docker pull askuigmbh/askui-ui-controller:0.11.2-chrome-119.0-amd64   and, then, start the corresponding container using:  docker run -p 6769:6769 -p 7900:7900 askuigmbh/askui-ui-controller:0.11.2-chrome-119.0-amd64   Ports:  AskUI UI Controller: 6769No_VNC: 7900  Password for No_VNC is secret.  ","version":"0.13.1","tagName":"h3"},{"title":"Connect to the Container with AskUI SDK​","type":1,"pageTitle":"Docker","url":"/docs/general/Integrations/containers#connect-to-the-container-with-askui-sdk","content":" You have to adjust the askui_example/helpers/askui-helper.ts that is created when running npx askui@latest init, because the UiControlClient connects to the UiController running inside the Docker container:  Remove everything related to uiControllerCheck your credentialsOptional: Set the uiControllerUrl in UiControlClient if you exposed the UI Controller on a different port (see UI Control Client API Docs for more information  It should look like this:  askui_example/helper/askui-helper.ts import { UiControlClient, UiController } from 'askui'; import { AskUIAllureStepReporter } from '@askui/askui-reporters'; // Client is necessary to use the askui API let aui: UiControlClient; jest.setTimeout(60 * 1000 * 60); beforeAll(async () =&gt; { aui = await UiControlClient.build({ // Uncomment next line when you did NOT expose the AskUI UI Controller on port 6769 // uiControllerUrl: http://127.0.0.1:&lt;Insert your port here&gt;', credentials: { workspaceId: '&lt;Insert your workspace id here&gt;', token: '&lt;Insert your access token here&gt;', }, reporter: new AskUIAllureStepReporter(), }); await aui.connect(); }); beforeEach(async () =&gt; { await aui.startVideoRecording(); }); afterEach(async () =&gt; { await aui.stopVideoRecording(); const video = await aui.readVideoRecording(); await AskUIAllureStepReporter.attachVideo(video); }); afterAll(async () =&gt; { aui.disconnect(); }); export { aui };   warning If you initialized your AskUI project with an older version of AskUI or upgraded from an older version you may not have a askui_example/helpers/askui-helper.ts file. Please apply the changes in test/helpers/jest.setup.ts.  ","version":"0.13.1","tagName":"h3"},{"title":"Connect via VNC​","type":1,"pageTitle":"Docker","url":"/docs/general/Integrations/containers#connect-via-vnc","content":" To check what is happening inside a running container, you can connect via VNC. For this, you need to open a browser and navigate to http://localhost:7900. When using the testcontainers example code, the VNC port to connect to is logged to the console.  When connecting, enter the password secret when asked.  Example of a VNC connection with a Chrome browser running inside a container:    ","version":"0.13.1","tagName":"h3"},{"title":"Starting Container from Within beforeAll() Using Testcontainers​","type":1,"pageTitle":"Docker","url":"/docs/general/Integrations/containers#starting-container-from-within-beforeall-using-testcontainers","content":" Testcontainers is a Node.js library that supports starting Docker Containers from within tests and throwing them away afterwards.  To use it, first install it:  npm i -D testcontainers   After that, you can adjust the askui_example/helpers/askui-helper.ts that is created when running npx askui@latest init The following example starts the AskUI container and connects to it just before all instructions are run:  warning If you initialized your AskUI project with an older version of AskUI or upgraded from an older version you may not have a test/helpers/askui-helper.ts file. Please apply the changes in test/helpers/jest.setup.ts.  import { UiControlClient } from 'askui'; import { GenericContainer, StartedTestContainer } from 'testcontainers'; jest.setTimeout(60 * 1000 * 60); function getDockerImageName(): string { const askuiUiControllerVersion = '0.11.2'; const browser = 'chrome'; const browserVersion = '119.0'; const osArch = 'amd64'; return `askuigmbh/askui-ui-controller:${askuiUiControllerVersion}-${browser}-${browserVersion}-${osArch}`; } async function startTestContainer(): Promise&lt;StartedTestContainer&gt; { const container = await new GenericContainer(getDockerImageName()) .withEnvironment({ 'SE_SCREEN_WIDTH': '1920', 'SE_SCREEN_HEIGHT': '1080', }) .withExposedPorts(6769, 7900) .start(); console.log(`VNC link: ${container.getHost()}:${container.getMappedPort(7900)}`); return container; } let testContainer: StartedTestContainer; // eslint-disable-next-line import/no-mutable-exports let aui: UiControlClient; beforeAll(async () =&gt; { testContainer = await startTestContainer(); aui = await UiControlClient.build({ uiControllerUrl: `http://127.0.0.1:${testContainer.getMappedPort(6769)}`, credentials: { workspaceId: '&lt;Insert your workspace id here&gt;', token: '&lt;Insert your access token here&gt;', }, reporter: new AskUIAllureStepReporter(), }); await aui.connect(); }); afterAll(async () =&gt; { aui.disconnect(); await testContainer.stop(); }); export { aui };  ","version":"0.13.1","tagName":"h2"},{"title":"Custom Web Hooks","type":0,"sectionRef":"#","url":"/docs/general/Integrations/custom-web-hooks","content":"Custom Web Hooks caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.13.1"},{"title":"Databases","type":0,"sectionRef":"#","url":"/docs/general/Integrations/databases","content":"Databases caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.13.1"},{"title":"Device Farms","type":0,"sectionRef":"#","url":"/docs/general/Integrations/device-farms","content":"Device Farms caution This page is currently under construction. If you have any questions, please feel free to reach out to info@askui.com or book a meeting with Jonas over Calendly.","keywords":"","version":"0.13.1"},{"title":"Terminology","type":0,"sectionRef":"#","url":"/docs/general/Terminology","content":"Terminology Term\tMeaningaccess token\tGives you access to the AskUI inference in combination with your workspace id. Every access token has an expiry date and is assigned to exactly one workspace. action\tA method in the AskUI Control Client API that describes an action to be taken against the operating system. For example click(), type(). annotation\tMarked area around an element with metadata name, text, and bounding box coordinates. automation\tA system of multiple connected workflows. bounding box\tRectangle described by coordinates that describe an element's location. Displayed visually as red rectangle. credentials\tCombination of workspace id and access token living in the same workspace. element\tA user interface component which websites and blocks are build from. element-description\tA description for a UI element. In the AskUI Control Client API, for example, it is the coded description like button() or textfield().contains().text('Email'). inference\tThe process of annotating a user interface. inference server\tBackend which performs the inference. instruction\tSingle AskUI directive which usually has following parts: action + (optional)element-description. interactive annotation\tExploring the annotations of a user interface through an annotated screenshot. UI Controller\tService to control inputs and observe the visuals on the operating system. UI Control Client\tRetrieves the annotations from the inference server and uses the given instructions to execute inputs on the operating system through the UI Controller. User Portal\tIn the AskUI User Portal you can create access tokens for your workspace. workflow\tA set of instructions to complete a single task workspace\tEvery registered user has exactly one workspace. Every workspace can contain multiple access tokens. workspace id\tThe id of your workspace. Gives you access to the AskUI inference in combination with your access token.","keywords":"","version":"0.13.1"},{"title":"Single Sign-On (SSO)","type":0,"sectionRef":"#","url":"/docs/general/Integrations/SSO","content":"","keywords":"","version":"0.13.1"},{"title":"Prerequisites​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/general/Integrations/SSO#prerequisites","content":" Before you begin, ensure you have administrative access to your organization’s IdP service and that your enterprise account with us is eligible for SSO integration.  Note: If you do not have an Enterprise account and are interested in this feature, please contact our sales team for more information on upgrading your account.Book a call  ","version":"0.13.1","tagName":"h2"},{"title":"Supported Identity Providers​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/general/Integrations/SSO#supported-identity-providers","content":" Our platform supports SSO integration with a wide range of identity providers including, but not limited to:  Active Directory/LDAPADFSAzure Active Directory NativeGoogle WorkspaceOpenID ConnectOktaPingFederateSAMLAzure Active Directory  For More Information: To learn more about the identity providers supported for SSO integration, please visit Auth0 Enterprise Identity Providers documentation. This resource provides detailed information on each provider and guidance on integration specifics.  ","version":"0.13.1","tagName":"h2"},{"title":"Step 1: Determining Your SSO Protocol​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/general/Integrations/SSO#step-1-determining-your-sso-protocol","content":" Identify the SSO protocol or federated identity provider your organization uses from the list of supported providers above.  ","version":"0.13.1","tagName":"h2"},{"title":"Step 2: Gathering Necessary Data from Your Identity Provider​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/general/Integrations/SSO#step-2-gathering-necessary-data-from-your-identity-provider","content":" To set up SSO, you will need to provide our team with specific information from your IdP. Here is what you will typically need from each provider:  ","version":"0.13.1","tagName":"h2"},{"title":"Common Data Required Across All Providers​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/general/Integrations/SSO#common-data-required-across-all-providers","content":" Domain Name: Your organization's domain associated with the IdP.Client ID: The unique identifier for your application registered with the IdP.Client Secret: A secret key used by your application to authenticate with the IdP.  ","version":"0.13.1","tagName":"h3"},{"title":"Provider-Specific Data​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/general/Integrations/SSO#provider-specific-data","content":" Active Directory/LDAP​  Server URL: The LDAP server URL.Bind DN: The distinguished name to bind to the LDAP server.Bind Credentials: The password or other credentials required to bind to the LDAP server.  ADFS​  Federation Metadata URL: The URL where the federation metadata is published.Relying Party Trust Identifier: The identifier for your service configured in ADFS.  Azure Active Directory Native​  Tenant ID: The unique identifier of your Azure AD tenant.Redirect URI: The URI where the IdP sends the authentication response.  Google Workspace​  Service Account Email: The service account email used for Google Workspace integration.Service Account Key: The private key associated with the service account.  OpenID Connect​  Issuer URL: The URL of your IdP to verify the issuer of the token.Scopes: The scopes of access you are requesting.  Okta​  Okta Domain: Your Okta account domain.API Token: A token to authenticate API requests.  PingFederate​  PingFederate Server URL: The URL to your PingFederate server.Partner's Entity ID: The entity ID of your partner configuration in PingFederate.  SAML​  SAML SSO URL: The endpoint URL for SAML Single Sign-On.X.509 Certificate: The certificate to sign SAML requests.  Azure Active Directory​  Azure AD Identifier: The unique identifier for your Azure AD directory.Reply URL (Assertion Consumer Service URL): The URL to which the SAML assertion is sent.  Note: This list is not exhaustive, and additional information may be required by your IdP. Ensure all sensitive information is shared securely and refer to the latest documentation provided by the IdP for detailed requirements.  ","version":"0.13.1","tagName":"h3"},{"title":"Step 3: Requesting Data​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/general/Integrations/SSO#step-3-requesting-data","content":" Request the required data from your IdP. If possible, also request a test user to facilitate the setup and testing processes.  ","version":"0.13.1","tagName":"h2"},{"title":"Step 4: Setting Up the Connection​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/general/Integrations/SSO#step-4-setting-up-the-connection","content":" To set up Single Sign-On (SSO) for your account, reach out to our dedicated support team. They will take care of the entire SSO configuration process tailored to your selected Identity Provider (IdP). Our team is committed to ensuring a seamless and secure connection. Please contact us at:  Email: support@askui.com  ","version":"0.13.1","tagName":"h2"},{"title":"Step 5: Testing the Integration​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/general/Integrations/SSO#step-5-testing-the-integration","content":" After configuring SSO, test the login and signup process with a user account from your domain to verify that the integration works as expected.  ","version":"0.13.1","tagName":"h2"},{"title":"Support and Troubleshooting​","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/docs/general/Integrations/SSO#support-and-troubleshooting","content":" For any questions or assistance, our support team is ready to help. Reach out with any concerns or if you require troubleshooting assistance. ","version":"0.13.1","tagName":"h2"},{"title":"Visual Regression","type":0,"sectionRef":"#","url":"/docs/general/Integrations/visual-regression","content":"","keywords":"","version":"0.13.1"},{"title":"Install jest-image-snapshot​","type":1,"pageTitle":"Visual Regression","url":"/docs/general/Integrations/visual-regression#install-jest-image-snapshot","content":" In your terminal, navigate into the folder where you initialized AskUI while following our Getting Started (Linux, macOS)  Install jest-image-snapshot as a dev-dependency  npm install --save-dev jest-image-snapshot   ","version":"0.13.1","tagName":"h2"},{"title":"Integration​","type":1,"pageTitle":"Visual Regression","url":"/docs/general/Integrations/visual-regression#integration","content":" The package provides a function toMatchImageSnapshot which implements Jest's Matchers&lt;R&gt; interface making it a Jest matcher that can be used with Jest's expect().  You have to add this matcher to Jest with expect.extend like this in your workflow file (See the docs):  const { toMatchImageSnapshot } = require('jest-image-snapshot'); expect.extend({ toMatchImageSnapshot });   Now the only thing you have to provide for a regression test in your workflows is an image to the function expect() as Buffer:  expect(imageBuffer).toMatchImageSnapshot();   You can use AskUI to get the screenshot as a base64 encoded string. The string is in the format of a data URL. So you have to strip the scheme data:[&lt;mediatype&gt;][;base64], away because it is not a valid image with the scheme. Here is the full code:  const annotate = await aui.annotate(); const imageBase64 = annotate.image; // Strip away this: data:image/png;base64, // Not valid png -&gt; Only if used as a data URL let imageBuffer = Buffer.from( imageBase64.split('base64,')[1], 'base64'); expect(imageBuffer).toMatchImageSnapshot();   ","version":"0.13.1","tagName":"h2"},{"title":"Get It to Work with TypeScript​","type":1,"pageTitle":"Visual Regression","url":"/docs/general/Integrations/visual-regression#get-it-to-work-with-typescript","content":" When you run this as it is you will get an error.  This is because Jest's typings in jest.d.ts do not include toMatchImageSnapshot.  Luckily TypeScript has a mechanism called Declaration Merging. When we create a file jest.d.ts in our project and declare our matcher there, TypeScript will pick it up.  declare namespace jest { interface Matchers { toMatchImageSnapshot(): CustomMatcherResult; } }   ","version":"0.13.1","tagName":"h2"},{"title":"How Jest-Image-Snapshot Works​","type":1,"pageTitle":"Visual Regression","url":"/docs/general/Integrations/visual-regression#how-jest-image-snapshot-works","content":" Explanation from the repository:  Given an image (Buffer instance with PNG image data) the toMatchImageSnapshot() matcher will create an image_snapshots directory in the directory the test is in and will store the baseline snapshot image there on the first run. Note that if customSnapshotsDir option is given then it will store baseline snapshot there instead. On subsequent test runs the matcher will compare the image being passed against the stored snapshot. To update the stored image snapshot run Jest with --updateSnapshot or -u argument. All this works the same way as Jest snapshots.  You also want to check out the options you can provide to toMatchImageSnapshot() to fine-tune the behavior. For example you might want to set a threshold for a mismatch so that minimal differences do not fail a run:  expect(image).toMatchImageSnapshot({ failureThreshold: 0.01, failureThresholdType: 'percent' });  ","version":"0.13.1","tagName":"h2"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/docs/general/Troubleshooting","content":"","keywords":"","version":"0.13.1"},{"title":"Pages​","type":1,"pageTitle":"Troubleshooting","url":"/docs/general/Troubleshooting#pages","content":" Cannot find Element ErrorJestLinuxWindowsmacOSproxyipv6Deprecated Endpoints  Support  Join our Outverse-Community to get help from fellow users and AskUI staff. ","version":"0.13.1","tagName":"h2"},{"title":"Deprecated Endpoints","type":0,"sectionRef":"#","url":"/docs/general/Troubleshooting/deprecated-endpoints","content":"Deprecated Endpoints If you are using the AskUI library you may see this warning: This endpoint will deprecate. Please upgrade your AskUI version This means that you are using an AskUI version, which will stop working in the near future. You can upgrade your AskUI version with the following command: npm install askui@latest If this does not work, try the following steps: Delete your node_modules folderCheck the latest version of askui in your package.json3 Run npm install to reinstall AskUI","keywords":"","version":"0.13.1"},{"title":"IPv6","type":0,"sectionRef":"#","url":"/docs/general/Troubleshooting/ipv6","content":"IPv6 By default, the UI Controller which the AskUI lib starts and interacts with (you can also start it manually) is started at IP address 127.0.0.1 (IPv4 IP address that localhost normally resolves to). To use IPv6, e.g., because you disabled IPv4, you need to start the UI Controller manually from the command line providing --host ::1 (assuming you want to use IP address ::1, otherwise provide a different address) and provide the uiControllerUrl when constructing the UiControlClient (by default, in the &lt;project_dir&gt;/test/helpers/askui-helper.ts): aui = await UiControlClient.build({ uiControllerUrl: 'http://[::1]:6769', // other client args... }); For example, starting the UI Controller (version latest, for other versions replace the respective part of the path) on macOS from your project's root directory is done like this: ./node_modules/askui/dist/release/latest/darwin/askui-ui-controller.app --args --host ::1 On other operating systems the path is different: # Windows start ./node_modules/askui/dist/release/latest/win32/askui-ui-controller.exe --args --host ::1 # Linux ./node_modules/askui/dist/release/latest/linux/askui-ui-controller --args --host ::1 ","keywords":"","version":"0.13.1"},{"title":"Cannot Find Element Error","type":0,"sectionRef":"#","url":"/docs/general/Troubleshooting/cannot_find_element_error","content":"","keywords":"","version":"0.13.1"},{"title":"Use Interactive Annotation to Debug​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/general/Troubleshooting/cannot_find_element_error#use-interactive-annotation-to-debug","content":" When you develop an automation you can use interactive annotation to extract filters as described on our interactive annotation page.  This gif illustrates the process:  If an element-description derived through this method does not work you may run the interactive annotation again and check if AskUI gives you the same element-description. Sometimes elements are hard to identify correctly, like icons or specific fonts. Read the next sections on how to tackle this 🙂  ","version":"0.13.1","tagName":"h2"},{"title":"Selecting Icons​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/general/Troubleshooting/cannot_find_element_error#selecting-icons","content":" There are millions of different icon sets out there. Detecting them all reliable is nearly impossible.  You can use three strategies to make your instructions more stable.  ","version":"0.13.1","tagName":"h2"},{"title":"1. Use Relative Element-Descriptors​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/general/Troubleshooting/cannot_find_element_error#1-use-relative-element-descriptors","content":" Often there is text near a specific icon. You can use this to your advantage, like in the following example, where the icon below a specific text is clicked. See our guide about relational element-descriptors to understand how those work:  await aui .click() .icon() .below() .text() .withText('Please Enter your Name').exec();   ","version":"0.13.1","tagName":"h3"},{"title":"2. Use Generic Element-Descriptor​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/general/Troubleshooting/cannot_find_element_error#2-use-generic-element-descriptor","content":" It could be the case that the target element is not detected correctly, e.g, an icon could possibly be detected as a toggle or checkbox and vice versa. In such cases, the generic element-descriptor element() could be a good option.  Be aware that element() alone specifies no particular property. It is recommended to be used in conjunction with a relational element descriptor:  await aui .click() .element() .below() .text() .withText('Please Enter your Name').exec();   This method is not restricted to icon elements, but can also be used for a wide range of elements.  ","version":"0.13.1","tagName":"h3"},{"title":"3. Use Custom Element Selection​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/general/Troubleshooting/cannot_find_element_error#3-use-custom-element-selection","content":" Custom element selection is your last resort because it is slow as it uses image-in-image search. Check out our Google Street View Tutorial to see how you can make use of it.  ","version":"0.13.1","tagName":"h3"},{"title":"Selecting Image​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/general/Troubleshooting/cannot_find_element_error#selecting-image","content":" Images are supposed to have a very certain visual property.  An image is expected to have a color contrasting against the background.An image is expected to have a rectangular shape. (rounded corner in a certain degree can be accepted)  Generally speaking, everything on the screen can be an image. For example, icons on a website are actually images. But in terms of visual semantics, we don't deal with the notion of image in general. So it is worth knowing that the above two conditions are critical when using the image() descriptor.  ","version":"0.13.1","tagName":"h2"},{"title":"Selecting Text​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/general/Troubleshooting/cannot_find_element_error#selecting-text","content":" OCR is tricky and we are working hard to improve it. But you will encounter cases where some text may not be recognized reliably depending on the font size, style or typeface:  ","version":"0.13.1","tagName":"h2"},{"title":"1. Missing Whitespaces Between Words​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/general/Troubleshooting/cannot_find_element_error#1-missing-whitespaces-between-words","content":" You can guard against missing whitespaces with withTextRegex():  // Use [\\\\s]{0,1} as a replacement for whitespace await aui .click() .text() .withTextRegex('your[\\\\s]{0,1}name').exec();   ","version":"0.13.1","tagName":"h3"},{"title":"2. Cut off characters at the start/end​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/general/Troubleshooting/cannot_find_element_error#2-cut-off-characters-at-the-startend","content":" For cut-off characters you can omit the first/last character:  // Omit first and last character of 'your name' await aui .click() .text() .withText('your name').exec();   ","version":"0.13.1","tagName":"h3"},{"title":"Missing Permissions for UiController on macOS​","type":1,"pageTitle":"Cannot Find Element Error","url":"/docs/general/Troubleshooting/cannot_find_element_error#missing-permissions-for-uicontroller-on-macos","content":" AskUI controls your operating system and macOS is very restrictive in giving access to third-party applications (which is a good thing actually!). The AskUI UiController needs to be given access for Screen Recording and Accessibility. See our troubleshooting macOS page. ","version":"0.13.1","tagName":"h2"},{"title":"Reporting","type":0,"sectionRef":"#","url":"/docs/general/Integrations/reporting","content":"","keywords":"","version":"0.13.1"},{"title":"Installation​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#installation","content":" Install @askui/askui-reporters as a dev-dependency:  npm install --save-dev @askui/askui-reporters   ","version":"0.13.1","tagName":"h2"},{"title":"AskUIAllureStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#askuiallurestepreporter","content":" Add the reporter to the UiControlClient in jest.setup.ts:  import { AskUIAllureStepReporter } from &quot;@askui/askui-reporters&quot;; ... const reporterConfig: ReporterConfig = { withScreenshots: 'always', // See below for possible values withDetectedElements: 'always', // See below for possible values } aui = await UiControlClient.build({ reporter: new AskUIAllureStepReporter( reporterConfig ) }); ...   You can pass a ReporterConfig object to the reporter to configure the level of detail for screenshots and detected elements.  There are four possible values (See the @askui/askui-reporters README for a detailed explanation):  onFailure (Default for both)requiredbeginalways  ","version":"0.13.1","tagName":"h2"},{"title":"Configure beforeEach() and afterEach() in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#configure-beforeeach-and-aftereach-in-jestsetupts","content":" The UiControlClient retrieves the videos and images from your UiController. You have to implement beforeEach() and afterEach() in jest.setup.ts to start the recording and then add it to your report:  Allure Reporter  beforeEach(async () =&gt; { await aui.startVideoRecording(); }); afterEach(async () =&gt; { await aui.stopVideoRecording(); const video = await aui.readVideoRecording(); await AskUIAllureStepReporter.attachVideo(video); });   ","version":"0.13.1","tagName":"h3"},{"title":"Enable the Test Environment @askui/jest-allure-circus in jest.config.ts​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#enable-the-test-environment-askuijest-allure-circus-in-jestconfigts","content":" Install @askui/jest-allure-circus environment:  npm install --save-dev @askui/jest-allure-circus   import type { Config } from '@jest/types'; const config: Config.InitialOptions = { preset: 'ts-jest', setupFilesAfterEnv: ['./helper/jest.setup.ts'], sandboxInjectedGlobals: [ 'Math', ], // Enables the test environment for Allure testEnvironment: '@askui/jest-allure-circus', }; // eslint-disable-next-line import/no-default-export export default config;   ","version":"0.13.1","tagName":"h3"},{"title":"AskUIJestHtmlStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#askuijesthtmlstepreporter","content":" info Due to restrictions of jest-html-reporters you can either have screenshots or video with this reporter but not both at the same time. For screenshots omit the beforeEach() and afterEach() hooks in jest.setup.ts. For video do not configure a reporter in your UiControlClient.  ","version":"0.13.1","tagName":"h2"},{"title":"Install ffmpeg On Your System​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#install-ffmpeg-on-your-system","content":" To use this reporter you have to have ffmpeg installed on your system (including all necessary encoding libraries like libmp3lame or libx264).  Please follow the installation instructions for your system.  ","version":"0.13.1","tagName":"h3"},{"title":"Enable Reporter in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#enable-reporter-in-jestsetupts","content":" Add the reporter to the UiControlClient in jest.setup.ts:  // Do not forget this import at the start of the file! import { AskUIJestHtmlStepReporter } from &quot;@askui/askui-reporters&quot;; ... aui = await UiControlClient.build({ reporter: new AskUIJestHtmlStepReporter({ withScreenshots: 'always' as const, // See below for possible values withDetectedElements: 'always' as const, // See below for possible values }) }); ...   You can pass a ReporterConfig object to the reporter to configure the level of detail for screenshots and detected elements:  onFailure (Default for both)requiredbeginalways  ","version":"0.13.1","tagName":"h3"},{"title":"Configure beforeEach() and afterEach() in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#configure-beforeeach-and-aftereach-in-jestsetupts-1","content":" import path from &quot;path&quot;; import { AskUIJestHtmlStepReporter } from &quot;@askui/askui-reporters&quot;; beforeEach(async () =&gt; { await aui.startVideoRecording(); }); afterEach(async () =&gt; { await aui.stopVideoRecording(); const video = await aui.readVideoRecording(); await AskUIJestHtmlStepReporter.attachVideo(video); });   ","version":"0.13.1","tagName":"h3"},{"title":"Enable the Jest-Html-Reporters in jest.config.ts​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#enable-the-jest-html-reporters-in-jestconfigts","content":" Install jest-html-reporters environment:  npm install --save-dev jest-html-reporters   import type { Config } from &quot;@jest/types&quot;; const config: Config.InitialOptions = { preset: &quot;ts-jest&quot;, testEnvironment: &quot;node&quot;, setupFilesAfterEnv: [&quot;./helper/jest.setup.ts&quot;], sandboxInjectedGlobals: [&quot;Math&quot;], reporters: [&quot;default&quot;, &quot;jest-html-reporters&quot;], }; // eslint-disable-next-line import/no-default-export export default config;   ","version":"0.13.1","tagName":"h3"},{"title":"AskUIXRayStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#askuixraystepreporter","content":" info Due to restrictions this reporter only works when you run your workflows one after another (default for AskUI)!  ","version":"0.13.1","tagName":"h2"},{"title":"Enable and Configure the AskUIXRayStepReporter in askui-helper.ts (former jest.setup.ts)​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#enable-and-configure-the-askuixraystepreporter-in-askui-helperts-former-jestsetupts","content":" You have to do a few things in your askui-helper.ts (former jest.setup.ts) to enable the AskUIXRayStepReporter:  info We will try to move this into the custom testEnvironment we provide.  Import the reporterInitialize the reporterAdd it to the UiControlClientModify before beforeEach() and afterEach() hook to create/finish TestEntriesAdd writing the report to afterAll() hook  import { UiControlClient, UiController } from 'askui'; /* 1 Import the reporter */ import { AskUIXRayStepReporter } from '@askui/askui-reporters'; ... /* 2 Initialize the reporter */ let xRayReporter = new AskUIXRayStepReporter({ withScreenshots: 'always', }); beforeAll(async () =&gt; { ... aui = await UiControlClient.build({ credentials: { workspaceId: '&lt;your workspace id&gt;', token: '&lt;your access token&gt;', }, /* 3 Enable reporter */ reporter: xRayReporter, }); await aui.connect(); }); /* 4 Create TestEntry with name of test from it-block */ beforeEach(async () =&gt; { xRayReporter.createNewTestEntry(global.testName); }); /* 4 Finish TestEntry with the test status */ afterEach(async () =&gt; { xRayReporter.finishTestEntry(global.testStatus); }); afterAll(async () =&gt; { /* 5 Writing the report */ await xRayReporter.writeReport(); aui.disconnect(); await uiController.stop(); }); export { aui };   ","version":"0.13.1","tagName":"h3"},{"title":"Configure jest-xray-environment in jest.config.ts​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#configure-jest-xray-environment-in-jestconfigts","content":" For the AskUIXRayStepReporter step reporter to work properly you need a special testEnvironment that provides the names from the it-blocks used to create the JSON-Objects for each test. Configure the testEnvironment in your jest.config.ts as shown in the code below:  import type { Config } from '@jest/types'; const config: Config.InitialOptions = { preset: 'ts-jest', // This uses cjs module system // Replace cjs with esm if your project uses esm testEnvironment: '@askui/askui-reporters/dist/cjs/xray/jest-xray-environment.js', setupFilesAfterEnv: ['./helpers/askui-helper.ts'], sandboxInjectedGlobals: [ 'Math', ], reporters: [ &quot;default&quot;, &quot;jest-junit&quot; ] }; // eslint-disable-next-line import/no-default-export export default config;   ","version":"0.13.1","tagName":"h3"},{"title":"AskUIAnnotationStepReporter​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#askuiannotationstepreporter","content":" ","version":"0.13.1","tagName":"h2"},{"title":"Enable and Configure the AskUIAnnotationStepReporter in jest.setup.ts​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#enable-and-configure-the-askuiannotationstepreporter-in-jestsetupts","content":" import { AskUIAnnotationStepReporter, AnnotationLevel } from '@askui/askui-reporters'; ... aui = await UiControlClient.build({ ... reporter: new AskUIAnnotationStepReporter( // AnnotationLevel.ON_FAILURE, /* Uncomment and change to AnnotationLevel.ALL for reporting at every step */ // folderPath: &quot;report&quot;, /* Uncomment and change property for different folder */ // fileNameSuffix: &quot;_testStep_annotation&quot; /* Uncomment and change property for different file name suffix */ ), }); ...   AnnotationLevel is implemented as an enum. You have two options:  ON_FAILURE (Default Value): After a step failedALL: After every step  folderPath is the folder name, relative to the root of your project, the report-files will be saved to.  Default value: report  fileNameSuffix: The suffix for every report-file.  The generated report-filename has the following name convention: ** {YYYYYYMMDDTHHmmsssss}_{passed|failed}{fileNameSuffix}.html** Example: 20230922072153421_failed_testStep_annotation.html  ","version":"0.13.1","tagName":"h3"},{"title":"Enable Multiple Reporters​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#enable-multiple-reporters","content":" You can enable multiple reporters simultaneously by passing an array of reporters in the reporter property like this:  aui = await UiControlClient.build({ reporter: [ new AskUIAnnotationStepReporter( AnnotationLevel.ALL, &quot;annotation_report&quot;, &quot;_annotation&quot; ), new AskUIJestHtmlStepReporter({ withScreenshots: 'always' as const, // See below for possible values withDetectedElements: 'always' as const, // See below for possible values }) ], });   caution The testEnvironment setting has to be the SAME for all reporters in the array! The following table shows which reporters can be enabled together.  \tAskUIAllureStepReporter\tAskUIJestHtmlStepReporter\tAskUIAnnotationStepReporter\tAskUIXRayStepReporterAskUIAllureStepReporter ❌\t❌\t❌ AskUIJestHtmlStepReporter\t❌ ✅\t✅ AskUIAnnotationStepReporter\t❌\t✅ ✅ AskUIXRayStepReporter\t❌\t✅\t✅\t  ","version":"0.13.1","tagName":"h2"},{"title":"Implement Your Own Reporter​","type":1,"pageTitle":"Reporting","url":"/docs/general/Integrations/reporting#implement-your-own-reporter","content":" To write your own reporter you have to implement AskUI's Reporter interface. It offers three optional methods you can overwrite to adapt to your specific reporter framework:  export interface Reporter { config?: ReporterConfig; onStepBegin?(step: Step): Promise&lt;void&gt;; onStepRetry?(step: Step): Promise&lt;void&gt;; onStepEnd?(step: Step): Promise&lt;void&gt;; }   See the Example implementation for Allure on how that is used to extract the screenshot before/after each step and how to record a video of each step. ","version":"0.13.1","tagName":"h2"},{"title":"macOS","type":0,"sectionRef":"#","url":"/docs/general/Troubleshooting/mac-os","content":"","keywords":"","version":"0.13.1"},{"title":"Elements Can't Be Found / Annotated Screen Empty / UI Controller not starting​","type":1,"pageTitle":"macOS","url":"/docs/general/Troubleshooting/mac-os#elements-cant-be-found--annotated-screen-empty--ui-controller-not-starting","content":"   Our UiController needs the permission for Screen Recording and Accessibility on macOS.  Here is a step-by-step guide on how to fix missing permissions:  Head over to System Preferences &gt; Security &amp; Privacy. Open the Privacy tab and check if you can find the askui-ui-controller under Screen Recording and Accessibility (See next picture for reference).    1.1 If askui-ui-controller does NOT have the permissions, give it to it and restart your workflow. Make sure to reopen your terminal you run workflow from. If it still does not work go on with step 1.2 below.  1.2. If askui-ui-controller has the permissions, revoke them by unchecking the corresponding checkboxes and removing the application from each list by clicking the minus (-) button.  By default AskUI starts the UiController in the background which sometimes messes up the permissions. Now you will start the UiController manually which triggers the permission prompt of macOS. Therefore you need to execute the UiController executable that was downloaded into your AskUI project when you ran your workflow. Head over to the folder where your initialized AskUI. Navigate to node_modules/askui/dist/release/&lt;version&gt;/darwin.&lt;version&gt; may be latest or a semantic version like v0.8.0. In there, you should find a ``askui-controller.appdirectory which is your installation of the AskUI UI Controller. Open theaskui-controller.app` directory in your Finder by right-clicking it and select Reveal in Finder (See screenshot below). Then start it by double-clicking it in the Finder.    The application should ask for Screen Recording permissions which you have to grant for it to work.  We are actively searching for a solution to improve the current state of affairs but Apple does not make it easy (which is good for your privacy but not so much for automation frameworks). But be sure that we keep trying!  ","version":"0.13.1","tagName":"h2"},{"title":"Mouse Cursor Not Moving as Expected​","type":1,"pageTitle":"macOS","url":"/docs/general/Troubleshooting/mac-os#mouse-cursor-not-moving-as-expected","content":" Apple devices that have a display manufactured by Apple, i.e., Macbook, iMac have a so-called Retina Display, and they have a higher pixel density.  To use the actions such as moveMouse() or moveMouseRelatively(), the coordinates should be doubled in order to move the mouse cursor as expected.  For example, let's say that your screen resolution is of 1920x1080. If you want to move the mouse cursor to the middle of the screen, the correct numeric arguments are as such:  await aui.moveMouse(1920,1080).exec();   The coordinate of the middle of the screen is (960,540). But if you use these numbers, it will move the cursor only half of the expected distance. ","version":"0.13.1","tagName":"h2"},{"title":"Jest","type":0,"sectionRef":"#","url":"/docs/general/Troubleshooting/jest","content":"","keywords":"","version":"0.13.1"},{"title":"Global Hooks Not Executed or Executed in Wrong Order​","type":1,"pageTitle":"Jest","url":"/docs/general/Troubleshooting/jest#global-hooks-not-executed-or-executed-in-wrong-order","content":" If you use Jest's global hooks like before*() and after*() that do no reside inside a describe-block you may run into the following issues:  Hooks are not executed at allHooks are executed in wrong order  The solution is to stop using global hooks and do your setup inside a describe-block. Please also consult Jest's docs for a detailed explanation.  /* * DO NOT DO THIS! */ beforeAll(() =&gt; console.log('1 - beforeAll')); // won't work reliably afterAll(() =&gt; console.log('1 - afterAll')); // won't work reliably beforeEach(() =&gt; console.log('1 - beforeEach')); // won't work reliably afterEach(() =&gt; console.log('1 - afterEach')); // won't work reliably it('', () =&gt; console.log('1 - test')); /* * DO THIS INSTEAD */ describe('Scoped / Nested block', () =&gt; { beforeAll(() =&gt; console.log('2 - beforeAll')); // works afterAll(() =&gt; console.log('2 - afterAll')); // works beforeEach(() =&gt; console.log('2 - beforeEach')); // works afterEach(() =&gt; console.log('2 - afterEach')); // works it('', () =&gt; console.log('2 - test')); describe('More deeply scoped / nested block', () =&gt; { beforeAll(() =&gt; console.log('3 - beforeAll')); // works afterAll(() =&gt; console.log('3 - afterAll')); // works beforeEach(() =&gt; console.log('3 - beforeEach')); // works afterEach(() =&gt; console.log('3 - afterEach')); // works it('', () =&gt; console.log('3 - test')); }); });   ","version":"0.13.1","tagName":"h2"},{"title":"Termination Error​","type":1,"pageTitle":"Jest","url":"/docs/general/Troubleshooting/jest#termination-error","content":" Jest sometimes has problems terminating correctly. If this happens, you can see the following error message:  Jest did not exit one second after the test run has completed. This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.   As described in the error message Jest has problems stopping because of some processes which are still running. This can cause problems in your CI/CD pipeline because your pipeline can't continue after getting this error.  A solution is to force Jest to stop. For this case Jest provides the --forceExit flag:  npx jest --config ./test/jest.config.ts --forceExit  ","version":"0.13.1","tagName":"h2"},{"title":"Linux","type":0,"sectionRef":"#","url":"/docs/general/Troubleshooting/linux","content":"","keywords":"","version":"0.13.1"},{"title":"Wayland​","type":1,"pageTitle":"Linux","url":"/docs/general/Troubleshooting/linux#wayland","content":" We do not yet support the windowing system Wayland for any Linux distribution. So you are going to see multiple errors when trying to run AskUI instructions or may not even be able to start the UI Controller.  You can check if you are running on Wayland with  echo $XDG_SESSION_TYPE   If it says &quot;wayland&quot;, you guessed it, you are running on Wayland.  As a solution, you can switch to Xorg instead of Wayland (how to switch to Xorg).  ","version":"0.13.1","tagName":"h2"},{"title":"libfuse2​","type":1,"pageTitle":"Linux","url":"/docs/general/Troubleshooting/linux#libfuse2","content":" If you are using Ubuntu 22.04 or later, you need to install libfuse before using AskUI lib since it's no longer installed by default.  libfuse2 can be installed with:  sudo apt-get update sudo apt-get install libfuse2  ","version":"0.13.1","tagName":"h2"},{"title":"Windows","type":0,"sectionRef":"#","url":"/docs/general/Troubleshooting/windows","content":"","keywords":"","version":"0.13.1"},{"title":"AskUI Remote Device Controller Not Responding to Instructions​","type":1,"pageTitle":"Windows","url":"/docs/general/Troubleshooting/windows#askui-remote-device-controller-not-responding-to-instructions","content":" A possible solution is to start the AskUI Remote Device Controller as administrator:  Right-Click the application and click Run as administrator  Background: When you start the AskUI Remote Device Controller and during the execution another process is started AND it is an admin process, the controller stops executing instructions.  ","version":"0.13.1","tagName":"h2"},{"title":"Execution Policy in Powershell Blocks Commands​","type":1,"pageTitle":"Windows","url":"/docs/general/Troubleshooting/windows#execution-policy-in-powershell-blocks-commands","content":" When you try to execute commands inside Powershell it may not be possible due to a restrictive Execution Policy.  You can set the Execution Policy inside the Powershell with the following command if you have the necessary permissions:  Set-ExecutionPolicy unrestricted   ","version":"0.13.1","tagName":"h2"},{"title":"AskUI UI Controller​","type":1,"pageTitle":"Windows","url":"/docs/general/Troubleshooting/windows#askui-ui-controller","content":" On Windows, the AskUI UI Controller may not terminate after each execution. This may lead to problems when using the AskUI UI Controller in a pipeline like a pipeline's run not coming to an end.  In this case you can force termination of the AskUI UI Controller. The UiController.stop() takes an optional boolean argument which is set to false by default. If we pass true to the UiController.stop() method, e.g., uiController.stop(true), we kill the AskUI UI Controller process.  await uiController.stop(true);   If you are using the Jest framework to execute your instructions, you can also force Jest to exit as described on our Jest-Troubleshooting page. This option terminates all processes which were set up and didn't close properly. The first option explicitly stops the AskUI UI Controller. ","version":"0.13.1","tagName":"h2"},{"title":"Proxy","type":0,"sectionRef":"#","url":"/docs/general/Troubleshooting/proxy","content":"","keywords":"","version":"0.13.1"},{"title":"Installing AskUI Through NTLM or Kerberos Proxy Server​","type":1,"pageTitle":"Proxy","url":"/docs/general/Troubleshooting/proxy#installing-askui-through-ntlm-or-kerberos-proxy-server","content":" A Windows New Technology LAN Manager (NTLM) or Kerberos proxy requires you to authenticate yourself. This is done via your currently logged in Windows user or the username/password combination (Linux, macOS). The easiest way to do this is to install a local proxy that handles the handshake with the proxy for you.  ","version":"0.13.1","tagName":"h2"},{"title":"Install Local Proxy​","type":1,"pageTitle":"Proxy","url":"/docs/general/Troubleshooting/proxy#install-local-proxy","content":" We recommend Px as a local proxy. Install it in your preferred way and start it. The default port it runs on is 3128.  tip Choose the binary option if a package manager is not feasible in your environment.  ","version":"0.13.1","tagName":"h3"},{"title":"Windows Startup​","type":1,"pageTitle":"Proxy","url":"/docs/general/Troubleshooting/proxy#windows-startup","content":" You can add Px to the startup for the binary zipped option in Windows like this:  Create a px-start.bat file within the unzipped folder, e.g., c:\\tools\\px with the content: cd c:\\tools\\px (or whatever path you unzipped the archive to) px.exe Double-Click on the px-start.bat file to start Px Optional: Set up Px to autostart on system startup so you don’t have to start it manually each time you want to use it Create a link to px-start.batOpen the startup folder with Windows logo key + R, enter shell:startupMove the link to px-start.bat into this folder  ","version":"0.13.1","tagName":"h3"},{"title":"Create .npmrc file for npm​","type":1,"pageTitle":"Proxy","url":"/docs/general/Troubleshooting/proxy#create-npmrc-file-for-npm","content":" Create a .npmrc file in your AskUI project. You want to make sure that:  registry and noproxy point to your companies registry (i.e. Artifactory)proxy and https-proxy point to the local Px proxy  registry=&lt;company-registry-url&gt; proxy=http://127.0.0.1:3128 https-proxy=http://127.0.0.1:3128 noproxy=&lt;company-registry-url&gt;   ","version":"0.13.1","tagName":"h3"},{"title":"Set Environment Variables​","type":1,"pageTitle":"Proxy","url":"/docs/general/Troubleshooting/proxy#set-environment-variables","content":" Setting the proxy inside .npmrc does not cover all cases. Sometimes a separate node command spawns a new process which does not inherit the proxy settings. Therefore you need to set the environment variable HTTPS_PROXY like this:  Windows instructions  # Linux and macOS # Add it to your favourite shell # at startup if necessary export HTTPS_PROXY=http://127.0.0.1:3128   ","version":"0.13.1","tagName":"h3"},{"title":"UiController Connection to AskUI Inference​","type":1,"pageTitle":"Proxy","url":"/docs/general/Troubleshooting/proxy#uicontroller-connection-to-askui-inference","content":" We describe two ways to connect to our backend AskUI Inference.  ","version":"0.13.1","tagName":"h2"},{"title":"Using Default Configuration with hpagent​","type":1,"pageTitle":"Proxy","url":"/docs/general/Troubleshooting/proxy#using-default-configuration-with-hpagent","content":" Per default, our library uses hpagent to support the use of HTTP and HTTPS proxies. hpagent is an open source package which provides HTTP(S) proxies that keeps connections alive. To use it, you need to  install hpagent  npm install --save-dev hpagent   configure which proxies to use by setting the proxies' URLs using the environment variables HTTP_PROXY or HTTPS_PROXY  export HTTP_PROXY=http://&lt;your-proxy-url&gt; export HTTPS_PROXY=https://&lt;your-proxy-url&gt;   ","version":"0.13.1","tagName":"h3"},{"title":"Manually Configuring the HTTP and HTTPS Agent​","type":1,"pageTitle":"Proxy","url":"/docs/general/Troubleshooting/proxy#manually-configuring-the-http-and-https-agent","content":" If you need even more control, you can also configure an HTTP agent and HTTPS agent supporting your proxy manually for either one or both,  the UI Controller (configuring the UiController) running on the OS you would like to control andthe Inference API (configuring the UiControlClient) running on our servers and providing the vision to run your tests.  In the following example we are going to use hpagent again but you can use any HTTP and HTTPS agents that support proxies, e.g., the http.Agent or the https.Agent provided by the http and https module of Node.js, respectively.  Install hpagent  npm install --save-dev hpagent   Import hpagent (or the agent(s) you would like to use) and configure the UiController and/or the UiControlClient inside the test/helpers/askui-helper.ts file.  import { HttpProxyAgent, HttpsProxyAgent } from 'hpagent'; // &lt;-- Add imports // other code beforeAll(async () =&gt; { // Add this block const httpProxyUrl = &quot;http://&lt;your-proxy-url&gt;&quot; // &lt;-- Adapt http proxy url const httpsProxyUrl = &quot;https://&lt;your-proxy-url&gt;&quot; // &lt;-- Adapt https proxy url const proxyAgents = { http: new HttpProxyAgent({ proxy: httpProxyUrl, }), https: new HttpsProxyAgent({ proxy: httpsProxyUrl, }), } // other code uiController = new UiController({ proxyAgents // &lt;-- Set proxy agents }); // other code aui = await UiControlClient.build({ proxyAgents // &lt;-- Set proxy agents }); // other code })   Here are some example for the httpProxyUrl (for more details see docs from hpagent)  Proxy Type\tURL\tDescriptionHTTP\te.g. http://proxy.company.com:8293\tA HTTP proxy without authentication HTTP + Basic Auth\te.g. http://username:password@proxy.company.com:8293\tA HTTP proxy with authentication SOCKET Socket proxies are not supported by hpagent  Here are some example for the httpsProxyUrl (for more details see docs from hpagent)  Proxy Type\tURL\tDescriptionHTTPS\te.g. https://proxy.company.com:8293\tA HTTPS proxy without authentication HTTPS + Basic Auth\te.g. https://username:password@proxy.company.com:8293\tA HTTP proxy with authentication. SOCKET Socket proxies are not supported by hpagent  ","version":"0.13.1","tagName":"h3"},{"title":"Deep Package Inspection​","type":1,"pageTitle":"Proxy","url":"/docs/general/Troubleshooting/proxy#deep-package-inspection","content":" Company proxies, like Zscalar, use deep package inspection to analyze the network traffic. Such proxies are adding self-signed certificates to the HTTPS request to break up the TLS connection.  This can result in the following error messages:   RequestError: self signed certificate   or   RequestError: unable to verify the first certificate   There are multiple options to deal with this:  Deactivate TLS certificate validation (NOT RECOMMENDED)​  This option deactivates the TLS validation (see here) and is not recommended. Only for testing!  Windows:  set NODE_TLS_REJECT_UNAUTHORIZED 0   macOS/Unix:  export NODE_TLS_REJECT_UNAUTHORIZED=0   Add Self-Signed Certificate as Extra CA Certs (RECOMMENDED)​  The other option is to add the self-signed certificate as extra certificates for Node.js.  Get the certificate and convert it to a .pem file, e.g., by exporting it with Chrome.Set the NODE_EXTRA_CA_CERTS with the following commands:  Windows:  set NODE_EXTRA_CA_CERTS '&lt;path&gt;\\&lt;cert&gt;.pem'   macOS/Unix:  export NODE_EXTRA_CA_CERTS='&lt;path&gt;/&lt;cert&gt;.pem'   Additional information:  Get Zscalar custom certificate ","version":"0.13.1","tagName":"h3"},{"title":"Tutorials","type":0,"sectionRef":"#","url":"/docs/general/Tutorials","content":"","keywords":"","version":"0.13.1"},{"title":"🤖 Android​","type":1,"pageTitle":"Tutorials","url":"/docs/general/Tutorials#-android","content":" Web Search on Android Go to Tutorial Flutter Android App Go to Tutorial  ","version":"0.13.1","tagName":"h2"},{"title":"🕸️ Browser​","type":1,"pageTitle":"Tutorials","url":"/docs/general/Tutorials#️-browser","content":" Google Cat Search Go to Tutorial Online Shop Go to Tutorial  ","version":"0.13.1","tagName":"h2"},{"title":"💻 Desktop​","type":1,"pageTitle":"Tutorials","url":"/docs/general/Tutorials#-desktop","content":" Spotify Like Go to Tutorial ","version":"0.13.1","tagName":"h2"},{"title":"Google Cat Image Search","type":0,"sectionRef":"#","url":"/docs/general/Tutorials/google-cat-search","content":"","keywords":"","version":"0.13.1"},{"title":"Setup​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/general/Tutorials/google-cat-search#setup","content":" Follow one of the two options under Start to install AskUIOpen a Chrome browser window on your screen If you have multiple screens, configure the used display by setting the display variable in test/helpers/askui-helper.ts  ","version":"0.13.1","tagName":"h2"},{"title":"Setting Up AskUI​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/general/Tutorials/google-cat-search#setting-up-askui","content":" 💭 Let’s say we’re on google.com and we want to search for an image of a cat and then download it to our computer.  First, we break this task down into steps that a user would take. Then we can recreate those steps with AskUI instructions in code.  Go to Google Search pageGo to google imagesType “cat” in the search barSelect imageRight-click + save the image  Let us first get an annotated screenshot, where all of the on-screen elements are enclosed within annotated bounding boxes. This will help us select the correct elements with our instructions.  Open the file test/my-first-askui-test-suite.test.ts and replace the it-code block starting in line 4 with the following code:  it('annotate', async () =&gt; { await aui.annotate() });   Run the code from your terminal to create an annotated screenshot. A folder report in your project folder will appear.  npm run askui   If you want to annotate interactively change it to the following:  it('annotate', async () =&gt; { // Hit 'Esc' to stop the annotation // when you are done await aui.annotateInteractively() });   📌 The annotations are basically the substitute for IDs in selector-based frameworks. You can click on them to copy them into your clipboard.  If you are having problems with the execution, have a look at our Troubleshooting page.  ","version":"0.13.1","tagName":"h2"},{"title":"Writing and Debugging an AskUI Workflow​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/general/Tutorials/google-cat-search#writing-and-debugging-an-askui-workflow","content":" Now we can start to write our workflow, by locating the elements and then executing an instruction on them. Remember the steps, that we wanted to recreate?  Go to Google Search pageGo to google imagesType “cat” in the search barSelect imageRight-click + save the image  tip Make sure to open your browser on the configured display before the execution and move your mouse over the browser window immediately after starting the execution!  In the end, your code for the workflow looks like this.  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should find a cat image and save it', async () =&gt; { // Make sure the browser window has focus await aui.mouseLeftClick().exec(); // Open a new tab with keyboard shortcut // MacOS: command + t // Windows: control + T // Linux: control + t await aui .pressTwoKeys('command', 't') .exec(); // type google.com into browser bar await aui .typeIn('google.com') .text() .withText('Search Google or type a URL') .exec(); // Hit enter key await aui .pressKey('enter') .exec(); // Click the Images-text to the right of Gmail await aui .click() .text().withTextRegex(&quot;Image*&quot;) .rightOf() .text(&quot;Gmail&quot;) .exec(); // Type in cat into search field // Notice: withText does not have to be 100% equal await aui .typeIn(&quot;cat&quot;) .textfield() .contains() .icon().withText('microphone') .exec(); await aui .pressKey('enter') .exec(); // HINT // withText might need to be changed depending // on your search results! await aui .moveMouseTo() .image() .above() .text() .withText(&quot;pet guru Yuki Hattori explaiinICats&quot;) .exec(); // Save the image with right click await aui .mouseRightClick() .exec() // Find the right dialog entry await aui .click() .text() .withText('save image as') .exec(); // Save it // If it does not work because the button is not found // Remove the '.button()' await aui .click() .button() .withText(&quot;Save&quot;) .exec(); }); });   ","version":"0.13.1","tagName":"h2"},{"title":"Debugging​","type":1,"pageTitle":"Google Cat Image Search","url":"/docs/general/Tutorials/google-cat-search#debugging","content":" It’s possible that you’ll run into problems with locating elements. For example, when creating the tutorial, we first tried to locate the image nearest to the image title, like this:  await aui .moveMouseTo() .image() .nearestTo() .text() .withText(&quot;pet guru Yuki Hattori explaiinICats&quot;) .exec()   But it turns out, that our model uses a different metric for measuring distance between elements, which is why our workflow failed the first time. Then we substituted this function for above(), which fixed the problem for us.  Another problem regarding font-size occurred with the Images button. The model recognized Image with an s missing at the end. That is why we switched from _withText('Images') to withTextRegex('Image*').  await aui .click() .text().withTextRegex(&quot;Image*&quot;) .rightOf() .text(&quot;Gmail&quot;) .exec();   It is always a good idea to try to play around with the functions and see if you can tackle the problem from a different angle.  If you have a recurring or persisting issue, don’t hesitate to ask the community for help. You can be sure that your questions will be answered there. We’re excited to hear about how you apply AskUI to your projects.  If you have any feature requests, please feel free to post them in our Featurebase board.  Best regards and happy automating! ","version":"0.13.1","tagName":"h2"},{"title":"Web Search on Android","type":0,"sectionRef":"#","url":"/docs/general/Tutorials/android-search-in-browser","content":"","keywords":"","version":"0.13.1"},{"title":"Requirements​","type":1,"pageTitle":"Web Search on Android","url":"/docs/general/Tutorials/android-search-in-browser#requirements","content":" Android Studio or Android SDK Command-line Tools installed (See Setup Android tutorial).(optional) Android device, if you want to run your app on a real device.    ","version":"0.13.1","tagName":"h2"},{"title":"1. Prepare the AskUI Development Environment​","type":1,"pageTitle":"Web Search on Android","url":"/docs/general/Tutorials/android-search-in-browser#1-prepare-the-askui-development-environment","content":" ","version":"0.13.1","tagName":"h2"},{"title":"Install and initialize AskUI​","type":1,"pageTitle":"Web Search on Android","url":"/docs/general/Tutorials/android-search-in-browser#install-and-initialize-askui","content":" Please follow the Getting Started tutorial.  Configure AskUI for Android  We need to run the UiController manually with an extra argument to specify the runtime mode, as the current version of AskUI doesn't provide the API for running it with the runtime option yet:  # first, go to the folder that contains the binary cd &lt;YOUR_PROJECT_DIRECTORY&gt;/node_modules/askui/dist/release/latest/&lt;YOUR_PLATFORM&gt; # for example, Mac OS cd node_modules/askui/dist/release/latest/darwin/askui-ui-controller.app/Contents/MacOS/ # then run it ./askui-ui-controller -r android # If you can't find the binary as described above, # then you might have AskUI freshly installed and haven't run it yet. # The binary gets downloaded as the AskUI code runs the first time. # Run the command below to run the AskUI code: npm run askui   If the UiController starts, it will display the log of it on the shell. We can leave it in the background, and prepare a new terminal window for the next step.  💡If you got any errors after running the binary, please check if your android device/emulator is properly connected and recognized by the Android Debug Bridge adb by using this command: adb devices. You should see a list of recognized devices.  Next, we have to change a few lines of the generated code, as the code ships with the part that creates another UiController instance.  Go to helper/jest.setup.ts and comment out every line that is using uiController:  import { UiControlClient, UiController } from 'askui'; // Server for controlling the operating system // let uiController: UiController; // Client is necessary to use the askui API // eslint-disable-next-line import/no-mutable-exports let aui: UiControlClient; jest.setTimeout(60 * 1000 * 60); beforeAll(async () =&gt; { // uiController = new UiController({ // /** // * Select the display you want to run your tests on, display 0 is your main display; // * ignore if you have only one display // */ // display: 0, // }); // await uiController.start(); aui = await UiControlClient.build({ credentials: { workspaceId: myworkspaceid, token: mytoken, } }); await aui.connect(); }); afterAll(async () =&gt; { // await uiController.stop(); aui.disconnect(); }); export { aui };     ","version":"0.13.1","tagName":"h3"},{"title":"2. Try Annotating​","type":1,"pageTitle":"Web Search on Android","url":"/docs/general/Tutorials/android-search-in-browser#2-try-annotating","content":" Make sure that your Android device is connected, or if you are using the Android Emulator, make sure that it is open and running on your local machine.  AskUI provides a feature where you can monitor how the visible elements are understood by AskUI. Try to change the code within test/my-first-askui-test-suite.test.ts to the following:  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should show the annotation', async () =&gt; { await aui.annotateInteractively(); }); });   and run,  npm run askui     💡 Annotation is InteractiveTry to hover your mouse on the red bounding box. It will let you know how to manipulate that element via AskUI  ","version":"0.13.1","tagName":"h2"},{"title":"3. Automate Web Searching​","type":1,"pageTitle":"Web Search on Android","url":"/docs/general/Tutorials/android-search-in-browser#3-automate-web-searching","content":" Now we are good to go for the actual automation process. The automation consist of three steps:  Open ChromeSelect the search bar and type 'spacecraft'Click on the desired search result  ","version":"0.13.1","tagName":"h2"},{"title":"1) Open Chrome​","type":1,"pageTitle":"Web Search on Android","url":"/docs/general/Tutorials/android-search-in-browser#1-open-chrome","content":" To open Chrome, we first have to figure out how we can let AskUI know where to click on.  As we can see in the annotated image above, the Chrome icon is recognized as an icon: undo. Indeed, we could also tell AskUI to select the icon: undo, but we will try to do it in a more precise way.  What we're gonna do is:  (1) Select the search bar  (2) Type 'chrome'  (3) Select the icon above the text 'chrome'  This approach will give us a more consistent result because typing &quot;chrome&quot; in the search bar will give us a more understandable visual element.  Try to change your code according to this:  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should open chrome', async () =&gt; { await aui.click().textfield().exec(); // Type the desired keyword into the search bar await aui.type('chrome').exec(); // We wait for 1500 milliseconds, to make sure that the search result // has been loaded before AskUI start to look for the search result. await aui.waitFor(1500).exec(); // Then click the icon that is above the text 'chrome' await aui.click().icon().above().text('chrome').exec(); }); });   and run,  npm run askui   Now you will be able to see that Chrome has been opened.  ","version":"0.13.1","tagName":"h3"},{"title":"2) Select the Search Bar and Type 'spacecraft'​","type":1,"pageTitle":"Web Search on Android","url":"/docs/general/Tutorials/android-search-in-browser#2-select-the-search-bar-and-type-spacecraft","content":" Let's select the search bar of chrome, and type our desired keyword in there.    Add this code block to the bottom of our code:  // We first look for the search bar. Depending on the system language of your device, the default text within the search bar may differ. await aui.click().text('search or type web address').exec(); // Type our desired keyword and hit enter await aui.type('spacecraft').exec(); await aui.pressAndroidKey('enter').exec();   In some cases, when searching in Google, you will be asked to give consent for the cookies. To avoid our execution from failing, we have to examine whether we got a pop-up for the cookie consent or not:  try { // The 'expect()' examines whether a specific element is detected or not. // An instruction starting with 'expect()' must always end with 'exists()' or 'notExists()' await aui.expect().text().containsText('cookies').notExists().exec(); } catch (error) { await aui.click().text('read more').exec(); await aui.waitFor(1000).exec(); // wait until the scrolling animation has been finished await aui.click().text('accept all').exec(); } // From here, we can write our next instructions   ","version":"0.13.1","tagName":"h3"},{"title":"3) Click on the Desired Search Result​","type":1,"pageTitle":"Web Search on Android","url":"/docs/general/Tutorials/android-search-in-browser#3-click-on-the-desired-search-result","content":"   After clearing the cookie consent pop-up, we can see and click our desired search result. In our case, we will look for the result from Wikipedia:  // We ask the AskUI to click the text that contains 'wikipedia', // which is the text that is nearest to the text containing 'wikipedia.org' await aui.click() .text() .containsText('wikipedia') .nearestTo() .text() .containsText('wikipedia.org') .exec();   Pay attention to the relational element-description nearestTo() that is interconnecting two different text elements.  AskUI offers several Relational Element-Descriptions, which enable you to select the desired element by their screen position:  above()below()contains()in()leftOf()rightOf()nearestTo()  💡 About withText() and containsText():  You might wonder how withText() and containsText() differ. withText() tries to match the given text as the whole sequence, whereas containsText() tries to match the given text as a sub-text within the elements. Generally speaking, containsText() can be handier to match the text roughly, but you might face a case where you want to find a specific text as a whole sequence.    ","version":"0.13.1","tagName":"h3"},{"title":"4. Complete AskUI Code​","type":1,"pageTitle":"Web Search on Android","url":"/docs/general/Tutorials/android-search-in-browser#4-complete-askui-code","content":" import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { it('should search spacecraft in chrome', async () =&gt; { await aui.click().textfield().exec(); // Type the desired keyword into the search bar await aui.type('chrome').exec(); // We wait for 1500 miliseconds, to make sure that the search result has been loaded before AskUI start to look for the search result. await aui.waitFor(1500).exec(); // Then click the icon that is above the text 'chrome' await aui.click().icon().above().text('chrome').exec(); // We wait the Chrome app to be launched await aui.waitFor(1500).exec(); // We first look for the search bar. Depending on the system language of your device, the default text within the search bar may differ. await aui.click().text('search or type web address').exec(); // Type our desired keyword and hit enter await aui.type('spacecraft').exec(); await aui.pressAndroidKey('enter').exec(); // We wait for the search result to be loaded await aui.waitFor(3000).exec(); try { // The 'expect()' examines whether a specific element is detected or not. // An instruction starting with 'expect()' must always end with 'exists()' or 'notExists()' await aui.expect().text().containsText('cookies').notExists().exec(); } catch (error) { await aui.click().text('read more').exec(); await aui.waitFor(1000).exec(); // wait until the scrolling animation has been finished await aui.click().text('accept all').exec(); } // We ask the AskUI to click the text that contains 'wikipedia' which is the text that is nearest to the text containing 'wikipedia.org' await aui.click().text().containsText('wikipedia').nearestTo().text().containsText('wikipedia.org').exec(); }); });     ","version":"0.13.1","tagName":"h2"},{"title":"5. Conclusion​","type":1,"pageTitle":"Web Search on Android","url":"/docs/general/Tutorials/android-search-in-browser#5-conclusion","content":" We have covered a use case of AskUI to automate web searching in Android devices. If you got any issues while following the instruction, feel free to ask in our Outverse-Community! ","version":"0.13.1","tagName":"h2"},{"title":"Online Shop Login","type":0,"sectionRef":"#","url":"/docs/general/Tutorials/shop-demo","content":"","keywords":"","version":"0.13.1"},{"title":"Setup​","type":1,"pageTitle":"Online Shop Login","url":"/docs/general/Tutorials/shop-demo#setup","content":" Follow the AskUI installation guide and write your first instructionOpen a browser on your screen If you have multiple screens, configure the used display by setting the display variable at test/helpers/askui-helper.ts  ","version":"0.13.1","tagName":"h2"},{"title":"Code​","type":1,"pageTitle":"Online Shop Login","url":"/docs/general/Tutorials/shop-demo#code","content":" After running the npx askui init command as described in the setup you will have a file test/my-first-askui-test-suite.test.ts. In this file add a new workflow (it-code-block) inside the body of the callback passed to the describe function:  describe(/* a string identifying the test suite */, () =&gt; { ... (other workflows) it('Should log into account', async () =&gt; { }); });   ","version":"0.13.1","tagName":"h2"},{"title":"1. Open the Demo Shop​","type":1,"pageTitle":"Online Shop Login","url":"/docs/general/Tutorials/shop-demo#1-open-the-demo-shop","content":" First we need to open the demo shop in the browser. For that we open the browser and then type the URL into the search bar and hit enter.  it('Should log into account', async () =&gt; { // First open the browser. // If it is already open it should focus the current window // macOS: open -a 'Google Chrome' // Windows: start chrome await aui.execOnShell(&quot;start chrome&quot;).exec(); // Open a new tab // macOS: command + t // windows: control + t await aui.pressTwoKeys('control', 't').exec(); // Click the textfield or URL bar that contains // the text 'Search Google or type a URL' await aui.click() .text() .withText('Search Google or type a URL').exec(); // Type the text into the focused element await aui.type('https://askui-demo-shop-6e358.web.app/').exec(); // Navigate to the website await aui.pressKey('enter').exec(); });   When you run this code with npm run askui, you should see the demo online shop opening in the browser you opened.  ","version":"0.13.1","tagName":"h3"},{"title":"2. Navigate to the Login Dialog​","type":1,"pageTitle":"Online Shop Login","url":"/docs/general/Tutorials/shop-demo#2-navigate-to-the-login-dialog","content":" Next, to open the login dialog, we need to click the text login at the top of the page. We can do this with the following instruction:  it('Should log into account', async () =&gt; { ... await aui.click().text('Login').exec(); });   ","version":"0.13.1","tagName":"h3"},{"title":"3. Fill out Login Information​","type":1,"pageTitle":"Online Shop Login","url":"/docs/general/Tutorials/shop-demo#3-fill-out-login-information","content":" After opening the login dialog, we need to enter an email address and a password. For this we will use the typeIn action. After filling in an email address, depending on the browser used the textfield may open an auto-complete drop-down that overlaps with the password field:    To keep the password field visible, we have to hide the auto-complete drop-down. In order to do this, we have to blur the email input field. We do this by clicking on the headline of the page (&quot;Login&quot;). Afterwards, we can type into the password field.  it('Should log into account', async () =&gt; { ... await aui.typeIn('test@askui.com').textfield().contains().text('Email Address').exec(); await aui.click().text('Login').above().textfield().exec(); await aui.typeIn('passwort').textfield().contains().text('Password').exec(); });   ","version":"0.13.1","tagName":"h3"},{"title":"4. Click on Login Button​","type":1,"pageTitle":"Online Shop Login","url":"/docs/general/Tutorials/shop-demo#4-click-on-login-button","content":" After filling in email and password, we need to click the login button. The following instruction does that for us:  it('Should log into account', async () =&gt; { ... await aui.click().button().contains().text('Log in').exec(); });   ","version":"0.13.1","tagName":"h3"},{"title":"5. Check whether Login worked & Log out​","type":1,"pageTitle":"Online Shop Login","url":"/docs/general/Tutorials/shop-demo#5-check-whether-login-worked--log-out","content":" Finally, we need to check whether the login worked. We can do this by checking if the text &quot;Logout test@askui.com&quot; is displayed in the header as this is only displayed if we are logged in. We complete the workflow by logging out so that the workflow can easily be rerun without having to log out manually.  it('Should log into account', async () =&gt; { ... await aui.expect().text('Logout test@askui.com').exists().exec(); await aui.click().text('Logout test@askui.com').exec(); });   ","version":"0.13.1","tagName":"h3"},{"title":"Result​","type":1,"pageTitle":"Online Shop Login","url":"/docs/general/Tutorials/shop-demo#result","content":" The following code block shows the finished code for the login of the web shop:  it('Should log into account', async () =&gt; { // First open the browser. // If it is already open it should focus the current window // macOS: open -a 'Google Chrome' // Windows: start chrome await aui.execOnShell(&quot;start chrome&quot;).exec(); // Open a new tab // macOS: command + t // windows: control + t await aui.pressTwoKeys('control', 't').exec(); // Click the textfield or URL bar that contains // the text 'Search Google or type a URL' await aui.click() .text() .withText('Search Google or type a URL').exec(); // Type the text into the focused element await aui.type('https://askui-demo-shop-6e358.web.app/').exec(); // Navigate to the website await aui.pressKey('enter').exec(); await aui.click().text('Login').exec(); await aui.typeIn('test@askui.com').textfield().contains().text('Email Address').exec(); await aui.click().text('Login').above().textfield().exec(); await aui.typeIn('passwort').textfield().contains().text('Password').exec(); await aui.click().button().contains().text('Log in').exec(); await aui.expect().text('test@askui.com').exists().exec(); await aui.click().text('Logout test@askui.com').exec(); });   To run this code use the npm run askui command. ","version":"0.13.1","tagName":"h2"},{"title":"Like on Spotify Desktop App","type":0,"sectionRef":"#","url":"/docs/general/Tutorials/spotify-tutorial","content":"","keywords":"","version":"0.13.1"},{"title":"Setup​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/general/Tutorials/spotify-tutorial#setup","content":" Follow the AskUI installation guide and write your first instructionOpen the Spotify desktop application on your screen If you have multiple screens, configure the used display by setting the display variable at test/helpers/askui-helper.ts  ","version":"0.13.1","tagName":"h2"},{"title":"Code​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/general/Tutorials/spotify-tutorial#code","content":" After running the npx askui init command as described in the setup you will have a file test/my-first-askui-test-suite.test.ts. In this file add a new workflow (it-code-block) inside the body of the callback passed to the describe function:  describe(/* a string identifying the test suite */, () =&gt; { ... (other tests) it('should like Spotify song', async () =&gt; { }); });   ","version":"0.13.1","tagName":"h2"},{"title":"1. Navigate to the Search Page​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/general/Tutorials/spotify-tutorial#1-navigate-to-the-search-page","content":" First, we need to open the search page where we can look for a song:  it('should like Spotify song', async () =&gt; { await aui.click().icon().withText('search').exec(); });   ","version":"0.13.1","tagName":"h3"},{"title":"2. Search for a Song​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/general/Tutorials/spotify-tutorial#2-search-for-a-song","content":" Then we can use the search field (a textfield) to search a song:  it('should like Spotify song', async () =&gt; { ... await aui.typeIn('Bohemian Rhapsody').textfield().exec(); await aui.pressKey('enter').exec(); });   ","version":"0.13.1","tagName":"h3"},{"title":"3. Open Menu for a Song​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/general/Tutorials/spotify-tutorial#3-open-menu-for-a-song","content":" On the search result page we need to right click a song to open the menu for the song:  it('should like Spotify song', async () =&gt; { ... await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Songs').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Save to your Liked Songs').exec(); });   As the text &quot;Bohemian Rhapsody&quot; is present on the page multiple times, we are specifying the position of the text we want to click further by saying that it is the one below the text &quot;Songs&quot;.  caution We expect that the song has not yet been liked (although we totally understand if this is the case - we like it, too 😉 - but just for the sake of this workflow, let's unlike it or use another song).  ","version":"0.13.1","tagName":"h3"},{"title":"4. Check Whether the Song was Added to Liked Songs​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/general/Tutorials/spotify-tutorial#4-check-whether-the-song-was-added-to-liked-songs","content":" Finally, we want to check whether the song was actually added to the liked songs:  it('should like Spotify song', async () =&gt; { ... await aui.click().text('Liked Songs').exec(); await aui.expect().text('Bohemian Rhapsody').exists().exec(); });   ","version":"0.13.1","tagName":"h3"},{"title":"5. Remove Song from Like Songs​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/general/Tutorials/spotify-tutorial#5-remove-song-from-like-songs","content":" To be able to run the workflow again, it is necessary to reset the state of Spotify, or more specifically, your liked songs. One option would be to add the following instructions to your code in order to remove the song from the liked songs.  it('should like Spotify song', async () =&gt; { ... await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Title').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Remove from your Liked Songs').exec(); });   ","version":"0.13.1","tagName":"h3"},{"title":"Result​","type":1,"pageTitle":"Like on Spotify Desktop App","url":"/docs/general/Tutorials/spotify-tutorial#result","content":" The following code block shows the complete code for the Spotify automation:  it('should like Spotify song', async () =&gt; { await aui.click().icon().withText('search').exec(); await aui.typeIn('Bohemian Rhapsody').textfield().exec(); await aui.pressKey('enter').exec(); await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Songs').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Save to your Liked Songs').exec(); await aui.click().text('Liked Songs').exec(); await aui.expect().text('Bohemian Rhapsody').exists().exec(); await aui.moveMouseTo().text('Bohemian Rhapsody').below().text('Title').exec(); await aui.mouseRightClick().exec(); await aui.click().text('Remove from your Liked Songs').exec(); });   To run this workflow use the npm run askui command. ","version":"0.13.1","tagName":"h2"},{"title":"Flutter Sample Android App","type":0,"sectionRef":"#","url":"/docs/general/Tutorials/flutter-android-sample-app","content":"","keywords":"","version":"0.13.1"},{"title":"Live Demo in Action (playback speed x3)​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/general/Tutorials/flutter-android-sample-app#live-demo-in-action-playback-speed-x3","content":"   ","version":"0.13.1","tagName":"h2"},{"title":"Setup​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/general/Tutorials/flutter-android-sample-app#setup","content":" The source code for the Flutter demo app used in this tutorial is provided in this repository.  ","version":"0.13.1","tagName":"h2"},{"title":"1. Build and Run Flutter Demo App​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/general/Tutorials/flutter-android-sample-app#1-build-and-run-flutter-demo-app","content":" Install Flutter Clone this repository and run flutter create demo_app within the directory:  git clone https://github.com/askui/flutter-example-automation cd flutter-example-automation flutter create demo_app cd demo_app   Install dependencies for the Flutter demo app:  # run this command inside the flutter project # directory `demo_app/` flutter pub add camera intl   To use the camera, we need to set the minSdkVersion in android/app/build.gradle:  // inside the 'android/app/build.gradle' // set the 'minSdkVersion' to 21 default config { ... minSdkVersion 21 ... }   (optional) The app is ready to be built but will throw deprecation warnings. If you want to clear the deprecation warnings, follow this step (See also this issue.).  # change the respective part inside the 'pubspec.yaml' dependencies: camera: git: url: https://github.com/flutter/plugins path: packages/camera/camera ref: 9e46048ad2e1f085c1e8f6c77391fa52025e681f   Run the Android Emulator. Run the demo app:  flutter run   Now you should see the demo app running on your Android device.  Setup ADBKeyboard In this example, we are going to automate the typing on the Android device. To let AskUI fluently type as desired, we will use a virtual keyboard that handles the keyboard input via adb: ADBKeyboard.apk  ‍  Download the ADBKeyboard package (Important: Version 2.0): Link to GitHub Repository Unzip it. Find your device:  # Make sure that your Android device is connected, and the USB debugging mode is enabled adb devices   Install the ADBKeyboard on the device:  # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; install ADBKeyboard.apk   Configure the ADB Keyboard:  # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; shell settings put secure default_input_method com.android.adbkeyboard/.AdbIME   Enable the ADB Keyboard:  # inside ADBKeyBoard-2.0/ adb -s &lt;your device id&gt; shell ime enable com.android.adbkeyboard/.AdbIME   To check if it is enabled:  Click on a textfield in an app and see if the ADB Keyboard {ON} notification is shown at the bottom of the screen.  ","version":"0.13.1","tagName":"h3"},{"title":"3. Setup AskUI​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/general/Tutorials/flutter-android-sample-app#3-setup-askui","content":" Setup AskUI by following the Getting Started Guide. We need to run the UiController directly with an extra argument to specify the runtime mode, as the current version of AskUI(version 0.7.2) doesn't provide the API for running it with the runtime argument yet. From within your npm project path, go to the directory that contains the askui-ui-controller binary:  cd &lt;YOUR_PROJECT_DIRECTORY&gt;/node_modules/askui/dist/release/latest/&lt;YOUR_PLATFORM&gt; ./askui-ui-controller -r android # for example, macOS: cd node_modules/askui/dist/release/latest/darwin/askui-ui-controller.app/Contents/MacOS/./askui-ui-controller -r android # If you can't find the binary as described above, # then you might have AskUI freshly installed and haven't run it yet. # The binary gets downloaded as the AskUI code runs. # Run the command below to run the AskUI code: npm run askui   If you got them both (emulator and UiController) running, then we are ready to go for the UI automation.  ‍ 3) You need to deactivate a few lines of the code in test/helpers/askui-helper.ts that is running the UiController, because we are already running it manually in the previous step:  // file location: test/helpers/askui-helper.ts // comment out every line that uses uiController import { UiControlClient, UiController } from 'askui'; // uiController: UiController; let aui: UiControlClient; jest.setTimeout(60 * 1000 * 60); beforeAll(async () =&gt; { // uiController = new UiController({ // /** // * Select the display you want to run your tests on, display 0 is your main display; // * ignore if you have only one display // */ // display: 0, // }); // await uiController.start(); aui = await UiControlClient.build({ credentials:{ workspaceId: 'YOUR_WORKSPACEID_FROM_ASKUI_STUDIO', token: 'YOUR_TOKEN_FROM_ASKUI_STUDIO', } }); await aui.connect(); }); afterAll(async () =&gt; { // await uiController.stop(); aui.disconnect(); }); export { aui };   ","version":"0.13.1","tagName":"h2"},{"title":"Breaking Down the AskUI Code​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/general/Tutorials/flutter-android-sample-app#breaking-down-the-askui-code","content":" This chapter will walk you through the provided askui-test/demo-automation.ts step by step. The code is divided into three parts, and each part automates a different tab within the demo app:  Outline tab: Find a textfield and type in characters.Datepicker tab: Select a desired date within the date picker widget.Camera tab: Open the camera and push the record button.  ","version":"0.13.1","tagName":"h2"},{"title":"0. General Tips for Using AskUI as a More Friendly Tool:​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/general/Tutorials/flutter-android-sample-app#0-general-tips-for-using-askui-as-a-more-friendly-tool","content":" Try to annotate : Use await aui.annotateInteractively() or await aui.annotate() in order to see how AskUI is understanding the visible elements on your screen. By using await aui.annotate(), the result of the annotation will be saved in the folder report/ as an HTML file. Be aware of the screen size of your device: AskUI understands your application based on the screen shown and captured. Therefore, on some occasions, you may want to know your screen size to e.g. properly scroll or swipe within your application. You may need to change the numbers for the input swipe command within the provided code so that it suits the screen size of your device. Try to select the elements by their text  tip: If you are using a device with a bigger screen e.g. Tablet, then the screen of your device (real Android device or emulator) might be big enough to see the whole page without scrolling.  ","version":"0.13.1","tagName":"h2"},{"title":"1. Click and Type​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/general/Tutorials/flutter-android-sample-app#1-click-and-type","content":" The code is within the file askui-test/demo-automation.ts. Copy and paste the code into your AskUI code.  We start the run from the very first tab of our demo app.    To type into a textfield, we first need to get focus on the desired textfield. We can achieve it by running the code below:  // click on the textfield and type characters // repeat this as many times as the textfields await aui.click().text('Enter your username').exec(); await aui.type('askui').exec();   As we have multiple of textfields in our demo app, we can iterate the same procedure for each of them:  // click on the textfield and type characters // repeat this as many times as the textfields await aui.click().text('Enter your username').exec(); await aui.type('askui').exec(); // click and type the email address await aui.click().text('Enter your email').exec(); await aui.type('askui@askui.com').exec(); // Click and type the address await aui.click().text('Enter your address').exec(); await aui.type('Haid-und-Neu-Straße 18').exec(); // Pressing enter is the equivalent of pressing the return button on the on-screen-keyboard // This gets rid of the focus from the textfield await aui.pressAndroidKey('enter').exec();   After filling up the textfields, we can push the buttons at the bottom of the page:  // Press the 'Submit' button await aui.click().text('Submit').exec(); // We will have a popup window that has two buttons. Press the 'Refuse' button await aui.click().text('Refuse').exec(); // Here we press multiple toggle buttons one by one await aui.click().text('Banana').exec(); await aui.click().text('Mango').exec(); await aui.click().text('Sunny').exec(); await aui.click().text('Rainy').exec(); await aui.click().text('Windy').exec(); // Attention for swiping! /* Swipe/scroll within the page - execOnShell() can run shell commands within the device via adb. - Note that, you have to adjust the four numeric parameters, in order to make it fit to your device's screen. - The syntax is: input swipe &lt;startX&gt; &lt;startY&gt; &lt;endX&gt; &lt;endY&gt; - Depending on the screen size of your device, the coordinates should stay within the scrollable/swipeable area of the app. i.e. the 'Tabbar' at the top of the demo app is not scrollable. */ // Here we swipe the page two times in a row await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); await aui.execOnShell('input swipe 1000 1000 100 1000').exec();   ","version":"0.13.1","tagName":"h3"},{"title":"Datepicker​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/general/Tutorials/flutter-android-sample-app#datepicker","content":" After running the code above, we should see the demo app swiped to the Datepicker tab.    First, we select and type characters into two different textfields:  // First, we type in the desired values into the textfields. await aui.click().text('Title').exec(); await aui.type('My vacation plan').exec(); await aui.click().text('Description').exec(); await aui.type('0. Drink a lot of water').exec(); await aui.pressAndroidKey('tab').exec();   Thereafter, we interact with two different date picker widgets that are represented with edit buttons:  // Second, we select a desired date from the Datepicker widget. // Notice how we select the icon 'chevron right/left' to shift the calendar month. await aui.click().text('edit').nearestTo().text('Depature').exec(); // this will open up the calendar await aui.click().icon().withText('chevron right').exec(); // within the calendar, we push the &gt; icon on the top right corner await aui.click().icon().withText('chevron right').exec(); await aui.click().text('7').exec(); // select 7 await aui.click().text('ok').exec(); // then, press OK // Repeat the step for the next Datepicker widget. await aui.click().text('edit').nearestTo().text('Return').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().text('5').exec(); await aui.click().text('ok').exec();   Let's go further below to the bottom of the page, and then interact with more interfaces:  // click and check the checkbox await aui.click().checkboxUnchecked().nearestTo().text('Brushed Teeth').exec(); // finally, we turn on the switch await aui.click().switchDisabled().nearestTo().text('Enable feature').exec(); // Swipe the page to the Camera tab await aui.execOnShell('input swipe 1000 1000 100 1000').exec();   ","version":"0.13.1","tagName":"h2"},{"title":"Take a Picture with the Camera​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/general/Tutorials/flutter-android-sample-app#take-a-picture-with-the-camera","content":" In the final tab Camera, we can launch the device's camera and take a picture by pressing the record button. ‍  // Click on the button 'Take a Picture', then it will launch the camera await aui.click().button().contains().text('Take a Picture').exec(); // Notice how we select the record button. // Our demo-app intends to have the record button in a circular shape. // So we can look for an icon which is a 'circle' // It might be different in other applications. await aui.click().icon().containsText('circle').exec();   ","version":"0.13.1","tagName":"h2"},{"title":"Complete AskUI Code​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/general/Tutorials/flutter-android-sample-app#complete-askui-code","content":" This is the complete code that runs AskUI to automate our workflow:  import { aui } from './helper/jest.setup'; describe('jest with askui', () =&gt; { xit('annotate', async () =&gt; { await aui.annotateInteractively(); }); it('should fill up the textfields and push buttons', async () =&gt; { // click on the textfield and type characters // repeat this as many times as the textfields await aui.click().text('Enter your username').exec(); await aui.type('askui').exec(); // click on the textfield and type the email await aui.click().text('Enter your email').exec(); await aui.type('askui@askui.com').exec(); // Click and type the address await aui.click().text('Enter your address').exec(); await aui.type('Haid-und-Neu-Straße 18').exec(); // Pressing enter is the equivelant to pressing the return button on the on-screen-keyboard // This gets rid of the focus from the textfield await aui.pressAndroidKey('enter').exec(); // Press the 'Submit' button await aui.click().text('Submit').exec(); // We will have a popup window that has two buttons. Press the 'Refuse' button await aui.click().text('Refuse').exec(); // Here we press multiple of toggle buttons one by one await aui.click().text('Banana').exec(); await aui.click().text('Mango').exec(); await aui.click().text('Sunny').exec(); await aui.click().text('Rainy').exec(); await aui.click().text('Windy').exec(); // Attention for swiping! /* Swipe/scroll within the page - execOnShell() can run shell commands within the device via adb. - Note that, you have to adjust the four numeric parameters, in order to make it fit to your device's screen. - The syntax is: input swipe &lt;startX&gt; &lt;startY&gt; &lt;endX&gt; &lt;endY&gt; - Depending on the screen size of your device, the coordinates should stay within the scrollable/swipeable area of the app. i.e. the 'Tabbar' at the top of the demo app is not scrollable. */ // Here we swipe the page two times in a row await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); }); it('should pick the dates', async () =&gt; { // First, we type in the desired values into the textfields. await aui.click().text('Title').exec(); await aui.type('My vacation plan').exec(); await aui.click().text('Description').exec(); await aui.type('0. Drink a lot of water').exec(); await aui.pressAndroidKey('tab').exec(); // Second, we select a desired date from the Datepicker widget. // Notice how we select the icon 'chevron right/left' to shift the calendar month. await aui.click().text('edit').nearestTo().text('Depature').exec(); // this will open up the calendar await aui.click().icon().withText('chevron right').exec(); // within the calendar, we push the &gt; icon on the top right corner await aui.click().icon().withText('chevron right').exec(); await aui.click().text('7').exec(); // select 7 await aui.click().text('ok').exec(); // then, press OK // Repeat the step for the next Datepicker widget. await aui.click().text('edit').nearestTo().text('Return').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().icon().withText('chevron right').exec(); await aui.click().text('5').exec(); await aui.click().text('ok').exec(); // click and check the checkbox await aui.click().checkboxUnchecked().nearestTo().text('Brushed Teeth').exec(); // finally, we turn on the switch await aui.click().switchDisabled().nearestTo().text('Enable feature').exec(); // Swipe the page to the Camera tab await aui.execOnShell('input swipe 1000 1000 100 1000').exec(); }); it('should take a picture', async ()=&gt;{ // Click on the button 'Take a Picture', then it will launch the camera await aui.click().button().contains().text('Take a Picture').exec(); // Notice how we select the record button. // Our demo-app intends to have the record button in a circular shape. // So we can look for an icon which is a 'circle' // It might be different in other applications. await aui.click().icon().containsText('circle').exec(); }); });   ","version":"0.13.1","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Flutter Sample Android App","url":"/docs/general/Tutorials/flutter-android-sample-app#conclusion","content":" After following through this tutorial, you should be able to automate the interaction with the provided demo app. Although this example specifically provides a demo app built with Flutter, the overall method of using AskUI should also work with any mobile app running on an Android device.  If you got an issue while following this example, or in case you would like to share your use case, don't hesitate to join our community on Outverse! ","version":"0.13.1","tagName":"h2"}],"options":{"indexBaseUrl":true,"includeRoutes":["/docs/**/api/API/*","/docs/**/api/**/*","/docs/**/general/*","/docs/**/general/**/*","/docs/api/API/*","/docs/api/**/*","/docs/general/*","/docs/general/**/*","/docs/next/api/API/*","/docs/next/api/**/*","/docs/next/general/*","/docs/next/general/**/*"],"id":"default"}}