"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[68760],{8008:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=t(17624),o=t(4552);const i={displayed_sidebar:"askuiStudioSidebar",custom_edit_url:null},r="MongoDB",a={id:"askui-studio/All-Integrations/mongodb",title:"MongoDB",description:"In this guide you will learn how to integrate data from a MongoDB database into your AskUI workflow.",source:"@site/versioned_docs/version-0.15.0/askui-studio/03-All-Integrations/04-mongodb.md",sourceDirName:"askui-studio/03-All-Integrations",slug:"/askui-studio/All-Integrations/mongodb",permalink:"/docs/askui-studio/All-Integrations/mongodb",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"0.15.0",sidebarPosition:4,frontMatter:{displayed_sidebar:"askuiStudioSidebar",custom_edit_url:null},sidebar:"askuiStudioSidebar",previous:{title:"Gitlab CI",permalink:"/docs/askui-studio/All-Integrations/gitlab-ci"},next:{title:"XRAY",permalink:"/docs/askui-studio/All-Integrations/xray"}},l={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Setup",id:"setup",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Example Repository",id:"example-repository",level:2}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"mongodb",children:"MongoDB"}),"\n",(0,s.jsx)(n.p,{children:"In this guide you will learn how to integrate data from a MongoDB database into your AskUI workflow."}),"\n",(0,s.jsxs)(n.p,{children:["We will use the ",(0,s.jsx)(n.em,{children:"Jest-MongoDB"})," integration to connect to the database in a convenient way."]}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["AskUI - Follow the Getting Started Guide for your operating system: ",(0,s.jsx)(n.a,{href:"/docs/general/Getting%20Started/Installing%20AskUI/getting-started",children:"Windows"})," | ",(0,s.jsx)(n.a,{href:"/docs/general/Getting%20Started/Installing%20AskUI/getting-started-linux",children:"Linux"})," | ",(0,s.jsx)(n.a,{href:"/docs/general/Getting%20Started/Installing%20AskUI/getting-started-macos",children:"macOS"})]}),"\n",(0,s.jsx)(n.li,{children:"Web browser"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Install the required dependencies for MongoDB"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @shelf/jest-mongodb @types/mongodb mongodb merge\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["Create ",(0,s.jsx)(n.code,{children:"test/jest-preset.js"})," for the database integration"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const merge = require('merge');\nconst { defaults: tsJestPreset } = require('ts-jest/presets');\nconst jestMongodbPreset = require('@shelf/jest-mongodb/jest-preset');\n\nmodule.exports = merge.recursive(tsJestPreset, jestMongodbPreset);\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["Add ",(0,s.jsx)(n.code,{children:"test/jest-preset.js"})," as preset in ",(0,s.jsx)(n.code,{children:"test/jest.config.ts"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import type { Config } from '@jest/types';\n\nconst config: Config.InitialOptions = {\n  **preset: './jest-preset.js',**\n  setupFilesAfterEnv: ['./helper/jest.setup.ts'],\n  sandboxInjectedGlobals: [\n    'Math',\n  ],\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default config;\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Add environment variables for connection to AskUI backend and MongoDB database"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"export ASKUI_WORKSPACE_ID=\nexport ASKUI_TOKEN=\nexport MONGO_URI=\nexport MONGO_DB_NAME=\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsxs)(n.li,{children:["Modify ",(0,s.jsx)(n.code,{children:"test/helper/jest.setup.ts"})," to use the environment variables ASKUI_WORKSPACE_ID and ASKUI_TOKEN"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"...\nconst askuiConfig = {\n  workspaceId: process.env.ASKUI_WORKSPACE_ID,\n  token: process.env.ASKUI_TOKEN,\n} as const;\n...\n  aui = await UiControlClient.build({\n    credentials: {\n      workspaceId: config.workspaceId,\n      token: config.token,\n    },\n  });\n...\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"6",children:["\n",(0,s.jsxs)(n.li,{children:["Import the required dependencies in your workflow file (i.e. ",(0,s.jsx)(n.code,{children:"test/my-first-askui-test-suite.test.ts"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Collection, Document } from 'mongodb';\nimport { aui, mongodb } from './helper/jest.setup';\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,s.jsx)(n.p,{children:"First we want to insert some testdata into our database. In this example just two labels for buttons. But it can be anything you would normally store in a MongoDB."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"\ud83d\udca1If you already have testdata in your database you can skip this step."}),"\n"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"describe('jest with askui', () => {\n  let buttons: Collection<Document>;\n\n  beforeAll(async () => {\n    // (Re-)Setting up db (may not be necessary\n    // if the data in the db does not change and\n    // is set up beforehand)\n    buttons = mongodb.collection('buttons');\n    await buttons.insertOne({ label: 'CHECK OUT THE DOCS' });\n    await buttons.insertOne({ label: 'CONTACT SUPPORT' });\n  });\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can now use the testdata in any subsequent test. Let us try to click the buttons with the labels we just stored before."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"it('should click on buttons with a label', async () => {\n    const buttonsCursor = buttons.find();\n    let nextButton = await buttonsCursor.next();\n    while (nextButton !== null) {\n      await aui.click().button().withText(nextButton.label).exec();\n      nextButton = await buttonsCursor.next();\n    }\n  });\n"})}),"\n",(0,s.jsx)(n.h2,{id:"example-repository",children:"Example Repository"}),"\n",(0,s.jsxs)(n.p,{children:["We also provide an ",(0,s.jsx)(n.a,{href:"https://github.com/askui/askui-mongodb-example",children:"example repository on Github"})," where you can check out the full setup described here \ud83d\ude42."]})]})}function u(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>a,M:()=>r});var s=t(11504);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);